<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>SystemCenterCentral.Utilities.Certificates</ID>
      <Version>1.4.1.0</Version>
    </Identity>
    <Name>PKI Certificate Validation V3</Name>
    <References>
      <Reference Alias="ReportLibrary">
        <ID>Microsoft.SystemCenter.DataWarehouse.Report.Library</ID>
        <Version>7.0.8560.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="InstanceGroupLibrary">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="ClusterLib">
        <ID>Microsoft.Windows.Cluster.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Visualization">
        <ID>Microsoft.SystemCenter.Visualization.Library</ID>
        <Version>7.0.8560.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.ApplicationComponent" Accessibility="Internal" Abstract="true" Base="Windows!Microsoft.Windows.ApplicationComponent" Hosted="false" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.Certificate" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.ApplicationComponent" Hosted="true" Singleton="false">
          <Property ID="CertIssuedTo" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="512" />
          <Property ID="SubjectAlternativeNameList" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="4096" />
          <Property ID="CertIssuedBy" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="512" />
          <Property ID="CertValidFrom" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertValidTo" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertVersion" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <!-- 1.0.1.0: changing property name to break upgrade path                                          -->
          <!--          need to make sure people don't upgrade directly as there might be issues causing the -->
          <!--          env to become stale                                                                   -->
          <!--          choosing a property that hopefully no one has used to build groups or the like        -->
          <!-- <Property ID="CertSigAlg" Type="string" Key="false" CaseSensitive="false" Length="256" MinLength="0" />  -->
          <Property ID="CertSignatureAlgo" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertPublicKey" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertPrivateKey" Type="bool" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertFriendlyName" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertThumbprint" Type="string" Key="true" CaseSensitive="false" MinLength="0" />
          <Property ID="CertSerial" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertStatus" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="4096" />
          <!--    1.2.0.0: added to make it easier to build valid groups -->
          <Property ID="CertTimeStatus" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="4096" />
          <Property ID="CertStore" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertExpiresWithin31Days" Type="bool" Key="false" CaseSensitive="false" MinLength="0" />
          <!-- 1.0.1.0: Adding property CA Version -->
          <!--     if it has a value, indicates, that this certificate has 2.5.29.19 - Basic Constraints set to True -->
          <!--     This extension consist of two values: CA Certificate Index and CA Key Index                       -->
          <Property ID="CAVersion" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <!-- 1.0.1.0: set to true if this certificate is the latest (by CA Version) CA certificate in store        -->
          <!--     will be used to group previous certificates and disable expiry monitoring for them                -->
          <!--
			    <Property ID="CACertIsCurrent" Type="bool" Key="false" />
			-->
          <!-- 1.2.2.0: added Microsoft template name as a property (used on autoenrollment certificates) -->
          <Property ID="TemplateName" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="1024" />
          <!-- 1.4.0.0: added -->
          <Property ID="EnhancedKeyUsageList" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="4096" />
        </ClassType>
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.NonRootCertificate" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.Certificate" Hosted="true" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.RootCertificate" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.Certificate" Hosted="true" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.Certificate" Hosted="true" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.CertificateStore" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.ApplicationComponent" Hosted="true" Singleton="false">
          <Property ID="CertStoreName" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertStoreID" Type="string" Key="true" CaseSensitive="false" MinLength="0" />
          <Property ID="StoreProvider" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="StoreType" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="Sync" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <!-- added properties that can be used to override the frequency of discoveries and monitors -->
          <Property ID="ChildScriptTimeout" Type="int" Key="false" />
          <Property ID="ChildDiscoveryInterval" Type="int" Key="false" />
          <Property ID="ChildMonitorInterval" Type="int" Key="false" />
          <!-- 1.2: Verification flags added-->
          <Property ID="RevocationFlag" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="RevocationMode" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="VerificationFlags" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <!-- 1.2.0.400: additional disocvery filters -->
          <Property ID="SubjectIncludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="IssuerIncludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="SubjectExcludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="IssuerExcludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="EnhKeyUseIncludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="EnhKeyUseExcludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="TemplateIncludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="TemplateExcludeRegEx" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
        </ClassType>
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.CertificateStore" Hosted="true" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore" Hosted="true" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.SmartCard" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore" Hosted="true" Singleton="false" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.CAGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup" Accessibility="Public" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup" Accessibility="Internal" Abstract="false" Base="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="SystemCenterCentral.Utilities.Certificates.CRL" Accessibility="Public" Abstract="false" Base="SystemCenterCentral.Utilities.Certificates.ApplicationComponent" Hosted="true" Singleton="false">
          <Property ID="CRLVersion" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <!-- 1.0.1.0: changing property name to break upgrade path                                          -->
          <!--          need to make sure people don't upgrade directly as there might be issues causing the -->
          <!--          env to become stale                                                                   -->
          <!--  <Property ID="CRLSigAlgo" Type="string" Key="false" CaseSensitive="false" MinLength="0" />  -->
          <Property ID="CRLSignatureAlgo" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CRLIssuer" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="512" />
          <Property ID="CRLThisUpdate" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CRLNextUpdate" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CRLEntries" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CRLThumbprint" Type="string" Key="true" CaseSensitive="false" MinLength="0" />
          <!-- 1.2.0.0: Adding property CA Version -->
          <Property ID="CRLCAVersion" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CertStore" Type="string" Key="false" CaseSensitive="false" MinLength="0" />
          <Property ID="CRLNeedsUpdate" Type="bool" Key="false" CaseSensitive="false" MinLength="0" />
        </ClassType>
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.Certificate" Accessibility="Public" Abstract="false" Base="System!System.Hosting">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="SystemCenterCentral.Utilities.Certificates.CertificateStore" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="SystemCenterCentral.Utilities.Certificates.Certificate" />
        </RelationshipType>
        <RelationshipType ID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" Accessibility="Public" Abstract="false" Base="System!System.Hosting">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </RelationshipType>
        <RelationshipType ID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.CRL" Accessibility="Public" Abstract="false" Base="System!System.Hosting">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="SystemCenterCentral.Utilities.Certificates.CertificateStore" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="SystemCenterCentral.Utilities.Certificates.CRL" />
        </RelationshipType>
      </RelationshipTypes>
    </EntityTypes>
    <SecureReferences>
      <SecureReference ID="SystemCenterCentral.Utilities.Certificates.HighPrivilege.SecureReference" Accessibility="Public" Context="System!System.Entity" />
    </SecureReferences>
    <ModuleTypes>
      <DataSourceModuleType ID="SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.Discovery.MapperSchema</SchemaType>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="ExpiryThresholdDays" type="xsd:integer" default="31" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DiscoverSupersededCACertificates" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SpreadInitializationOverInterval" type="xsd:integer" default="900" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ClassId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="InstanceSettings" type="SettingsType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Expression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="DiscoverSupersededCACertificates" Selector="$Config/DiscoverSupersededCACertificates$" ParameterType="bool" />
          <OverrideableParameter ID="ExpiryThresholdDays" Selector="$Config/ExpiryThresholdDays$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <!--
               <DataSource ID="ScriptDS" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptDataSource">
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <StoreProvider>$Config/StoreProvider$</StoreProvider>
              <StoreType>$Config/StoreType$</StoreType>
              <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
              <RevocationMode>$Config/RevocationMode$</RevocationMode>
              <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
                 
              <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
              <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
              <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
              <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
              <EnhKeyUseIncludeRegEx>$Config/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
              <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
              <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
              <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
              <ExpiryThresholdDays>$Config/ExpiryThresholdDays$</ExpiryThresholdDays>
                 
              <Debug>$Config/Debug$</Debug>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
-->
              <!-- test to trigger interactiverly -->
              <!--     backporting to Discovery Scheduler -->
              <DataSource ID="DiscoveryScheduler" TypeID="System!System.Discovery.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <!--<SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>-->
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptProbe">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <CertStoreID>$Config/CertStoreID$</CertStoreID>
                <StoreProvider>$Config/StoreProvider$</StoreProvider>
                <StoreType>$Config/StoreType$</StoreType>
                <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
                <RevocationMode>$Config/RevocationMode$</RevocationMode>
                <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
                <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
                <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
                <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
                <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
                <EnhKeyUseIncludeRegEx>$Config/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
                <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
                <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
                <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
                <ExpiryThresholdDays>$Config/ExpiryThresholdDays$</ExpiryThresholdDays>
                <Debug>$Config/Debug$</Debug>
              </ProbeAction>
              <ConditionDetection ID="CertificateInstance" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='InstanceType']</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Certificate</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <Or>
                        <!-- filter to disable discovery of superseded CA certificates -->
                        <Expression>
                          <And>
                            <Expression>
                              <SimpleExpression>
                                <ValueExpression>
                                  <Value Type="Boolean">$Config/DiscoverSupersededCACertificates$</Value>
                                </ValueExpression>
                                <Operator>Equal</Operator>
                                <ValueExpression>
                                  <Value Type="Boolean">false</Value>
                                </ValueExpression>
                              </SimpleExpression>
                            </Expression>
                            <Expression>
                              <RegExExpression>
                                <ValueExpression>
                                  <XPathQuery Type="String">Property[@Name='CAVersion']</XPathQuery>
                                </ValueExpression>
                                <Operator>DoesNotMatchRegularExpression</Operator>
                                <Pattern>superseded</Pattern>
                              </RegExExpression>
                            </Expression>
                          </And>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <Value Type="Boolean">$Config/DiscoverSupersededCACertificates$</Value>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="Boolean">true</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </Or>
                    </Expression>
                  </And>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="ClassMapper" TypeID="System!System.Discovery.FilteredClassSnapshotDataMapper">
                <Expression>$Config/Expression$</Expression>
                <ClassId>$Config/ClassId$</ClassId>
                <InstanceSettings>$Config/InstanceSettings$</InstanceSettings>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="ClassMapper">
                <Node ID="CertificateInstance">
                  <!--
                    <Node ID="ScriptDS" />
                    -->
                  <Node ID="ScriptProbe">
                    <Node ID="DiscoveryScheduler" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SystemCenterCentral.Utilities.Certificates.ScriptDataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="ExpiryThresholdDays" type="xsd:integer" default="31" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SpreadInitializationOverInterval" type="xsd:integer" default="900" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <!-- UniquenessScheduler features UniquenessKey to force running just once per store         -->
              <!--     such both discoveries will cook down into a single script run                       -->
              <!--     MPBA will complain but this is ok as SpreadInitializationOverInterval is implementd -->
              <DataSource ID="Scheduler" TypeID="System!System.UniquenessScheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
                <UniquenessKey>$Config/CertStoreID$</UniquenessKey>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptProbe">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <CertStoreID>$Config/CertStoreID$</CertStoreID>
                <StoreProvider>$Config/StoreProvider$</StoreProvider>
                <StoreType>$Config/StoreType$</StoreType>
                <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
                <RevocationMode>$Config/RevocationMode$</RevocationMode>
                <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
                <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
                <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
                <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
                <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
                <EnhKeyUseIncludeRegEx>$Config/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
                <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
                <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
                <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
                <ExpiryThresholdDays>$Config/ExpiryThresholdDays$</ExpiryThresholdDays>
                <Debug>$Config/Debug$</Debug>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="ScriptProbe">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SystemCenterCentral.Utilities.Certificates.CRL.LocalScriptDiscovery.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.Discovery.MapperSchema</SchemaType>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="ExpiryThresholdDays" type="xsd:integer" default="31" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SpreadInitializationOverInterval" type="xsd:integer" default="900" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ClassId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="InstanceSettings" type="SettingsType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Expression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <!--
			  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="integer" />
			  -->
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <!--
                <DataSource ID="ScriptDS" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptDataSource">
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <StoreProvider>$Config/StoreProvider$</StoreProvider>
              <StoreType>$Config/StoreType$</StoreType>
              <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
              <RevocationMode>$Config/RevocationMode$</RevocationMode>
              <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
                  
              <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
              <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
              <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
              <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
              <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
              <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
              <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
              <ExpiryThresholdDays>$Config/ExpiryThresholdDays$</ExpiryThresholdDays>
                  
              <Debug>$Config/Debug$</Debug>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
              -->
              <!-- test to trigger interactiverly -->
              <!--     backporting to Discovery Scheduler -->
              <DataSource ID="DiscoveryScheduler" TypeID="System!System.Discovery.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <!--<SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>-->
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptProbe">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <CertStoreID>$Config/CertStoreID$</CertStoreID>
                <StoreProvider>$Config/StoreProvider$</StoreProvider>
                <StoreType>$Config/StoreType$</StoreType>
                <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
                <RevocationMode>$Config/RevocationMode$</RevocationMode>
                <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
                <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
                <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
                <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
                <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
                <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
                <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
                <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
                <ExpiryThresholdDays>$Config/ExpiryThresholdDays$</ExpiryThresholdDays>
                <Debug>$Config/Debug$</Debug>
              </ProbeAction>
              <ConditionDetection ID="CRLInstance" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='InstanceType']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">CRL</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="ClassMapper" TypeID="System!System.Discovery.FilteredClassSnapshotDataMapper">
                <Expression>$Config/Expression$</Expression>
                <ClassId>$Config/ClassId$</ClassId>
                <InstanceSettings>$Config/InstanceSettings$</InstanceSettings>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="ClassMapper">
                <Node ID="CRLInstance">
                  <!--
                    <Node ID="ScriptDS" />
                    -->
                  <Node ID="ScriptProbe">
                    <Node ID="DiscoveryScheduler" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" Accessibility="Public">
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Frequency" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <!-- properties of the discovered certificate store -->
          <xsd:element name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ComputerPrincipalName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CertStoreName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChildMonitorSync" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChildMonitorInterval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChildDiscoveryInterval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChildScriptTimeout" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="DisplayName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" />
          <OverrideableParameter ID="ChildMonitorSync" Selector="$Config/ChildMonitorSync$" ParameterType="string" />
          <OverrideableParameter ID="ChildMonitorInterval" Selector="$Config/ChildMonitorInterval$" ParameterType="int" />
          <OverrideableParameter ID="ChildDiscoveryInterval" Selector="$Config/ChildDiscoveryInterval$" ParameterType="int" />
          <OverrideableParameter ID="ChildScriptTimeout" Selector="$Config/ChildScriptTimeout$" ParameterType="int" />
          <OverrideableParameter ID="RevocationFlag" Selector="$Config/RevocationFlag$" ParameterType="string" />
          <OverrideableParameter ID="RevocationMode" Selector="$Config/RevocationMode$" ParameterType="string" />
          <OverrideableParameter ID="VerificationFlags" Selector="$Config/VerificationFlags$" ParameterType="string" />
          <OverrideableParameter ID="SubjectIncludeRegEx" Selector="$Config/SubjectIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="IssuerIncludeRegEx" Selector="$Config/IssuerIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="SubjectExcludeRegEx" Selector="$Config/SubjectExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="IssuerExcludeRegEx" Selector="$Config/IssuerExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="EnhKeyUseIncludeRegEx" Selector="$Config/EnhKeyUseIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="EnhKeyUseExcludeRegEx" Selector="$Config/EnhKeyUseExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="TemplateIncludeRegEx" Selector="$Config/TemplateIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="TemplateExcludeRegEx" Selector="$Config/TemplateExcludeRegEx$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.Discovery.RegistryProvider">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <RegistryAttributeDefinitions>
                  <RegistryAttributeDefinition>
                    <AttributeName>Certificates</AttributeName>
                    <Path>SOFTWARE\Microsoft\SystemCertificates\$Config/CertStoreID$\Certificates</Path>
                    <PathType>0</PathType>
                    <AttributeType>0</AttributeType>
                  </RegistryAttributeDefinition>
                </RegistryAttributeDefinitions>
                <Frequency>$Config/Frequency$</Frequency>
              </DataSource>
              <ConditionDetection ID="Mapping" TypeID="System!System.Discovery.FilteredClassSnapshotDataMapper">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Values/Certificates</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">True</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <ClassId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry"]$</ClassId>
                <InstanceSettings>
                  <Settings>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Name>
                      <Value>$Config/CertStoreID$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                      <Value>$Config/ComputerPrincipalName$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$</Name>
                      <Value>$Config/CertStoreName$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</Name>
                      <Value>$Config/StoreProvider$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</Name>
                      <Value>$Config/StoreType$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</Name>
                      <Value>$Config/ChildMonitorSync$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildMonitorInterval$</Name>
                      <Value>$Config/ChildMonitorInterval$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildDiscoveryInterval$</Name>
                      <Value>$Config/ChildDiscoveryInterval$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</Name>
                      <Value>$Config/ChildScriptTimeout$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</Name>
                      <Value>$Config/RevocationFlag$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</Name>
                      <Value>$Config/RevocationMode$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</Name>
                      <Value>$Config/VerificationFlags$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</Name>
                      <Value>$Config/SubjectIncludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</Name>
                      <Value>$Config/IssuerIncludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</Name>
                      <Value>$Config/SubjectExcludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</Name>
                      <Value>$Config/IssuerExcludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseIncludeRegEx$</Name>
                      <Value>$Config/EnhKeyUseIncludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</Name>
                      <Value>$Config/EnhKeyUseExcludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</Name>
                      <Value>$Config/TemplateIncludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</Name>
                      <Value>$Config/TemplateExcludeRegEx$</Value>
                    </Setting>
                    <Setting>
                      <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                      <Value>$Config/DisplayName$</Value>
                    </Setting>
                  </Settings>
                </InstanceSettings>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Mapping">
                <Node ID="DS" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" Accessibility="Public">
        <Configuration>
          <xsd:element name="Frequency" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <!-- properties of the discovered certificate store -->
          <xsd:element name="ChildMonitorInterval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChildDiscoveryInterval" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChildScriptTimeout" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Frequency" Selector="$Config/Frequency$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="ChildMonitorInterval" Selector="$Config/ChildMonitorInterval$" ParameterType="int" />
          <OverrideableParameter ID="ChildDiscoveryInterval" Selector="$Config/ChildDiscoveryInterval$" ParameterType="int" />
          <OverrideableParameter ID="ChildScriptTimeout" Selector="$Config/ChildScriptTimeout$" ParameterType="int" />
          <OverrideableParameter ID="RevocationFlag" Selector="$Config/RevocationFlag$" ParameterType="string" />
          <OverrideableParameter ID="RevocationMode" Selector="$Config/RevocationMode$" ParameterType="string" />
          <OverrideableParameter ID="VerificationFlags" Selector="$Config/VerificationFlags$" ParameterType="string" />
          <OverrideableParameter ID="SubjectIncludeRegEx" Selector="$Config/SubjectIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="IssuerIncludeRegEx" Selector="$Config/IssuerIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="SubjectExcludeRegEx" Selector="$Config/SubjectExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="IssuerExcludeRegEx" Selector="$Config/IssuerExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="EnhKeyUseIncludeRegEx" Selector="$Config/EnhKeyUseIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="EnhKeyUseExcludeRegEx" Selector="$Config/EnhKeyUseExcludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="TemplateIncludeRegEx" Selector="$Config/TemplateIncludeRegEx$" ParameterType="string" />
          <OverrideableParameter ID="TemplateExcludeRegEx" Selector="$Config/TemplateExcludeRegEx$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider">
                <IntervalSeconds>$Config/Frequency$</IntervalSeconds>
                <SyncTime />
                <ScriptName>SystemCenterCentral.Utilities.Certificates.LocalServiceStore.Discovery.vbs</ScriptName>
                <Arguments>$MPElement$ $Target/Id$ $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ $Config/ChildMonitorInterval$ $Config/ChildDiscoveryInterval$ $Config/ChildScriptTimeout$ "$Config/RevocationFlag$" "$Config/RevocationMode$" "$Config/VerificationFlags$" "$Config/SubjectIncludeRegEx$" "$Config/IssuerIncludeRegEx$" "$Config/SubjectExcludeRegEx$" "$Config/IssuerExcludeRegEx$" "$Config/EnhKeyUseIncludeRegEx$" "$Config/EnhKeyUseExcludeRegEx$" "$Config/TemplateIncludeRegEx$" "$Config/TemplateExcludeRegEx$" $Config/Debug$</Arguments>
                <ScriptBody>
								'*************************************************************************
' Script Name - SystemCenterCentral.Utilities.Certificates.LocalServiceStore.Discovery.vbs
'
' Purpose     - Queries certificate stores of windows services in the registry. If any of them have either
'		certificates or certificate revocation lists (CRLs) installed, the stores are added to SCOM
'
' Parameters  	1 - SourceID
'			2 - ManagedEntityId
'			3 - TargetComputer
'			4 - ChildMonitorInterval
'			5 - iChildDiscoveryInterval
'			6 - iChildScriptTimeout
'     7 - strRevocationFlag
'     8 - strRevocationMode
'     9 - strVerificationFlags
'    10 - strSubjectInclude
'    11 - strIssuerInclude
'    12 - strSubjectExclude
'    13 - strIssuerExclude
'    14 - strEnhKeyUseInclude
'    15 - strEnhKeyUseExclude
'    16 - strTemplateInclude
'    17 - strTemplateExclude
'
' 1.0 - 14. July 2009 - Raphael Burri / raburri@bluewin.ch
' 1.2 - 24. December 2013 - Raphael Burri / raburri@bluewin.ch
'         added revocation and verification switches
' 1.3 - 04. July 2014 - Raphael Burri
'         added include / exclude filters
' 1.4 - 07. Sept 2018 - Raphael Burri
'         added include EKU filter
'*************************************************************************

Option Explicit

Const HKEY_LOCAL_MACHINE = &amp;H80000002

'registry key of the services' certificates
Const SERVICES_CERTIFICATES_KEY = 	"SOFTWARE\Microsoft\Cryptography\Services"
Const SERVICE_STORE_KEY = 		"\SystemCertificates\My"
Const SERVICE_CERT_KEY = 			"\Certificates"
Const SERVICE_CRL_KEY = 			"\CRLs"


Dim objArgs, objAPI, objDiscoveryData
Dim SourceID, ManagedEntityId, TargetComputer
Dim aServiceStores
Dim iChildMonitorInterval, iChildDiscoveryInterval, iChildScriptTimeout
Dim strRevocationFlag, strRevocationMode, strVerificationFlags
Dim strSubjectInclude, strIssuerInclude, strSubjectExclude, strIssuerExclude, strEnhKeyUseInclude, strEnhKeyUseExclude , strTemplateInclude, strTemplateExclude

'get the parameters from the management pack
Set objArgs = WScript.Arguments
If objArgs.Count &lt; 15 Then
 	WScript.Quit -1
End If
SourceID = objArgs(0)
ManagedEntityId = objArgs(1)
TargetComputer = objArgs(2)
iChildMonitorInterval = objArgs(3)
iChildDiscoveryInterval = objArgs(4)
iChildScriptTimeout = objArgs(5)
strRevocationFlag = objArgs(6)
strRevocationMode = objArgs(7)
strVerificationFlags = objArgs(8)
strSubjectInclude = objArgs(9)
strIssuerInclude = objArgs(10)
strSubjectExclude = objArgs(11)
strIssuerExclude = objArgs(12)
strEnhKeyUseInclude = objArgs(13)
strEnhKeyUseExclude = objArgs(14)
strTemplateInclude = objArgs(15)
strTemplateExclude = objArgs(16)

'create the SCOM API object
Set objAPI = CreateObject("MOM.ScriptAPI")
'create the discovery data object
Set objDiscoveryData = objAPI.CreateDiscoveryData(0, SourceId, ManagedEntityId)

'read certificate stores from service registry key
aServiceStores = ReadCertificates(TargetComputer)

On Error Resume Next
If UBound(aServiceStores) &gt;= 0 Then
    If Err.number = 0 Then
	    'WScript.Echo "Discovering " &amp; UBound(aServiceStores) + 1 &amp; " stores"
	    Set objDiscoveryData = DiscoverServiceStores(objDiscoveryData, aServiceStores, TargetComputer, iChildMonitorInterval,iChildDiscoveryInterval, strRevocationFlag, strRevocationMode, strVerificationFlags, strSubjectInclude, strIssuerInclude, strSubjectExclude, strIssuerExclude, strEnhKeyUseInclude, strEnhKeyUseExclude,strTemplateInclude, strTemplateExclude)
	End If
End If
On Error Goto 0

'return discovery data
Call objAPI.Return(objDiscoveryData)


Set objDiscoveryData = Nothing
Set objAPI = Nothing

WScript.Quit(0)


Function ReadCertificates (strComputer)
	
	'prepares an array of certificate stores that contain service certificates ot CRLs
	'aCertificateStores
	Dim objRegistry, objCIMV2, objServices, objService
	Dim  strServiceName, strServiceDisplayName
	Dim aServices, aServiceCerts, aServiceCRLs, aCertificateStores
	Dim bStoreNotEmpty
	Dim iStore
	
	iStore = 0
		
	Set objRegistry = GetObject("winmgmts:\\" &amp; strComputer &amp; "\root\default:StdRegProv")
	Set objCIMV2   = GetObject("winmgmts:\\"&amp; strComputer &amp; "\root\cimv2")
	
	'get all the services, listed to have some sort of cryptography configuration
	objRegistry.EnumKey HKEY_LOCAL_MACHINE, SERVICES_CERTIFICATES_KEY, aServices
	On Error Resume Next
	If UBound(aServices) &gt;= 0 Then
	    'WScript.Echo UBound(aServices)
		If Err.number &lt;&gt; 0 Then
			'no services with cryptography configuration - do nothing
		Else
			On Error Goto 0
			'prepare the array to conatin the stores
			ReDim aCertificateStores(UBound(aServices), 2)
			bStoreNotEmpty = vbFalse
			'check if the services have certificates
			For Each strServiceName In aServices
			    'WScript.Echo strServiceName
				objRegistry.EnumKey HKEY_LOCAL_MACHINE, SERVICES_CERTIFICATES_KEY &amp; "\" &amp; strServiceName &amp; SERVICE_STORE_KEY &amp; SERVICE_CERT_KEY, aServiceCerts
				On Error Resume Next
				'if service has certificates, process them
				If UBound(aServiceCerts) &gt;= 0 Then
					If Err.number &lt;&gt; 0 Then
						'no certificate - check if CRLs are present
						objRegistry.EnumKey HKEY_LOCAL_MACHINE, SERVICES_CERTIFICATES_KEY &amp; "\" &amp; strServiceName &amp; SERVICE_STORE_KEY &amp; SERVICE_CRL_KEY, aServiceCRLs
						'if service has crls, process them
						If UBound(aServiceCRLs) &gt;= 0 Then
							If Err.number &lt;&gt; 0 Then
								'no CLRs either - the store doesn't contain certs nor CRLs so do not discover it
							Else
								'CRLs found - set the discovery flag
								'WScript.Echo "CRLs found in store " &amp; strServiceName &amp; "\My"
								bStoreNotEmpty = vbTrue
							End If
						End If
					Else
						'certificates found - set the discovery flag
						'WScript.Echo "Certificates found in store " &amp; strServiceName &amp; "\My"
						bStoreNotEmpty = vbTrue
						On Error Goto 0
					End If
				End If
					
				If bStoreNotEmpty = vbTrue Then
					
				'get display name of the service
				Set objServices = objCIMV2.ExecQuery("Select DisplayName  from Win32_Service where Name = '" &amp; strServiceName &amp; "'")
		    		For Each objService In objServices
					strServiceDisplayName = objService.DisplayName
	    			Next
				'add the certificate store's details to the array
				aCertificateStores(iStore, 0) = strServiceName
				aCertificateStores(iStore, 1) = strServiceDisplayName
				
				'WScript.Echo "Store for Service " &amp; strServiceDisplayName &amp; " will be discovered"
				   				
				End If
				iStore = iStore + 1
			Next
		End If
	End If
	
	'return the array with the store data
	ReadCertificates = aCertificateStores
					
End Function


Function DiscoverServiceStores (ByVal objDiscoveryData, ByVal aDiscoverData, strComputer, iChildMonitorInterval,iChildDiscoveryInterval, strRevocationFlag, strRevocationMode, strVerificationFlags, strSubjectInclude, strIssuerInclude, strSubjectExclude, strIssuerExclude, strEnhKeyUseInclude, strEnhKeyUseExclude, strTemplateInclude, strTemplateExclude)

	Dim objInst
	Dim strOutput
	Dim iStore
	Dim aStore

	If UBound(aDiscoverData) &gt;= 0 Then
		For iStore = 0 To UBound(aDiscoverData)
			'check if the store name contains data
			If aDiscoverData(iStore,0) = "" Then
					'store doesn't contain either certificates or CRLs - no deed to discover it
			Else	
				Set objInst = objDiscoveryData.CreateClassInstance("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry']$")
				'set display name
				Call objInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", aDiscoverData(iStore,1) + " certificate store")
				'add the key properties of the hosts
				Call objInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", strComputer)
				'add the properties of the store (1st is key)
				'service stores' key is like "-service -service ServiceName\My"
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/CertStoreID$", aDiscoverData(iStore,0) + "\My")
    
         'P/Invoke ready
         Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/StoreProvider$", "SystemRegistry")
         Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/StoreType$", "Services")
       
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/CertStoreName$", "Service " + aDiscoverData(iStore,1))
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/Sync$", " - ")
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/ChildMonitorInterval$", iChildMonitorInterval)
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/ChildDiscoveryInterval$", iChildDiscoveryInterval)
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/ChildScriptTimeout$", iChildScriptTimeout)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/RevocationFlag$", strRevocationFlag)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/RevocationMode$", strRevocationMode)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/VerificationFlags$", strVerificationFlags)

        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/SubjectIncludeRegEx$", strSubjectInclude)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/IssuerIncludeRegEx$", strIssuerInclude)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/SubjectExcludeRegEx$", strSubjectExclude)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/IssuerExcludeRegEx$", strIssuerExclude)
				Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/EnhKeyUseIncludeRegEx$", strEnhKeyUseInclude)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/EnhKeyUseExcludeRegEx$", strEnhKeyUseExclude)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/TemplateIncludeRegEx$", strTemplateInclude)
        Call objInst.AddProperty("$MPElement[Name='SystemCenterCentral.Utilities.Certificates.CertificateStore']/TemplateExcludeRegEx$", strTemplateExclude)


        Call objDiscoveryData.AddInstance(objInst)
				strOutput = strOutput &amp; vbCrLf &amp; " - " &amp; aDiscoverData(iStore,0)
			End If
		Next
		
		'write success event - for debugging - if certificates were discovered
		If Len(strOutput) &gt; 0 Then
		    Call objAPI.LogScriptEvent("SystemCenterCentral.Utilities.Certificates.LocalServiceStore.Discovery.vbs", 3006, 4, "The WinNT service certificate store discovery script is returning discovery data for the following service stores to SCOM:" &amp; VbCrLf _
						&amp; strOutput)
		End If
		
		Set DiscoverServiceStores = objDiscoveryData
		
		Set objInst = Nothing
	End If

End Function


							</ScriptBody>
                <TimeoutSeconds>300</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType ID="SystemCenterCentral.Utilities.Certificates.ScriptProbe" Accessibility="Internal" RunAs="SystemCenterCentral.Utilities.Certificates.HighPrivilege.SecureReference" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\n" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="ExpiryThresholdDays" type="xsd:integer" default="31" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="CertificateBagProbe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>SystemCenterCentral.Utilities.Certificates.Certificate_Verify_Script_V6.ps1</ScriptName>
                <ScriptBody><![CDATA[#
# Enumerate certificates and CRLs in windows certificate stores
#		Returns SCOM property bags
#
#		P/Invoke on cert32.dll was required as .NET does not currently
#		feature an object for CRLs nor for advanced certificate stores (e.g. WinNT service based).
#
#		System requirements: Powershell >= 2.0 / .NET >= 2.0
#
#		Ignores RevocationStatusUnknown and OfflineRevocation (treated as valid)
#
#		Parameters
#			$storename			e.g. My
#			$storeProvider		SystemRegistry | System | File | LDAP
#			$storeType			LocalMachine | CurrentUser | Services | Users
#			$revocationFlag		EntireChain | ExcludeRoot | EndCertificateOnly
#			$revocationMode		Online | Offline | NoCheck
#			$verificationFlags  ...
#			$subjectIncludeRegEx
#			$issuerIncludeRegEx
#           $subjectExcludeRegEx
#			$issuerExcludeRegEx
#     $enhKeyUseIncludeRegEx RegEx to include certificates with a specific enhanced key usage OID
#			$enhKeyUseExcludeRegEx RegEx to exclude certificates with a specific enhanced key usage OID
#			$templateIncludeRegEx
#			$templateExcludeRegEx
#			$expiryThresholdDays
#			$debugParam
#
# Version 1.0 - 23. December 2013 - initial            - Raphael Burri - raburri@bluewin.ch
# Version 2.0 - 25. March 2014 	  - Self signed option - Raphael Burri - raburri@bluewin.ch
# Version 3.0 - 27. March 2014    - exception when calling PrtToStructure(InPtr, Type) on PoSh >= 3.0. KB2909958 describes a
#								 	workaround. 		- Raphael with a lot of help & coffee by Marc (MoW) and Joel (Jaykul)
# Version 3.1 - 28. March 2014    - open stores read only
# Version 3.2 - 11. June 2014     - skip certificates based on Enhanced Key Usage (napHealthyOid etc.)
# Version 4.0 - 04. July 2014     - filter certs & crl based on subject & issuer inside the script instead
#                                   of outside.
# Version 5.0 - 20. Feb 2015     - assure "Subject" can not be an empty string
#									added CertificateTemplate as a property and ex- & include RegEx
#									verbose output to deal with issues on the certificate's chain
#									filter "unknown error" from StatusMessage (PoSh 2.0)
# Version 5.1 - 07. May 2015	- add $expiryThresholdDays parameter to allow overriding when certificates
#									should be reported in views and reports
# Version 5.2 - 30. July 2015	- fix localized detection of template name
# Version 6.0 - 06. September 2018	- Add-Type modifications / add EKU to property bag / add EKU include filter
#
#
#	CRL bits originally provided by and included with the approval of Vadims Podāns - vpodans@sysadmins.lv
# 								http://www.sysadmins.lv/CategoryView,category,PowerShell,6.aspx
#

#region parameters
param([string]$storeName = "My",
	[string]$storeProvider = "SystemRegistry",
	[string]$storeType = "LocalMachine", 
	[string]$revocationFlag = "EntireChain", 
	[string]$revocationMode = "Online", 
	[string]$verificationFlags = "IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown", 
	[string]$subjectIncludeRegEx = "^.*$",
	[string]$issuerIncludeRegEx = "^.*$",
	[string]$subjectExcludeRegEx = "^$",
	[string]$issuerExcludeRegEx = "^$",
  [string]$enhKeyUseIncludeRegEx = "^(|.+)$",
	[string]$enhKeyUseExcludeRegEx = "\n",
	[string]$templateIncludeRegEx = "^(|.+)$",
	[string]$templateExcludeRegEx = "\n",
	[int]$expiryThresholdDays = 31,
	[string]$debugParam = "true")
#endregion


#region just examples and placeholders for debug
#storeName: fullpath or just name. E.g.: "My" / c:\SOMEHWRE\store.bin / "WinNTServiceName\MY" etc...
#storeProvider: System (a summary map) / SystemRegistry (really is in registry) / File / LDAP
#storeType: LocalMachine / CurrentUser / Services / Users

#$storeName = "My"
#$debugParam = "true"
#$storeName = "aspnet_state\My"
#$storeProvider = "System"
#$storeProvider = "LDAP"
#endregion

#region variables and constants
# get script name
# SCOM agent calls them dynamically, assigning random names
#$scriptName = $MyInvocation.MyCommand.Name
$scriptName = "Certificate_Verify_Script_V5.ps1"
$userName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

#parameter from string (override param from SCOM) to boolean
if ($debugParam -eq 'true') { $debugScript = $true}
else {$debugScript = $false}

# check if running in native PoSh ConsoleHost
if ($Host.Name -imatch '^ConsoleHost$') {$psHostConsole = $true}
else {$psHostConsole = $false}

#constants for crypt32.dll methods
[int]$CERT_STORE_PROV_MEMORY = 0x02
[int]$CERT_STORE_PROV_FILE = 0x03
[int]$CERT_STORE_PROV_REG = 0x04
[int]$CERT_STORE_PROV_PKCS7 = 0x05
[int]$CERT_STORE_PROV_SERIALIZED = 0x06
[int]$CERT_STORE_PROV_FILENAME = 0x08
[int]$CERT_STORE_PROV_SYSTEM = 0x0A
[int]$CERT_STORE_PROV_COLLECTION = 0x0B
[int]$CERT_STORE_PROV_SYSTEM_REGISTRY = 0x0D
[int]$CERT_STORE_PROV_SMART_CARD = 0x0F
[int]$CERT_STORE_PROV_LDAP = 0x10

[int]$CERT_STORE_ENUM_ARCHIVED_FLAG = 0x00000200
[int]$CERT_STORE_OPEN_EXISTING_FLAG = 0x00004000
[int]$CERT_STORE_READONLY_FLAG = 0x00008000

[int]$CERT_SYSTEM_STORE_CURRENT_USER =  0x00010000
[int]$CERT_SYSTEM_STORE_LOCAL_MACHINE = 0x00020000
[int]$CERT_SYSTEM_STORE_SERVICES = 	 0x00050000
[int]$CERT_SYSTEM_STORE_USERS = 0x00060000

#see on input parameters - default to LocalSystem store My (personal computer store), SystemRegistry provider (registry) and LocalSystem storetype
if ($storeName -eq "") { $storeName = "My"}
# system reflect a map (includes Third-Party, Group, Enterprise etc.)
if ($storeProvider -eq "System") { $storeProv = $CERT_STORE_PROV_SYSTEM}
# systemregistry only returns the certificates physically present in the local registry
elseif ($storeProvider -eq "SystemRegistry") { $storeProv = $CERT_STORE_PROV_SYSTEM_REGISTRY}
elseif ($storeProvider -eq "File") { $storeProv = $CERT_STORE_PROV_FILE}
elseif ($storeProvider -eq "LDAP") { $storeProv = $CERT_STORE_PROV_LDAP}
else {$storeProv = $CERT_STORE_PROV_SYSTEM_REGISTRY}
if ($storeType -eq "LocalSystem") { $storeTp = $CERT_SYSTEM_STORE_LOCAL_MACHINE}
elseif ($storeType -eq "CurrentUser") { $storeTp = $CERT_SYSTEM_STORE_CURRENT_USER}
elseif ($storeType -eq "Services") { $storeTp = $CERT_SYSTEM_STORE_SERVICES}
elseif ($storeType -eq "Users") { $storeTp = $CERT_SYSTEM_STORE_USERS}
else { $storeTp = $CERT_SYSTEM_STORE_LOCAL_MACHINE}
#set open_existing and readonly
$storeTp = $storeTp + $CERT_STORE_OPEN_EXISTING_FLAG + $CERT_STORE_READONLY_FLAG


#PoSh 2.0 was shipped with 2008R2/Win7. In order to have as little dependency on later updates
#     as possible this script only uses 2.0 cmdlets
$minimalPSVersion = "2.0"
$CERTVALID   =  "IsVerified"
$CERTTIMEVALID   =  "IsTimeValid"

#lookup for certificates snap-in friendly names (in english only)
$storeNameTable = @{"AuthRoot" = "Third-Party Root Certification Authorities";
	"CA" = "Intermediate Certification Authorities";
	"Disallowed" = "Untrusted Certificates";
	"My" = "Personal";
	"REQUEST" = "Certificate Enrollment Requests";
	"Root" = "Trusted Root Certification Authorities";
	"SmartCardRoot" = "Smart Card Trusted Roots";
	"Trust" = "Enterprise Trust";
	"TrustedDevices" =  "Trusted Devices";
	"TrustedPeople" = "Trusted People";
	"TrustedPublisher" = "Trusted Publisher";
	"WebHosting" = "Web Hosting"}
	
#initialize hash tables
$certificateObjects = @()
$crlObjects = @()
#endregion

#region C# Signature
# C# module imports and types where-type variable
# as CRLs are not implemented in System.Security.Cryptography.X509Certificates
 $x509Signature = @"
 using System;
 using System.Runtime.InteropServices;
 using System.Security;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
  
 namespace SystemCenterCentral
 {
     namespace Utilities
     {
         namespace Certificates
         {
                 public class X509CRL2
                 {
                     public int Version;
                     public string Type;
                     public X500DistinguishedName IssuerDN;
                     public string Issuer;
                     public DateTime ThisUpdate;
                     public DateTime NextUpdate;
                     public Oid SignatureAlgorithm;
                     public X509ExtensionCollection Extensions;
                     // no need to know every single entry
					 // public X509CRLEntry[] RevokedCertificates;
					 public uint RevokedCertificateCount;
                   
                     //public byte[] RawData;
                 }
				 
				 //no need for CRL entries at the moment
                 //public class X509CRLEntry
                 //{
                 //    public string SerialNumber;
                 //    public DateTime RevocationDate;
                 //    public int ReasonCode;
                 //    public string ReasonMessage;
                 //}
             
                 public class Helper {
                     [DllImport("crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
                     public static extern int CertCreateCRLContext(
                         int dwCertEncodingType,
                         IntPtr pbCrlEncoded,
                         int cbCrlEncoded
                     );
                      
                     [DllImport("crypt32.dll", EntryPoint="CertEnumCertificatesInStore", CharSet=CharSet.Auto, SetLastError=true)]
                     public static extern IntPtr CertEnumCertificatesInStore(
                                     IntPtr storeProvider,
                                     IntPtr prevCertContext);
                                    
                     [DllImport("crypt32.dll", EntryPoint="CertEnumCRLsInStore", CharSet=CharSet.Auto, SetLastError=true)]
                     public static extern IntPtr CertEnumCRLsInStore(
                                    IntPtr storeProvider,
                                     IntPtr prevCrlContext);
                                    
                     [DllImport("crypt32.dll", EntryPoint="CertEnumCTLsInStore", CharSet=CharSet.Auto, SetLastError=true)]
                     public static extern IntPtr CertEnumCTLsInStore(
                                    IntPtr storeProvider,
                                     IntPtr prevCtlContext);
                      
                     [DllImport("crypt32.dll", SetLastError = true)]
                     public static extern Boolean CertFreeCRLContext(
                         IntPtr pCrlContext
                     );
                      
                     [DllImport("crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
                     public static extern int CertNameToStr(
                         int dwCertEncodingType,
                         ref CRYPTOAPI_BLOB pName,
                         int dwStrType,
                         System.Text.StringBuilder psz,
                         int csz
                     );
                      
                     [DllImport("crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
                     public static extern IntPtr CertFindExtension(
                         [MarshalAs(UnmanagedType.LPStr)]String pszObjId,
                         int cExtensions,
                         IntPtr rgExtensions
                     );
                      
                     [DllImport("crypt32.dll", EntryPoint="CertOpenStore", CharSet=CharSet.Auto, SetLastError=true)]
                     public static extern IntPtr CertOpenStoreStringPara(
                                     int storeProvider,
                                     int encodingType,
                                     IntPtr hcryptProv,
                                     int flags,
                                     String pvPara);
                                    
                     [DllImport("crypt32.dll", EntryPoint="CertCloseStore", CharSet=CharSet.Auto, SetLastError=true)]
                     [return : MarshalAs(UnmanagedType.Bool)]
                     public static extern bool CertCloseStore(
                                     IntPtr storeProvider,
                                     int flags);
                }

                [StructLayout(LayoutKind.Sequential)]
                public struct CRL_CONTEXT
                {
                     public int dwCertEncodingType;
                     // TODO: This should be marshalled right, as BYTE[]
                     // [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)]
                     public IntPtr pbCrlEncoded;
                     public uint cbCrlEncoded;
                     // TODO: You can marshal this as CRL_INFO directly
                     public IntPtr pCrlInfo;
                     public IntPtr hCertStore;
                }
                 
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
                public struct CRL_INFO
                {
                     public int dwVersion;
                     public CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
                     public CRYPTOAPI_BLOB Issuer;
                     public Int64 ThisUpdate;
                     public Int64 NextUpdate;
                     public int cCRLEntry;

                     // TODO: This should be marshalled right, as CRL_ENTRY[] ??
                     public IntPtr rgCRLEntry;
                     public int cExtension;
                     public IntPtr rgExtension;
                }
                 
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
                public struct CRYPT_ALGORITHM_IDENTIFIER
                {
                    [MarshalAs(UnmanagedType.LPStr)]public String pszObjId;
                    public CRYPTOAPI_BLOB Parameters;
                }
                 
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
                public struct CRYPTOAPI_BLOB
                {
                    public int cbData;
                    public IntPtr pbData;
                }
                 
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
                public struct CRL_ENTRY
                {
                    public CRYPTOAPI_BLOB SerialNumber;
                    public Int64 RevocationDate;
                    public int cExtension;
                    public IntPtr rgExtension;
                }
                 
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
                public struct CERT_EXTENSION
                {
                    [MarshalAs(UnmanagedType.LPStr)]public String pszObjId;
                    public Boolean fCritical;
                    public CRYPTOAPI_BLOB Value;
                }

             }
     }
 }
"@
#endregion

# Get access to the scripting API
$scomAPI = new-object -comObject "MOM.ScriptAPI"

# check if Powershell >= 2.0 is running
if( ($PSVersionTable.PSCompatibleVersions) -contains $minimalPSVersion)
	{
	Write-Host Powershell installed: ( $PSVersionTable.PSVersion.ToString() )
	Write-Host      It is compatible with version $minimalPSVersion required by this script
	}
else
	{
	Write-Host Powershell installed: $PSVersionTable.PSVersion.ToString() `t`t`t`t`t`t`t`t -BackgroundColor red 
	Write-Host `tIt is not compatible with version $minimalPSVersion required by this script `t -BackgroundColor red
	exit
	}


#region check if the flag parameters are valid
$X509ParamValid = $true
$X509ParamEx = ""
try {[System.Security.Cryptography.X509Certificates.X509RevocationFlag]$X509RevocationFlag = $revocationFlag}
	catch {Write-Warning $_
		$X509ParamValid = $false
		$X509ParamEx += [string]$_ + "
"
		# stick to default
		[System.Security.Cryptography.X509Certificates.X509RevocationFlag]$X509RevocationFlag = "EntireChain"
		}
try {[System.Security.Cryptography.X509Certificates.X509RevocationMode]$X509RevocationMode = $revocationMode}
	catch {Write-Warning $_ 
		$X509ParamValid = $false
		$X509ParamEx += [string]$_ + "
"
		# stick to default
		[System.Security.Cryptography.X509Certificates.X509RevocationMode]$X509RevocationMode = "NoCheck"
		}
try {[System.Security.Cryptography.X509Certificates.X509VerificationFlags]$X509VerificationFlags = $verificationFlags}
	catch {Write-Warning $_
		$X509ParamValid = $false
		$X509ParamEx += [string]$_ + "
"
		#stick to default
		[System.Security.Cryptography.X509Certificates.X509VerificationFlags]$X509VerificationFlags = "IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown"
		}
if ($X509ParamValid)
	{
	$scomAPI.LogScriptEvent($scriptName, 110, 4, "Script starting certificate and CRL discovery/verification:
	
Parameters:
-----------
storeName: " + $storeName + "
storeProvider: " + $storeProvider + "
storeType: " + $storeType + " 
revocationFlag: " + $revocationFlag + "
revocationMode: " + $revocationMode + "
verificationFlags: " + $verificationFlags + "
expiryThresholdDays: " + $expiryThresholdDays + "
debugParam: " + $debugParam + "

PowerShell Host / Version / PID:
--------------------------------
" + $host.name + " / " + $PSVersionTable.PSVersion + " / " + $PID)
	}
else
	{
	$scomAPI.LogScriptEvent($scriptName, 111, 2, "Script starting with default certificate verification flags as the overridden parameters were invalid:

Parameters:
-----------
storeName: " + $storeName + "
storeProvider: " + $storeProvider + "
storeType: " + $storeType + " 
revocationFlag: " + $revocationFlag + "
revocationMode: " + $revocationMode + "
verificationFlags: " + $verificationFlags + "
expiryThresholdDays: " + $expiryThresholdDays + "
debugParam: " + $debugParam + "

PowerShell Host / Version / PID:
--------------------------------
" + $host.name + " / " + $PSVersionTable.PSVersion + " / " + $PID + "

Exception Detail:
----------------
" + $X509ParamEx)	
	}
#endregion

function main
	{
	# loading crypt32.dll type to [SystemCenterCentral.Utilities.Certificates.Helper]
	# NOTE: no exception occurs if type was already loaded. Runtime will then just use the previous one
	try
		{Add-Type -TypeDefinition $x509Signature}
	catch 
		{
		#throw "Unable to load [SystemCenterCentral.Utilities.Certificates.X509CRL] and [SystemCenterCentral.Utilities.Certificates.Helper] namespace with crypt32.dll methods"
		$scomAPI.LogScriptEvent($scriptName, 119, 2, "Unable to load [SystemCenterCentral.Utilities.Certificates.X509CRL] and [SystemCenterCentral.Utilities.Certificates.Helper] namespace with crypt32.dll methods. Retrying on the next script run.")
		#exit
		}
	
	#ready to rumble
	
	#get certificate store
	$certStorePt = [SystemCenterCentral.Utilities.Certificates.Helper]::CertOpenStoreStringPara($storeProv, 0, 0, $storeTp, $storeName)
	if ($certStorePt -ne 0)
	{
		# first see about certificates
		#take it from store pointer to full .NET as certificates are exposed there and easier to handle.
		#    this works perfectly for File, LDAP or WinNT service stores.
		$certStore = [System.Security.Cryptography.X509Certificates.X509Store]$certStorePt
		$certificateObjects += @(Get-CertificateProperties -store $certStore -revocationFlag $revocationFlag -revocationMode $revocationMode -verificationFlags $verificationFlags -subjectInclude $subjectIncludeRegEx -issuerInclude $issuerIncludeRegEx -subjectExclude $subjectExcludeRegEx -issuerExclude $issuerExcludeRegEx -enhKeyUseInclude $enhKeyUseIncludeRegEx -enhKeyUseExclude $enhKeyUseExcludeRegEx -templateInclude $templateIncludeRegEx -templateExclude $templateExcludeRegEx)
		if ($certificateObjects.Count -gt 0) {Write-CertificatePropertyBags -certificateObjects $certificateObjects}
	
		# now proceed with CRLs - this requires crypt32.dll P/Invoke
		$crlPt = [SystemCenterCentral.Utilities.Certificates.Helper]::CertEnumCRLsInStore($certStorePt, 0)
		While ($crlPt -ne 0) {
			$crlObjects += @(Get-X509CRL2 -context $crlPt)
			$crlPt = [SystemCenterCentral.Utilities.Certificates.Helper]::CertEnumCRLsInStore($certStorePt, $crlPt)
			}
		if ($crlObjects.Count -gt 0) { Write-CRLPropertyBags -crlObjects $crlObjects -issuerInclude $issuerIncludeRegEx -issuerExclude $issuerExcludeRegEx }
		# close store
		$closeStore = [SystemCenterCentral.Utilities.Certificates.Helper]::CertCloseStore($certStorePt, 0)
		}
	else
		{
		$scomAPI.LogScriptEvent($scriptName, 113, 2, ("Failed to open certificate store.`n`nstoreName: {0}`nstoreProvider: {1}`nstoreType: {2}" -f $storeName,$storeProvider,$storeType)) 
		}
		
	#return an empty bag if no objects were found
	if (($certificateObjects.Count -lt 1) -and ($script:crlObjectsReturned -lt 1))
		{
		$objVoidBag = $scomAPI.CreatePropertyBag() 
		#when running outside native SCOM host, use AddItem as in legacy days to have console output
		if ($psHostConsole -eq $true) {  $scomAPI.AddItem($objVoidBag) }
		else { $objVoidBag }
		}
	#when running from command line forcing the return (legacy)
	if ($psHostConsole -eq $true) { $scomAPI.ReturnItems() }
	

	#write summary event
	$scomAPI.LogScriptEvent($scriptName, 112, 4, ("Script enumerated certificates and CLRs from store '{0}\{1}\{2}'`n`nN° of certs: {3} of {4}`nN° of CRLs: {5} of {6}`n`nThe property bags of this script are being consumed by discovery as well as monitoring workflows.`n`nFilters applied:`nsubject match {7} and notmatch {8}`nissuer match {9} and notmatch {10}`ntemplate match {11} and notmatch {12}`nenhanced key usage OIDs match {13}`nenhanced key usage OIDs notmatch {14}`nUser Context: {15}"-f $storeType,$storeProvider,$storeName,[int]($certificateObjects.Count),[int]($certStore.Certificates.Count),[int]($script:crlObjectsReturned), [int]($crlObjects.Count),[string]$subjectIncludeRegEx, [string]$subjectExcludeRegEx, [string]$issuerIncludeRegEx, [string]$issuerExcludeRegEx, [string]$templateIncludeRegEx, [string]$templateExcludeRegEx, [string]$enhKeyUseIncludeRegEx, [string]$enhKeyUseExcludeRegEx, [string]$userName))
	}
	

function Validate-X509Certificate2
# using pure .NET for certificate validation
	{
	param($X509Certificate2, $X509RevocationFlag, $X509RevocationMode, $X509VerificationFlags)
		
	$X509Chain = New-Object System.Security.Cryptography.X509Certificates.X509Chain

	#	EndCertificateOnly: Only the end certificate is checked for revocation.  
 	#	EntireChain:		The entire chain of certificates is checked for revocation.  
 	#	ExcludeRoot:		The entire chain, except the root certificate, is checked for revocation.  
	$X509Chain.ChainPolicy.RevocationFlag = $X509RevocationFlag
	
	#	NoCheck:	No revocation check is performed on the certificate.  
 	#	Offline:	A revocation check is made using a cached certificate revocation list (CRL).  
 	#	Online: 	A revocation check is made using an online certificate revocation list (CRL).  
	$X509Chain.ChainPolicy.RevocationMode = $X509RevocationMode
	
	#	AllFlags:										All flags pertaining to verification are included.  
 	#	AllowUnknownCertificateAuthority:				Ignore that the chain cannot be verified due to an unknown certificate authority (CA).  
 	#	IgnoreCertificateAuthorityRevocationUnknown:	Ignore that the certificate authority revocation is unknown when determining certificate verification.  
 	#	IgnoreCtlNotTimeValid:							Ignore that the certificate trust list (CTL) is not valid, for reasons such as the CTL has expired, when determining certificate verification.  
 	#	IgnoreCtlSignerRevocationUnknown:				Ignore that the certificate trust list (CTL) signer revocation is unknown when determining certificate verification.  
 	#	IgnoreEndRevocationUnknown:						Ignore that the end certificate (the user certificate) revocation is unknown when determining certificate verification.  
 	#	IgnoreInvalidBasicConstraints:					Ignore that the basic constraints are not valid when determining certificate verification.  
 	#	IgnoreInvalidName:								Ignore that the certificate has an invalid name when determining certificate verification.  
 	#	IgnoreInvalidPolicy:							Ignore that the certificate has invalid policy when determining certificate verification.  
 	#	IgnoreNotTimeNested:							Ignore that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested when verifying the certificate. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.  
 	#	IgnoreNotTimeValid:								Ignore certificates in the chain that are not valid either because they have expired or they are not yet in effect when determining certificate validity.  
 	#	IgnoreRootRevocationUnknown:					Ignore that the root revocation is unknown when determining certificate verification.  
 	#	IgnoreWrongUsage:								Ignore that the certificate was not issued for the current use when determining certificate verification.  
 	#	NoFlag:											No flags pertaining to verification are included.  
	$X509Chain.ChainPolicy.VerificationFlags = $X509VerificationFlags
	
	#explicitly forcing verificationtime to NOW
	$X509Chain.ChainPolicy.VerificationTime = (Get-Date).ToUniversalTime()
	
	
	#Builds an X.509 chain using the policy specified
	#   true if the X.509 certificate is valid; otherwise, false
	
	if ($X509Chain.Build($X509Certificate2))
		{
		$valid = $true
		$statusSummary = $null
		$statusSummaryCert = $null
		$statusSummaryChain = $null
		}
	else
		{
		$valid = $false
		$statusSummaryChain = @()
		$statusSummary = $X509Chain.ChainStatus | %{
			if ($_.StatusInformation.ToString().Trim() -imatch '^unknown error\.') {($_.Status.ToString().Trim() + ":" + "`n")}
			else {($_.Status.ToString().Trim() + ": " + $_.StatusInformation.ToString().Trim() + "`n")}
			}
		if ($X509Chain.ChainElements.Count -gt 1) {
			#build verbose string with the chain level status
			$chainLevel = ($X509Chain.ChainElements.Count - 1)
			$X509Chain.ChainElements | % {
				#certificate's status
				if ($_.Certificate.Thumbprint -eq $X509Certificate2.Thumbprint) {
					if ($_.ChainElementStatus)	{
						$statusSummaryCert = $_.ChainElementStatus | %{
							if ($_.StatusInformation.ToString().Trim() -imatch '^unknown error\.') {($_.Status.ToString().Trim() + ":" + "`n")}
							else {($_.Status.ToString().Trim() + ": " + $_.StatusInformation.ToString().Trim() + "`n")}
							}
						}
					else { 
						$statusSummaryCert = $CERTVALID
						}
					}
				#chain element status
				else {
					$statusSummaryChainObj = New-Object psobject
					$statusSummaryChainObj | Add-Member -MemberType NoteProperty -Name chainLevel -Value $chainLevel
					$statusSummaryChainObj | Add-Member -MemberType NoteProperty -Name chainSubject -Value $_.Certificate.Subject
					if ($_.ChainElementStatus)	{
						$statusSummaryChainCert = $_.ChainElementStatus | %{
							if ($_.StatusInformation.ToString().Trim() -imatch '^unknown error\.') {($_.Status.ToString().Trim() + ":" + "`n")}
							else {($_.Status.ToString().Trim() + ": " + $_.StatusInformation.ToString().Trim() + "`n")}
							}
						}
					else {
						$statusSummaryChainCert = $CERTVALID
						}
					$statusSummaryChainObj | Add-Member -MemberType NoteProperty -Name chainSummary -Value $statusSummaryChainCert
				
					$statusSummaryChain += $statusSummaryChainObj
				
					}
				$chainLevel--	
				}
			}
		else {
			$statusSummaryCert = $statusSummary
			$statusSummaryChain = $null
			}
		}	
	return $valid, $statusSummary, $statusSummaryCert, $statusSummaryChain
	}

function Get-CertificateProperties
# call validate and aggregate certificate information with CA version, template name
  {
    param ($store,
      $revocationFlag = "EntireChain",
      $revocationMode = "Online",
      $verificationFlags = "NoFlag",
      $subjectInclude = "^.*$",
      $issuerInclude = "^.*$",
      $subjectExclude = "^$",
      $issuerExclude = "^$",
      $enhKeyUseInclude = "^(|.+)$",
      $enhKeyUseExclude = "^$",
      $templateInclude = "^(|.+)$",
      $templateExclude = "\n")
	
    #$certificateList = $null
    $certificateList = @()
	
    #get and validate all certificates found in the store - except archived ones,
    # certs that match the subject and issuer filters
    # and certificates to be excluded via Enhanced Key Usage (2.5.29.37)
    $store.Certificates | where {$_.Archived -eq $false} | % { `
      $certExluded = $false
      #for certificates with an empty subject. Use 1st SAN line.
      if ($_.Subject.length -eq 0) {
        if ($_.Extensions | where { $_.OID.Value -eq "2.5.29.17"}) {
          $_.Extensions | where { $_.OID.Value -eq "2.5.29.17"} | % {
            $subjectChecked = (($_.Format($true)).Split("`n")[0]).Trim()
          }
        }
        else { $subjectChecked = "" }
      }
      else { $subjectChecked = $_.Subject }
		
      #filter on subject and issuer
      if (($subjectChecked -inotmatch $subjectInclude) -or ($subjectChecked -imatch $subjectExclude))	{ $certExluded = $true }
      if (($_.Issuer -inotmatch $issuerInclude) -or ($_.Issuer -imatch $issuerExclude)) {	$certExluded = $true }
      #filter on enhanced key usage
      if ($_.Extensions | where { $_.OID.Value -eq "2.5.29.37"}) {
        $_.Extensions | where { $_.OID.Value -eq "2.5.29.37"} | % {
           if ($_.EnhancedKeyUsages.Value -join ", " | where { (($_-notmatch $enhKeyUseInclude) -or ($_ -match $enhKeyUseExclude))})	{ 
             $certExluded = $true 
           }
        }
      }
      #get certificate template name (if avaliable)
      $templateName = ""
      if ($_.Extensions | where { $_.OID.Value -match "^1\.3\.6\.1\.4\.1\.311\.2(0\.2|1\.7)$"}) {
			
        #TemplateName (Version 1)
        $_.Extensions | where { $_.OID.Value -match "^1\.3\.6\.1\.4\.1\.311\.20\.2$"} | % {
          $templateName = $_.Format($false).trim()
        }
        #Template (Version 2)
        $_.Extensions | where { $_.OID.Value -match "^1\.3\.6\.1\.4\.1\.311\.21\.7$"} | % {
          #sometimes no actual name but only the OID is contained - if cert is found outside of issuing forest
          # W2K3 systems may have localized output: matching on word characters instead
          #($_.Format($false)) -match 'Template=((?<templateName>.+)\((?<templateOID>1\.3\.6\.1\.4\.1\.311\.[0-9.]+)\)|(?<templateOID>1\.3\.6\.1\.4\.1\.311\.[0-9.]+))' | Out-Null
          ($_.Format($false)) -match '\b\w+\s*=\s*((?<templateName>.+)\((?<templateOID>1\.3\.6\.1\.4\.1\.311\.[0-9.]+)\)|(?<templateOID>1\.3\.6\.1\.4\.1\.311\.[0-9.]+))' | Out-Null
          if ($matches.templateName) {$templateName = ($matches.templateName.trim() + "(" + $matches.templateOID.trim() + ")")}
          else {$templateName = $matches.templateOID.trim()}
        }
      }
      #filter on template name (might be OID)
      if (($templateName -inotmatch $templateInclude) -or ($templateName -imatch $templateExclude))	{ $certExluded = $true }
     
      #get SANs as a list
      $SANs = ""
      $SANList = @()
      if ($_.Extensions | where { $_.OID.Value -eq "2.5.29.17"}) {
          $_.Extensions | where { $_.OID.Value -eq "2.5.29.17"} | % {
            $SANList += (($_.Format($true).Trim() -split "\n"))
          }
        }
      $SANs = $SANList -join ", "
      
      #get certificate Enhanced Key Usage List (if avaliable)
      $EKU = "<null>: all purpose certificate"
      $EKUList = @()
      if ($_.EnhancedKeyUsageList.Count -gt 0) {
        $_.EnhancedKeyUsageList | Sort-Object ObjectId | ForEach-Object {
          if ($_.FriendlyName) {
            $EKUList += """{0}: {1}""" -f $_.FriendlyName, $_.ObjectId
          }
          else {
            $EKUList += $_.ObjectId
          }
        }
        $EKU = $EKUList -join ", "
      }

      if ($certExluded -eq $false)
      {
        # get service properties from various sources
        $caVersionByte = 0
        $certificateObj = New-Object psobject
        $certificateObj | Add-Member -MemberType NoteProperty -Name certSubjectChk -Value $subjectChecked
        $certificateObj | Add-Member -MemberType NoteProperty -Name cert -Value $_
		
        # checking "EntireChain", "Online" and not using any tolerate flags "NoFlag"
        #   that's as picky as one can get
        $validCert = Validate-X509Certificate2 -X509Certificate2 $_ -X509RevocationFlag $X509RevocationFlag -X509RevocationMode $X509RevocationMode -X509VerificationFlags $X509VerificationFlags
		
        $certificateObj | Add-Member -MemberType NoteProperty -Name certValid -Value $validCert[0]
        $certificateObj | Add-Member -MemberType NoteProperty -Name certValidationString -Value $validCert[1]
        $certificateObj | Add-Member -MemberType NoteProperty -Name certValidationCertificateString -Value $validCert[2]
        #convert chain validation object into a string
        $certificateObj | Add-Member -MemberType NoteProperty -Name certValidationChainString -Value $validCert[3]
        	
        # check if the szOID_CERTSRV_CA_VERSION - 1.3.6.1.4.1.311.21.1 extension is used
        #   and learn the CA version
        #   CA certificates will return either version number (e.g. 2.0) or "n/a" if
        #         no version number extension was found
        #   normal certs will have an empty string ""
        if ($_.Extensions | where { $_.OID.Value -eq "2.5.29.19"})
        {
          if ($_.Extensions | where { $_.OID.Value -eq "1.3.6.1.4.1.311.21.1"})
          {
            # ASN.1 decoded format of CAVersion will return V1.0 or similar
            $caVersion = [double]((($_.Extensions | where { $_.OID.Value -eq "1.3.6.1.4.1.311.21.1"}).Format($false)).Replace('V',''))
          }
          else {$caVersion = "n/a"}
        }
        else {$caVersion = ""}
			
        $certificateObj | Add-Member -MemberType NoteProperty -Name certCAVersion -Value $caVersion
			
        $certificateObj | Add-Member -MemberType NoteProperty -Name certTemplate -Value $templateName		
        $certificateObj | Add-Member -MemberType NoteProperty -Name certEKU -Value $EKU
        $certificateObj | Add-Member -MemberType NoteProperty -Name certSAN -Value $SANs
        $certificateList += @($certificateObj)
      }
     }
    return $certificateList
  }
	
function Write-CertificatePropertyBags
	{
	param ($certificateObjects)
	
	#evaluate the highest CAVersion number
	$versionedCACertHigh = @{}
	$certificateObjects | where {($_.GetType().FullName -eq 'System.Management.Automation.PSCustomObject') -and ($_.certCAVersion -ne 'n/a') -and ($_.certCAVersion -ge 0)} | % `
	{
	#add instance issues to hash
	if (!$versionedCACertHigh.ContainsKey($_.cert.Issuer))
		{
		$versionedCACertHigh.Add($_.cert.Issuer, $_.certCAVersion)
		}
	else
		{
		if ([double]($versionedCACertHigh.get_Item($_.cert.Issuer)) -lt [double]$_.certCAVersion)
			{
			$versionedCACertHigh.set_Item($_.cert.Issuer, $_.certCAVersion)
			}
		}
	}

	#build SCOM propertybag
  $certificateObjects | where {($_.GetType().FullName -eq 'System.Management.Automation.PSCustomObject') } | % { `
	
    $certStatusString = ''
    $certStatusIgnoreUntrustedRootString = ''
    $certVerboseStatusString = ''
    $certTimeStatusString = ''
    $certVerboseTimeStatusString = ''
    #build a SCOM property bag
    $objCertBag = $scomAPI.CreatePropertyBag() 
	
    $objCertBag.AddValue("InstanceType", "Certificate")
    $objCertBag.AddValue("UserContext", [string]$userName)
    $objCertBag.AddValue("CertVersion", [string]$_.cert.Version)
    $objCertBag.AddValue("CertSerial", [string]$_.cert.SerialNumber)
    $objCertBag.AddValue("CertSignatureAlgo", [string]$_.cert.SignatureAlgorithm.FriendlyName)
    $objCertBag.AddValue("CertIssuedBy", [string]$_.cert.IssuerName.Name)
    $objCertBag.AddValue("CertValidFrom", [string]$_.cert.NotBefore.ToUniversalTime())
    $objCertBag.AddValue("CertValidTo", [string]$_.cert.NotAfter.ToUniversalTime())
    #if subject is empty this will contain the 1st SAN
    $objCertBag.AddValue("CertIssuedTo", [string]$_.certSubjectChk)
    $objCertBag.AddValue("CertPublicKey", [string]$_.cert.PublicKey.Key.KeyExchangeAlgorithm)
    $objCertBag.AddValue("CertFriendlyName", [string]$_.cert.FriendlyName)
    $objCertBag.AddValue("CertThumbprint", [string]$_.cert.Thumbprint)
    $objCertBag.AddValue("CertSAN", [string]$_.certSAN)
	
    #see if in extensions "CertificateAuthority" is set
    if ($_.cert.Extensions | where { (($_.OID.Value -eq "2.5.29.19") -and ($_.CertificateAuthority -eq $true))}) 
    {
      $objCertBag.AddValue("CertIsCertificateAuthority", "True")
      $isCACert = $true
    }
    Else 
    {
      $objCertBag.AddValue("CertIsCertificateAuthority", "False")
      $isCACert = $false
    }
    #check if self-signed (SubjectName and IssuerName match)
    if ($_.cert.IssuerName.Name -eq $_.cert.SubjectName.Name) {$objCertBag.AddValue("CertIsSelfSigned", "True")}
    else {$objCertBag.AddValue("CertIsSelfSigned", "False")}
	
			
    $objCertBag.AddValue("CertPrivateKey", [string]$_.cert.HasPrivateKey)
	
    $objCertBag.AddValue("CertDaysStillValid", [long]($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days)
	
    #descriptive string used in expiry alert descriptions
    if (((($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).TotalDays) -ge 0) -and ((($_.cert.NotBefore.ToUniversalTime() - (Get-Date).ToUniversalTime()).TotalDays) -lt 0)) {$lifetimeMessage = " expires in " + [string]($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days + " days on " + [string]$_.cert.NotAfter.ToUniversalTime() + " UTC"}
    if ((($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).TotalDays) -lt 0) {$lifetimeMessage = " has expired on " + [string]$_.cert.NotAfter.ToUniversalTime() + " UTC"}
    if ((($_.cert.NotBefore.ToUniversalTime() - (Get-Date).ToUniversalTime()).TotalDays) -ge 0) {$lifetimeMessage = " is not valid until on or after " + [string]$_.cert.NotBefore.ToUniversalTime() + " UTC"}
    # CtlNotTimeValid and NotTimeNested on certificate
    if($_.certValidationCertificateString -match "CtlNotTimeValid:"){$lifetimeMessage = "'s chain is not in a valid time range. Check if intermediate or root certificates have to be renewed"}
    if($_.certValidationCertificateString -match "NotTimeNested:"){$lifetimeMessage = " and the CA (certificate authority) certificate have validity periods that are not nested. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested"}
    #check a rare case when not the certificate but the chain's lifetime has expired or it isn't nested
    # using new "certValidationChainString" in V5
    if ($_.certValidationChainString ) {
      $_.certValidationChainString | % { 
        if ($_.chainSummary -imatch "(NotTimeValid|CtlNotTimeValid):") { $lifetimeMessage = "'s chain is not in a valid time range. Check if intermediate or root certificates have to be renewed"
          if($_.chainSummary -match "NotTimeNested:"){$lifetimeMessage = "'s chain certificates have validity periods that are not nested. For example, the intermediate CA cert can be valid from January 1 to December 1 and the root CA cert from January 2 to December 2, which would mean the validity periods are not nested"}
        }
      }
    }	
    $objCertBag.AddValue("CertLifeTimeMessage", $lifetimeMessage)
	
    #static flag set to true if the certificate expires in less than a month.
    #   changed to dynamic value via parameter
    #if (([long](($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days) -le 31) -and ([long](($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days) -ge 0)) {$objCertBag.AddValue("CertExpiresWithin31Days", "true")}
    if (([long](($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days) -le $expiryThresholdDays) -and ([long](($_.cert.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days) -ge 0)) {
      $objCertBag.AddValue("CertExpiresSoon", "true")
      $certExpiresSoon = "true"
    }
    else {
      $objCertBag.AddValue("CertExpiresSoon", "false")
      $certExpiresSoon = "false"
    }
	
    #descriptive string informing why the validation failed
    #   filter 'NotTimeValid:' as this is being taken care of by the time properties
    #despite setting the revocation flags, chain build still seems to return "RevocationStatusUnknown" and "OfflineRevocation"
    #   treat these as valid
    #filtering status 'UntrustedRoot' as an option for self-signed certificates in personal stores
    #     caveat: it would still show as an error in certmgr GUI...
    $validationStatusMatch = '^(NotTimeValid:|CtlNotTimeValid:|NotTimeNested:|RevocationStatusUnknown:|OfflineRevocation:)'
    $validationStatusMatchIgnoreUntrustedRoot = '^(NotTimeValid:|CtlNotTimeValid:|NotTimeNested:|RevocationStatusUnknown:|OfflineRevocation:|UntrustedRoot:)'
    $validationTimeStatusMatch = '^(NotTimeValid:|CtlNotTimeValid:|NotTimeNested:)'
    if ($_.certValidationString -ne $null)
    {
      $certStatusString = [string]($_.certValidationString | where  {$_ -notmatch $validationStatusMatch}| % {(($_).trim() + " ### ")})
      $certStatusIgnoreUntrustedRootString = [string]($_.certValidationString | where  {$_ -notmatch $validationStatusMatchIgnoreUntrustedRoot}| % {(($_).trim() + " ### ")})
      $certTimeStatusString = [string]($_.certValidationString | where  {$_ -match $validationTimeStatusMatch}| % {(($_).trim() + " ### ")})
    }
	
    #more verbose output taking into account the chain's status
    if ($_.certValidationString -ne $null) {
      #check summary for time issue
      $certVerboseStatusString = [string]($_.certValidationString | where  {$_ -notmatch $validationStatusMatch}| % {(($_).trim())})
      if ($certVerboseStatusString.length -gt 0) {
        #get certificate issue
        $certVerboseStatusString = [string]($_.certValidationCertificateString | where  {$_ -notmatch $validationStatusMatch}| % {(($_).trim() + "`n")})
        if ($certVerboseStatusString.length -le 0) { $certVerboseStatusString = $CERTVALID + "`n" }
        $certVerboseStatusString = "--- Certificate Status ---`n" + $certVerboseStatusString
        if ($_.certValidationChainString -ne $null ) {
          $certVerboseStatusString = $certVerboseStatusString + "`n--- Chain Status Overview ---`n"
          $_.certValidationChainString | % { 
            $certVerboseStatusStringChain = ($_.chainSummary | where  {$_ -notmatch $validationStatusMatch})
            if ($certVerboseStatusStringChain.length -le 0) { $certVerboseStatusStringChain = $CERTVALID + "`n" }
          $certVerboseStatusString = $certVerboseStatusString + ("Level " + $_.ChainLevel + ": " + $_.ChainSubject + "`n" + $certVerboseStatusStringChain + "`n") }
        }
      }
			
			
			
      #check summary for time issue
      $certVerboseTimeStatusString = [string]($_.certValidationString | where  {$_ -match $validationTimeStatusMatch}| % {(($_).trim())})
      if ($certVerboseTimeStatusString.length -gt 0) {
        #get certificate issue from 
        $certVerboseTimeStatusString = [string]($_.certValidationCertificateString | where  {$_ -match $validationTimeStatusMatch} | % {(($_).trim() + "`n")})
        if ($certVerboseTimeStatusString.length -le 0) { $certVerboseTimeStatusString = $CERTVALID + "`n" }
        $certVerboseTimeStatusString = "--- Certificate Status ---`n" + $certVerboseTimeStatusString
        if ($_.certValidationChainString -ne $null ) {
          $certVerboseTimeStatusString = $certVerboseTimeStatusString + "`n--- Chain Status Overview ---`n"
          $_.certValidationChainString | % { 
            $certVerboseTimeStatusStringChain = ($_.chainSummary | where  {$_ -match $validationTimeStatusMatch})
            if ($certVerboseTimeStatusStringChain.length -le 0) { $certVerboseTimeStatusStringChain = $CERTVALID + "`n" }
            $certVerboseTimeStatusString = $certVerboseTimeStatusString + ("Level " + $_.ChainLevel + ":" + $_.ChainSubject + "`n" + $certVerboseTimeStatusStringChain + "`n") 
          }
        }
      }
    }
		
    #set valid strings respectively clean ending separator
    if (($certStatusString -eq $null) -or ($certStatusString -eq '')) {$certStatusString = $CERTVALID}
    else {$certStatusString = ($certStatusString.Substring(0,$certStatusString.length - 5)).trim()}
    if (($certStatusIgnoreUntrustedRootString -eq $null) -or ($certStatusIgnoreUntrustedRootString -eq '')) {$certStatusIgnoreUntrustedRootString = $CERTVALID}
    else {$certStatusIgnoreUntrustedRootString = ($certStatusIgnoreUntrustedRootString.Substring(0,$certStatusIgnoreUntrustedRootString.length - 5)).trim()}
    if (($certTimeStatusString -eq $null) -or ($certTimeStatusString -eq '')) {$certTimeStatusString = $CERTTIMEVALID}
    else {$certTimeStatusString = ($certTimeStatusString.Substring(0,$certTimeStatusString.length - 5)).trim()}
	
    $objCertBag.AddValue("CertStatus", $certStatusString)
    $objCertBag.AddValue("CertStatusIgnoreUntrustedRoot", $certStatusIgnoreUntrustedRootString)
    $objCertBag.AddValue("CertTimeStatus", $certTimeStatusString)
    $objCertBag.AddValue("CertVerboseStatus", $certVerboseStatusString)
    $objCertBag.AddValue("CertVerboseTimeStatus", $certVerboseTimeStatusString)
	
    #  szOID_CERTSRV_CA_VERSION - 1.3.6.1.4.1.311.21.1
    #     flag all but the most recent CA certificate as replaced
    if (($_.certCAVersion -ne 'n/a') -and ($_.certCAVersion -ge 0))
    {
      #if superseded then flag
      if ($_.certCAVersion -ne ($versionedCACertHigh.get_Item($_.cert.Issuer)))
      {
        # set version string so that discovery can filter
        $certCAVersionString = ([string]$_.certCAVersion + " (superseded)")
      }
      else {$certCAVersionString = ([string]$_.certCAVersion + " (current)")}
    }
    else {$certCAVersionString = ([string]$_.certCAVersion) }
    $objCertBag.AddValue("CAVersion", $certCAVersionString)
	
    $objCertBag.AddValue("TemplateName", $_.certTemplate)
    $objCertBag.AddValue("EnhancedKeyUsageList", $_.certEKU)
		
    if ($debugScript)
    {
      $certOutput = "
        CERTIFICATE
        -----------
      CertIssuedTo: " + [string]$_.certSubjectChk + "
      CertIssuedBy: " + [string]$_.cert.IssuerName.Name + "
      SANs: " + [string]$_.certSAN + "
      TemplateName: " + [string]$_.certTemplate + "

      CertValidFrom: " + [string]$_.cert.NotBefore.ToUniversalTime() + "
      CertValidTo: " + [string]$_.cert.NotAfter.ToUniversalTime() + "

      CertVersion: " + [string]$_.cert.Version + "
      CertSerial: " + [string]$_.cert.SerialNumber + "
      CertSignatureAlgo: " + [string]$_.cert.SignatureAlgorithm.FriendlyName  +  "
      CertPublicKey: " + [string]$_.cert.PublicKey.Key.KeyExchangeAlgorithm + "
      CertFriendlyName: " + [string]$_.cert.FriendlyName + "
      CertThumbprint: " + [string]$_.cert.Thumbprint + "
      CertPrivateKey: " + [string]$_.cert.HasPrivateKey + "

      CertIsCertificateAuthority: " + $isCACert + "
      CertIsSelfSigned: " + ($_.cert.IssuerName.Name -eq $_.cert.SubjectName.Name) + "

      CAVersion: " + $certCAVersionString + "

      CertExpiresSoon (views/reports): " + $certExpiresSoon + "

      CertStatusString: " + $certStatusString + "
      CertStatusIgnoreUntrustedRoot " + $certStatusIgnoreUntrustedRootString + "
      CertTimeStatus: " + $certTimeStatusString + "
      CertLifeTimeMessage: " + $lifetimeMessage


      $scomAPI.LogScriptEvent($scriptName, 114, 4, "DEBUG: Adding certificate..." + $certOutput)
    }	
    #when running outside native SCOM host, use AddItem as in legacy days to have console output
    if ($psHostConsole -eq $true) { $scomAPI.AddItem($objCertBag)}
    else { $objCertBag }
  }

	
	}

function Write-CRLPropertyBags
	{
	#only return the latest CRL(s) with the highest caVersion extension
	param ($crlObjects, [string]$issuerInclude = "^.*$", [string]$issuerExclude = "^$")
	
	#get additional properties from extensions - especially CA Version
	$versionedCRLHigh = @{}
	$crlList = @()
	$pbgdCRLs = 0
	$crlObjects | % { `
		#skip CRLs that match the issuer filter
		if (($_.Issuer -imatch $issuerInclude) -and ($_.Issuer -inotmatch $issuerExclude))
			{
			# check if the szOID_CERTSRV_CA_VERSION - 1.3.6.1.4.1.311.21.1 extension is used
			#   and learn the CA version
			if ($_.Extensions | where { $_.OID.Value -eq "1.3.6.1.4.1.311.21.1"})
				{
				# ASN.1 decoded format of CAVersion will return V1.0 or similar
				$caVersion = [double]((($_.Extensions | where { $_.OID.Value -eq "1.3.6.1.4.1.311.21.1"}).Format($false)).Replace('V',''))
				}
			else {$caVersion = "n/a"}
		
			# Authority Key Identier
			if ($_.Extensions | where { $_.OID.Value -eq "2.5.29.35"})
				{
				# ASN.1 decoded format of Authority Key Identifier
				$authKeyId = (($_.Extensions | where { $_.OID.Value -eq "2.5.29.35"}).Format($false)).Replace('KeyID=','')
				}
			else {$authKeyId = ""}
		
			# CRL Number
			if ($_.Extensions | where { $_.OID.Value -eq "2.5.29.20"})
				{
				# ASN.1 decoded format of Authority Key Identifier
				$crlNumber = ($_.Extensions | where { $_.OID.Value -eq "2.5.29.20"}).Format($false)
				}
			else {$crlNumber = ""}
		
			#evaluate the highest CAVersion number
			if (($caVersion -ne 'n/a') -and ($caVersion -ge 0))
				{
				#add instance issues to hash
				if (!$versionedCRLHigh.ContainsKey($_.Issuer))	{$versionedCRLHigh.Add($_.Issuer, $caVersion)}
				else
					{
					if (($versionedCRLHigh.get_Item($_.Issuer)) -lt $caVersion) { $versionedCRLHigh.set_Item($_.Issuer, $caVersion)	}
					}
				}
				
			#now add all the additional properties to an object
			$crlObjEnh = New-Object psobject
			$crlObjEnh | Add-Member -MemberType NoteProperty -Name crl -Value $_
			$crlObjEnh | Add-Member -MemberType NoteProperty -Name caVersion -Value $caVersion
			$crlObjEnh | Add-Member -MemberType NoteProperty -Name authKeyId -Value $authKeyId
			$crlObjEnh | Add-Member -MemberType NoteProperty -Name crlNumber -Value $crlNumber
		
			$crlList += @($crlObjEnh)
			}
		}

	$crlList | % { `
	
		##skip all but the most recent caVersion CRL
		if (($_.caVersion -eq 'n/a') -or ($_.caVersion -eq ($versionedCRLHigh.get_Item($_.crl.Issuer))))
			{
			#build a SCOM property bag
			$objCRLBag = $scomAPI.CreatePropertyBag() 
		
			$objCRLBag.AddValue("InstanceType", "CRL")
			$objCRLBag.AddValue("UserContext", [string]$userName)
			$objCRLBag.AddValue("CRLVersion", [string]$_.crl.Version)
			$objCRLBag.AddValue("CRLSigAlg", [string]$_.crl.SignatureAlgorithm.FriendlyName)
			$objCRLBag.AddValue("CRLIssuedBy", [string]$_.crl.Issuer)
			$objCRLBag.AddValue("CRLThisUpdate", [string]$_.crl.ThisUpdate.ToUniversalTime())
			$objCRLBag.AddValue("CRLNextUpdate", [string]$_.crl.NextUpdate.ToUniversalTime())
			$objCRLBag.AddValue("CRLEntries", [int64]$_.crl.RevokedCertificateCount)
			#CERT_SHA1_HASH_PROP_ID is not exposed, hence build a key using various properties instead
			#     as this is used only to provide SCOM object key that's fine
			$objCRLBag.AddValue("CRLHash", [string](Get-SHA1Hash -inputString ($_.crl.Issuer + $_.authKeyId)))
			
			#properties from extensions
			$objCRLBag.AddValue("CRLCAVersion", [string]$_.caVersion)
			$objCRLBag.AddValue("CRLAuthKeyId", [string]$_.authKeyId)
			$objCRLBag.AddValue("CRLNumber", [string]$_.crlNumber)
		
			$objCRLBag.AddValue("CRLDaysUntilUpdate", [double](($_.crl.NextUpdate - (Get-Date)).Days))
			if ((($_.crl.NextUpdate - (Get-Date)).TotalDays) -le 0) {$objCRLBag.AddValue("CRLNeedsUpdate", "True")}
			else  {$objCRLBag.AddValue("CRLNeedsUpdate", "False")}
			
			if ($debugScript)
				{
				$crlOutput = "
CRL
-----------			
CRLIssuedBy: " + [string]$_.crl.Issuer  +  "

CRLThisUpdate: " + [string]$_.crl.ThisUpdate.ToUniversalTime() + "
CRLNextUpdate: " + [string]$_.crl.NextUpdate.ToUniversalTime() + "

CRLVersion: " + [string]$_.crl.Version + "
CRLSigAlg: " + [string]$_.crl.SignatureAlgorithm.FriendlyName + "
CRLEntries: " + [int]$_.crl.RevokedCertificateCount + "
CRLHash: " + [string](Get-SHA1Hash -inputString ($_.crl.Issuer + $_.authKeyId)) + "
CRLCAVersion: " + [string]$_.caVersion + "
CRLAuthKeyId: " + [string]$_.authKeyId + "
CRLDaysUntilUpdate: " + [double](($_.crl.NextUpdate - (Get-Date)).Days)

				$scomAPI.LogScriptEvent($scriptName, 115, 4, "DEBUG: ADDING CRL..." + $crlOutput)
				}
			++$pbgdCRLs
			#when running outside native SCOM host, use AddItem as in legacy days to have console output
			if ($psHostConsole -eq $true) { $scomAPI.AddItem($objCRLBag) }
			else { $objCRLBag }
			}
		else {
			if ($debugScript)
				{
				$crlOutput = "
CRL
-----------			
CRLIssuedBy: " + [string]$_.crl.Issuer  +  "

CRLThisUpdate: " + [string]$_.crl.ThisUpdate.ToUniversalTime() + "
CRLNextUpdate: " + [string]$_.crl.NextUpdate.ToUniversalTime() + "

CRLVersion: " + [string]$_.crl.Version + "
CRLSigAlg: " + [string]$_.crl.SignatureAlgorithm.FriendlyName + "
CRLEntries: " + [int]$_.crl.RevokedCertificateCount + "
CRLHash: " + [string](Get-SHA1Hash -inputString ($_.crl.Issuer + $_.authKeyId)) + "
CRLCAVersion: " + [string]$_.caVersion + "
CRLAuthKeyId: " + [string]$_.authKeyId + "
CRLDaysUntilUpdate: " + [double](($_.crl.NextUpdate - (Get-Date)).Days)

				$scomAPI.LogScriptEvent($scriptName, 115, 4, "DEBUG: Skipping this CRL because its CAVersion (" + [string]$_.caVersion + ") is lower than the maximum of " + [string]($versionedCRLHigh.get_Item($_.crl.Issuer)) + $crlOutput)
				}
		}
		}
	 $script:crlObjectsReturned = $pbgdCRLs
	}

# enumerating CRLs using P/Invoke on crypt32.dll
function Get-X509CRL2
	{
	Param ([IntPtr]$context)
	
	# This function and the here-string $x509CRL2Namespace are based on a script by
	# Vadims Podāns - vpodans@sysadmins.lv
	# 				http://www.sysadmins.lv/CategoryView,category,PowerShell,6.aspx
	
	#variables
    [IntPtr]$pByte = [IntPtr]::Zero
    [byte]$bByte = 0
	[IntPtr]$rgExtension = [IntPtr]::Zero
    $ptr = [IntPtr]::Zero
   
	#prepare empty
	$crl = New-Object SystemCenterCentral.Utilities.Certificates.X509CRL2
    
	$crlContext = [Runtime.InteropServices.Marshal]::PtrToStructure([IntPtr]$context,[Type][SystemCenterCentral.Utilities.Certificates.CRL_CONTEXT])		 
    $crlInfo = [Runtime.InteropServices.Marshal]::PtrToStructure([IntPtr]$crlContext.pCrlInfo,[Type][SystemCenterCentral.Utilities.Certificates.CRL_INFO])
  	
	#fill
	$crl.Version = $crlInfo.dwVersion + 1
    $crl.Type = "Base CRL"
	#no raw data
    #$crl.RawData = $cBytes
    $crl.SignatureAlgorithm = New-Object Security.Cryptography.Oid $crlInfo.SignatureAlgorithm.pszObjId
    $CRL.ThisUpdate = [datetime]::FromFileTime($CRLInfo.ThisUpdate)
    $CRL.NextUpdate = [datetime]::FromFileTime($CRLInfo.NextUpdate)
    $csz = [SystemCenterCentral.Utilities.Certificates.Helper]::CertNameToStr(65537,[ref]$CRLInfo.Issuer,3,$null,0)
    $psz = New-Object text.StringBuilder $csz
    $csz = [SystemCenterCentral.Utilities.Certificates.Helper]::CertNameToStr(65537,[ref]$CRLInfo.Issuer,3,$psz,$csz)
    $CRL.IssuerDN = New-Object Security.Cryptography.X509Certificates.X500DistinguishedName $psz
    $CRL.Issuer = $CRL.IssuerDN.Format(0)
  
	#knowing just the number of entries is good enough
	$CRL.RevokedCertificateCount = $CRLInfo.cCRLEntry

	$rgExtension = $CRLInfo.rgExtension
     if ($CRLInfo.cExtension -ge 1) {
         $Exts = New-Object Security.Cryptography.X509Certificates.X509ExtensionCollection
         for ($n = 0; $n -lt $CRLInfo.cExtension; $n++) {
             $ExtEntry = [Runtime.InteropServices.Marshal]::PtrToStructure([IntPtr]$rgExtension,[Type][SystemCenterCentral.Utilities.Certificates.CERT_EXTENSION])
             [IntPtr]$rgExtension = [SystemCenterCentral.Utilities.Certificates.Helper]::CertFindExtension($ExtEntry.pszObjId,$CRLInfo.cExtension,$CRLInfo.rgExtension)
             $pByte = $ExtEntry.Value.pbData
             $bBytes = $null
             for ($m = 0; $m -lt $ExtEntry.Value.cbData; $m++) {
                 [byte[]]$bBytes += [Runtime.InteropServices.Marshal]::ReadByte($pByte)
				 ### this does not work on PoSh 2.0
                 #$pByte = [InTPtr]::Add($pByte, 1)                
                 $pByte = [Int64]$pByte + [Runtime.InteropServices.Marshal]::SizeOf([Type][byte])
               	}
           	$ext = New-Object Security.Cryptography.X509Certificates.X509Extension $ExtEntry.pszObjId, @([Byte[]]$bBytes), $ExtEntry.fCritical
            [void]$Exts.Add($ext)
			### this does not work on PoSh 2.0
            #$rgExtension = [IntPtr]::Add($rgExtension, ([Runtime.InteropServices.Marshal]::SizeOf([Type][SystemCenterCentral.Utilities.Certificates.CERT_EXTENSION])))
			$rgExtension = [long]$rgExtension + [Runtime.InteropServices.Marshal]::SizeOf([Type][SystemCenterCentral.Utilities.Certificates.CERT_EXTENSION])
         	}
         if ($exts | ?{$_.Oid.Value -eq "2.5.29.27"}) {$CRL.Type = "Delta CRL"}
         $CRL.Extensions = $Exts
      }
		
	return $crl
	}


function Get-SHA1Hash
	{
	Param ([string]$inputString)
	$sha1CryptoServiceProvider = New-Object System.Security.Cryptography.SHA1CryptoServiceProvider
	return [System.BitConverter]::ToString($sha1CryptoServiceProvider.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($inputString)))
	}
	
#call main function
Main]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>storeName</Name>
                    <Value>$Config/CertStoreID$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeProvider</Name>
                    <Value>$Config/StoreProvider$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeType</Name>
                    <Value>$Config/StoreType$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>revocationFlag</Name>
                    <Value>$Config/RevocationFlag$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>revocationMode</Name>
                    <Value>$Config/RevocationMode$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>verificationFlags</Name>
                    <Value>$Config/VerificationFlags$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>subjectIncludeRegEx</Name>
                    <Value>$Config/SubjectIncludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>issuerIncludeRegEx</Name>
                    <Value>$Config/IssuerIncludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>subjectExcludeRegEx</Name>
                    <Value>$Config/SubjectExcludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>issuerExcludeRegEx</Name>
                    <Value>$Config/IssuerExcludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>enhKeyUseIncludeRegEx</Name>
                    <Value>$Config/EnhKeyUseIncludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>enhKeyUseExcludeRegEx</Name>
                    <Value>$Config/EnhKeyUseExcludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>templateIncludeRegEx</Name>
                    <Value>$Config/TemplateIncludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>templateExcludeRegEx</Name>
                    <Value>$Config/TemplateExcludeRegEx$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>expiryThresholdDays</Name>
                    <Value>$Config/ExpiryThresholdDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>debugParam</Name>
                    <Value>$Config/Debug$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
              <!-- force using PoSh 2.0; not anything higher -->
              <!--    not used as script is PoSh 2,3,4 tested as of V3) -->
              <!--<ProbeAction ID="CommandExecuterProbe" TypeID="System!System.CommandExecuterProbePropertyBagBase">
              <ApplicationName>%windir%\System32\WindowsPowerShell\v1.0\powershell.exe</ApplicationName>
              <WorkingDirectory></WorkingDirectory>-->
              <!-- escape the command line to overcome potential issues with characters e.g. in the pattern matching string (pipe caret etc.) -->
              <!--     using "&{    }" method                                                                                                 -->
              <!--<CommandLine><![CDATA[-Version 2 -NoProfile -Noninteractive "&{ $ep = get-executionpolicy; if ($ep -gt 'RemoteSigned') {set-executionpolicy -Scope Process remotesigned} & '$file/SystemCenterCentral.Utilities.Certificates.Certificate_Verify_Script_V4.ps1$' -storeName '$Config/CertStoreID$' -storeProvider '$Config/StoreProvider$' -storeType '$Config/StoreType$' -revocationFlag '$Config/RevocationFlag$' -revocationMode '$Config/RevocationMode$' -verificationFlags '$Config/VerificationFlags$' -debugParam '$Config/Debug$'}"]]></CommandLine>
                <SecureInput></SecureInput>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <RequireOutput>true</RequireOutput>
              <Files>
                <File>
                  <Name>SystemCenterCentral.Utilities.Certificates.Certificate_Verify_Script_V4.ps1</Name>
                  <Contents>__IncludeFileContent/Scripts/Certificate_Verify_Script_V4.ps1__</Contents>
                  <Unicode>true</Unicode>
                </File>
              </Files>
                <OutputType>System.PropertyBagData</OutputType>
              </ProbeAction>
              -->
            </MemberModules>
            <Composition>
              <Node ID="CertificateBagProbe" />
              <!--  <Node ID="CommandExecuterProbe" /> -->
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
        <!--<InputType>System!System.BaseData</InputType>-->
      </ProbeActionModuleType>
      <WriteActionModuleType ID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA" Accessibility="Internal" RunAs="SystemCenterCentral.Utilities.Certificates.HighPrivilege.SecureReference" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Operation" type="xsd:string" default="LIST" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Verify" type="xsd:boolean" default="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IncludeArchived" type="xsd:boolean" default="false" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="WideOutput" type="xsd:boolean" default="false" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Thumbprint" type="xsd:string" default="." xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TaskId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="RevocationFlag" Selector="$Config/RevocationFlag$" ParameterType="string" />
          <OverrideableParameter ID="RevocationMode" Selector="$Config/RevocationMode$" ParameterType="string" />
          <OverrideableParameter ID="VerificationFlags" Selector="$Config/VerificationFlags$" ParameterType="string" />
          <OverrideableParameter ID="Thumbprint" Selector="$Config/Thumbprint$" ParameterType="string" />
          <OverrideableParameter ID="Verify" Selector="$Config/Verify$" ParameterType="bool" />
          <OverrideableParameter ID="IncludeArchived" Selector="$Config/IncludeArchived$" ParameterType="bool" />
          <OverrideableParameter ID="WideOutput" Selector="$Config/WideOutput$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="CertificateHandlingScript" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>SystemCenterCentral.Utilities.Certificates.Certificate_Handling_Script_V4.ps1</ScriptName>
                <ScriptBody><![CDATA[#
#	List / Delete / Archive / Enable or Disable monitoring of
#					certificates in Windows certificate stores
#	use in SCOM task workflows
#
#		P/Invoke on cert32.dll was required as .NET does not currently
#		feature an object for advanced certificate stores (e.g. WinNT service based).
#
#		System requirements: Powershell >= 2.0 / .NET >= 2.0
#
#		Parameters
#			$computerName		
#			$storename			e.g. My
#			$storeProvider		SystemRegistry | System | File | LDAP
#			$storeType			LocalMachine | CurrentUser | Services | Users
#			$revocationFlag		EntireChain | ExcludeRoot | EndCertificateOnly
#			$revocationMode		Online | Offline | NoCheck
#			$verificationFlags  ...
#			$operation			DELETE|ARCHIVE|LIST|ENABLE|DISABLE|REDISCOVER
#			$verify				false | true (build chain to check if certs are valid
#			$searchArchived		false | true (to list archived certificates)
#			$tumbprint			certificate thumbprint (key property)
#			$scomTask			ID of task calling this script
#
# Version 1.0 - 04. November 2014 - initial            - Raphael Burri - raburri@bluewin.ch
# Version 2.0 - 19. Februar 2014 - added verification - Raphael Burri - raburri@bluewin.ch
#									and verbose chain status output
# Version 2.1 - 22. May 2015	- events with parameters to allow triggering rules
# Version 4.0 - 06. Sep 2018	- update store opening helper

#region parameters
param([string]$computerName = "localhost",
[string]$storeName = "My",
	[string]$storeProvider = "SystemRegistry",
	[string]$storeType = "LocalMachine",
	[string]$revocationFlag = "EntireChain", 
	[string]$revocationMode = "Offline", 
	[string]$verificationFlags = "IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown", 
	[string]$operation = "List",
	#[string]$disableKey = "_disabled",
	[string]$disableKey = "_DoNotMonitor",
	[string]$verify = "true", 
	[string]$searchArchived = "false",
	[string]$wideOutput = "false",
	[string]$thumbprint = "",
	[string]$scomTask = "")
#endregion


#region just examples and placeholders for debug
#storeName: fullpath or just name. E.g.: "My" / c:\SOMEHWRE\store.bin / "WinNTServiceName\MY" etc...
#storeProvider: System (a summary map) / SystemRegistry (really is in registry) / File / LDAP
#storeType: LocalMachine / CurrentUser / Services / Users

#$storeName = "My"
#$debugParam = "true"
#$storeName = "aspnet_state\My"
#$storeProvider = "System"
#$storeProvider = "LDAP"
#endregion

#region variables and constants
# get script name
# SCOM agent calls them dynamically, assigning random names
#$scriptName = $MyInvocation.MyCommand.Name
$scriptName = "Certificate_Handling_Script_V4.ps1"
$userName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

$CERTVALID   =  "IsVerified"


#constants for crypt32.dll methods
[int]$CERT_STORE_PROV_MEMORY = 0x02
[int]$CERT_STORE_PROV_FILE = 0x03
[int]$CERT_STORE_PROV_REG = 0x04
[int]$CERT_STORE_PROV_PKCS7 = 0x05
[int]$CERT_STORE_PROV_SERIALIZED = 0x06
[int]$CERT_STORE_PROV_FILENAME = 0x08
[int]$CERT_STORE_PROV_SYSTEM = 0x0A
[int]$CERT_STORE_PROV_COLLECTION = 0x0B
[int]$CERT_STORE_PROV_SYSTEM_REGISTRY = 0x0D
[int]$CERT_STORE_PROV_SMART_CARD = 0x0F
[int]$CERT_STORE_PROV_LDAP = 0x10


[int]$CERT_STORE_ENUM_ARCHIVED_FLAG = 0x00000200
[int]$CERT_STORE_OPEN_EXISTING_FLAG = 0x00004000
[int]$CERT_STORE_READONLY_FLAG = 0x00008000

[int]$CERT_SYSTEM_STORE_CURRENT_USER =  0x00010000
[int]$CERT_SYSTEM_STORE_LOCAL_MACHINE = 0x00020000
[int]$CERT_SYSTEM_STORE_CURRENT_SERVICE = 0x00040000
[int]$CERT_SYSTEM_STORE_SERVICES = 	 0x00050000
[int]$CERT_SYSTEM_STORE_USERS = 0x00060000
[int]$CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY = 0x00070000
[int]$CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = 0x00080000
[int]$CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE = 0x00090000

#see on input parameters - default to LocalSystem store My (personal computer store), SystemRegistry provider (registry) and LocalSystem storetype
if ($storeName -eq "") { $storeName = "My"}
# system reflect a map (includes Third-Party, Group, Enterprise etc.)
if ($storeProvider -eq "System") { $storeProv = $CERT_STORE_PROV_SYSTEM}
# systemregistry only returns the certificates physically present in the local registry
elseif ($storeProvider -eq "SystemRegistry") { $storeProv = $CERT_STORE_PROV_SYSTEM_REGISTRY}
elseif ($storeProvider -eq "File") { $storeProv = $CERT_STORE_PROV_FILE}
elseif ($storeProvider -eq "LDAP") { $storeProv = $CERT_STORE_PROV_LDAP}
else {$storeProv = $CERT_STORE_PROV_SYSTEM_REGISTRY}
if ($storeType -eq "LocalSystem") { $storeTp = $CERT_SYSTEM_STORE_LOCAL_MACHINE}
elseif ($storeType -eq "CurrentUser") { $storeTp = $CERT_SYSTEM_STORE_CURRENT_USER}
elseif ($storeType -eq "Services") { $storeTp = $CERT_SYSTEM_STORE_SERVICES}
elseif ($storeType -eq "Users") { $storeTp = $CERT_SYSTEM_STORE_USERS}
else { $storeTp = $CERT_SYSTEM_STORE_LOCAL_MACHINE}

#set open_existing and readwrite (default)
$storeTp = $storeTp + $CERT_STORE_OPEN_EXISTING_FLAG
if ($searchArchived -eq "true") { $storeTp = $storeTp + $CERT_STORE_ENUM_ARCHIVED_FLAG }


#PoSh 2.0 was shipped with 2008R2/Win7. In order to have as little dependency on later updates
#     as possible this script only uses 2.0 cmdlets
$minimalPSVersion = "2.0"

#lookup for certificates snap-in friendly names (in english only)
$storeNameTable = @{"AuthRoot" = "Third-Party Root Certification Authorities";
	"CA" = "Intermediate Certification Authorities";
	"Disallowed" = "Untrusted Certificates";
	"My" = "Personal";
	"REQUEST" = "Certificate Enrollment Requests";
	"Root" = "Trusted Root Certification Authorities";
	"SmartCardRoot" = "Smart Card Trusted Roots";
	"Trust" = "Enterprise Trust";
	"TrustedDevices" =  "Trusted Devices";
	"TrustedPeople" = "Trusted People";
	"TrustedPublisher" = "Trusted Publisher";
	"WebHosting" = "Web Hosting"}
	
#initialize hash tables
$certificateObjects = @()
#endregion

#region C# Signature
# C# module imports and types where-type variable
# as not all store access options are implemented in System.Security.Cryptography.X509Certificates
 $x509HelperSignature = @"
 using System;
 using System.Runtime.InteropServices;
 using System.Security;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
  
 namespace SystemCenterCentral
 {
     namespace Utilities
     {
         namespace Certificates
         {
                 public class HelperTasks {
                     [DllImport("crypt32.dll", EntryPoint="CertOpenStore", CharSet=CharSet.Auto, SetLastError=true)]
                     public static extern IntPtr CertOpenStoreStringPara(
                                     int storeProvider,
                                     int encodingType,
                                     IntPtr hcryptProv,
                                     int flags,
                                     String pvPara);
                                    
                     [DllImport("crypt32.dll", EntryPoint="CertCloseStore", CharSet=CharSet.Auto, SetLastError=true)]
                     [return : MarshalAs(UnmanagedType.Bool)]
                     public static extern bool CertCloseStore(
                                     IntPtr storeProvider,
                                     int flags);
                }

         }
     }
 }
"@
#endregion

# Get access to the scripting API
$scomAPI = new-object -comObject "MOM.ScriptAPI"

# check if Powershell >= 2.0 is running
if( ($PSVersionTable.PSCompatibleVersions) -contains $minimalPSVersion)
	{
	#Write-Host Powershell installed: ( $PSVersionTable.PSVersion.ToString() )
	#Write-Host      It is compatible with version $minimalPSVersion required by this script
	}
else
	{
	#Write-Host Powershell installed: $PSVersionTable.PSVersion.ToString() `t`t`t`t`t`t`t`t -BackgroundColor red 
	#Write-Host `tIt is not compatible with version $minimalPSVersion required by this script `t -BackgroundColor red
	exit
	}


#region check if the parameters are valid
$X509ParamEx = ""
$scriptParamValid = $false
if (($operation -imatch "^(ENABLE|DISABLE|DELETE|ARCHIVE|REDISCOVER)$") -and ($thumbprint -imatch ".+")) { $scriptParamValid = $true }
if (($operation -imatch "^LIST$") -and ($verify -imatch "false")) { $scriptParamValid = $true }
#if verification is rewquired, check on flags as well
if (($operation -imatch "^LIST$") -and ($verify -imatch "true")) {
	$scriptParamValid = $true
	try {[System.Security.Cryptography.X509Certificates.X509RevocationFlag]$X509RevocationFlag = $revocationFlag}
	catch {Write-Warning $_
		$scriptParamValid = $false
		$X509ParamEx += [string]$_ + "
"
		# stick to default
		[System.Security.Cryptography.X509Certificates.X509RevocationFlag]$X509RevocationFlag = "EntireChain"
		}
	try {[System.Security.Cryptography.X509Certificates.X509RevocationMode]$X509RevocationMode = $revocationMode}
	catch {Write-Warning $_ 
		$scriptParamValid = $false
		$X509ParamEx += [string]$_ + "
"
		# stick to default
		[System.Security.Cryptography.X509Certificates.X509RevocationMode]$X509RevocationMode = "Online"
		}
	try {[System.Security.Cryptography.X509Certificates.X509VerificationFlags]$X509VerificationFlags = $verificationFlags}
	catch {Write-Warning $_
		$scriptParamValid = $false
		$X509ParamEx += [string]$_ + "
"
		#stick to default
		[System.Security.Cryptography.X509Certificates.X509VerificationFlags]$X509VerificationFlags = "IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown"
		}
	}

if ($scriptParamValid -eq $false)
	{
	"Script starting with default certificate handling parameters (LIST) as the overridden ones were invalid:

Parameters:
-----------
storeName: " + $storeName + "
storeProvider: " + $storeProvider + "
storeType: " + $storeType + " 

Possibly Invalid Parameter:
----------------
RevocationFlag: " + $revocationFlag + "
RevocationMode: " + $revocationMode + "
VerificationFlags: " + $verificationFlags + "
Operation: " + $operation + "
Thumbprint: " + $thumbprint + "

Exception Detail:
----------------
" + $X509ParamEx | Write-Output	
	}
#endregion

function main
	{

    # loading crypt32.dll type to [SystemCenterCentral.Utilities.Certificates.HelperTasks]
	# NOTE: no exception occurs if type was already loaded. Runtime will then just use the previous one
	try
       {Add-Type -TypeDefinition $x509HelperSignature}
	catch 
		{
		#throw "Unable to load [SystemCenterCentral.Utilities.Certificates.HelperTasks] namespace with crypt32.dll methods"
		$scomAPI.LogScriptEvent($scriptName, 129, 2, "Unable to load [SystemCenterCentral.Utilities.Certificates.HelperTasks] namespace with crypt32.dll methods. Retrying on the next script run.")
		#exit
	}
	#ready to rumble
	
	#get certificate store
	$certStorePt = [SystemCenterCentral.Utilities.Certificates.HelperTasks]::CertOpenStoreStringPara($storeProv, 0, 0, $storeTp, $storeName)
	if ($certStorePt -ne 0)
	{
		# first see about certificates
		#take it from store pointer to full .NET as certificates are exposed there and easier to handle.
		#    this works perfectly for File, LDAP or WinNT service stores.
		$certStore = [System.Security.Cryptography.X509Certificates.X509Store]$certStorePt
		$global:certStore = $certStore
		
		# pre-release MP versions used _disable - so make sure that is removed as well
		if ($operation -eq 'ENABLE') { Set-X509CertificateEnabled -certStore $certStore -certTumbprint $thumbprint -disableKey ('(' + $disableKey + '|_disabled)') }
		if ($operation -eq 'DISABLE') { Set-X509CertificateDisabled -certStore $certStore -certTumbprint $thumbprint -disableKey $disableKey }
		if ($operation -eq 'DELETE') { Remove-X509Certificate -certStore $certStore -certTumbprint $thumbprint }
		if ($operation -eq 'ARCHIVE') { SET-X509CertificateArchived -certStore $certStore -certTumbprint $thumbprint }
		if ($operation -eq 'LIST') { GET-X509Certificate -certStore $certStore -certTumbprint $thumbprint -wideOutput $wideOutput -verify $verify }
		if ($operation -eq 'REDISCOVER') { 
			Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 121 -EventSeverity 'Information' -EventDescription ("
Task to ask for re-discovery was run.

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
		
			Write-Output ("Asked for re-discovery of the certificate store by writing local event.")
		}
		
		# close store
		$closeStore = [SystemCenterCentral.Utilities.Certificates.HelperTasks]::CertCloseStore($certStorePt, 0)
		}
	else
		{
		$scomAPI.LogScriptEvent($scriptName, 120, 2, ("Failed to open certificate store.`n`nstoreName: {0}`nstoreProvider: {1}`nstoreType: {2}" -f $storeName,$storeProvider,$storeType)) 
		}
		
	#write summary event
	}

#removes "disable" flag from certificate's friendly name
function Set-X509CertificateEnabled	{
	param([System.Security.Cryptography.X509Certificates.X509Store]$certStore = $null,
		[string]$certTumbprint = '',
		[string]$disableKey = '_(disabled|DoNotMonitor)')
		
	$isEnabled = $true
	$cert = $certStore.Certificates | where {$_.Thumbprint -eq $certTumbprint}
	if ($cert) {
		$certFriendlyName = [string]$cert.get_FriendlyName()
		Write-Output ("Certificate with thumbprint $certTumbprint selected...")
		if ($certFriendlyName -imatch ( '(?<friendlyNameCore>.*)' + $disableKey + '$')) {
			#certificate is currently disabled
			try { $cert.set_FriendlyName([string]($matches.friendlyNameCore)) }
			catch { Write-Output ("Failed to remove '" + $disableKey + "' from certificate friendly name.") }
			}
		Write-Output ("Friendly Name set to: " + [string]$cert.get_FriendlyName())
		Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 122 -EventSeverity 'Information' -EventDescription ("
Friendly name tag of certificate was removed via SCOM task '" + $scomTask + "' by user " + $userName + ". Monitoring will resume following the next discovery cycle.

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
		}
	else { Write-Output ("Certificate with thumbprint $certTumbprint does not exist.") }
}
	
#adds "disable" flag to certificate's friendly name
function Set-X509CertificateDisabled	{
	param([System.Security.Cryptography.X509Certificates.X509Store]$certStore = $null,
		[string]$certTumbprint = '',
		#[string]$disableKey = '_disabled'
		[string]$disableKey = '_DoNotMonitor')
		
	$isEnabled = $true
	$cert = $certStore.Certificates | where {$_.Thumbprint -eq $certTumbprint}
	if ($cert) {
		$certFriendlyName = [string]$cert.get_FriendlyName()
		Write-Output ("Certificate with thumbprint $certTumbprint selected...")
		if ($certFriendlyName -inotmatch ($disableKey + '$')) {
			#certificate is currently enabled
			try { $cert.set_FriendlyName(($certFriendlyName + $disableKey)) }
			catch { Write-Output ("Failed to append '" + $disableKey + "' to certificate friendly name.") }
			}
		Write-Output ("Friendly Name set to: " + [string]$cert.get_FriendlyName())
		Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 123 -EventSeverity 'Information' -EventDescription ("
Friendly name tag of certificate was added via SCOM task '" + $scomTask + "' by user " + $userName + ". Monitoring will stop following the next discovery cycle.

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
		}
	else { Write-Output ("Certificate with thumbprint $certTumbprint does not exist.") }
	}

function Remove-X509Certificate	{
	param([System.Security.Cryptography.X509Certificates.X509Store]$certStore = $null,
		[string]$certTumbprint = '')
		
	$cert = $certStore.Certificates | where {$_.Thumbprint -eq $certTumbprint}
	if ($cert) {
			if ($certStore.Remove($cert) -eq $null) { 
				Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 124 -EventSeverity 'Warning' -EventDescription ("
Certificate was DELETED via SCOM task '" + $scomTask + "' by user " + $userName + ".

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
			
				#SCOM Task Output
				Write-Output ("Certificate with thumbprint $certTumbprint was DELETED succesfully.")
				}
			else { 
				Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 125 -EventSeverity 'Warning' -EventDescription ("
Certificate could not be DELETED via SCOM task '" + $scomTask + "' by user " + $userName + ".

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName

				Write-Output ("Failed to delete certificate with thumbprint $certTumbprint")
			}
		
		}
	else {
		Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 126 -EventSeverity 'Warning' -EventDescription ("
Certificate could not be deleted by " + $userName + ".

No certificate with thumbprint " + $certTumbprint + " was found in the store.

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
	
				#SCOM Task Output
				Write-Output ("Certificate with thumbprint $certTumbprint could not be deleted as it does not exist.")
		}
	
	}
	
function Set-X509CertificateArchived	{
	param([System.Security.Cryptography.X509Certificates.X509Store]$certStore = $null,
		[string]$certTumbprint = '')
		
	$cert = $certStore.Certificates | where {$_.Thumbprint -eq $certTumbprint}
	if ($cert) {
		try{ $cert.set_Archived($true) }
		catch { 
			$certArchivalFailed = $true
			Write-Output ("Setting ARCHIVED flag on certificate with thumbprint $certThumbprint failed") 
			}
		if ($certArchivalFailed -ne $true) { 
			Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 127 -EventSeverity 'Information' -EventDescription ("
Certificate was ARCHIVED via SCOM task '" + $scomTask + "' by user " + $userName + ".

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
		
				#SCOM Task Output
				Write-Output ("Certificate with thumbprint $certTumbprint was ARCHIVED succesfully.")
				}
		}
	else {
		Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 128 -EventSeverity 'Warning' -EventDescription ("
Certificate could not be archived by " + $userName + ".

No certificate with thumbprint " + $certTumbprint + " was found in the store.

Subject: " + $cert.Subject + "
Issuer: " + $cert.Issuer + "
Thumbprint: " + $cert.Thumbprint + "

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
		
				#SCOM Task Output
				Write-Output ("Certificate with thumbprint $certTumbprint could not be archived as it does not exist in the store.")
		}
	
	}
	
function Get-X509Certificate {
	param([System.Security.Cryptography.X509Certificates.X509Store]$certStore = $null,
		[string]$certTumbprint = '',
		[string]$wideOutput = 'false',
		[string]$verify = 'true')
		
		$certValidated = @()
		
		if ($certTumbprint.length -eq 0) { $certTumbprint = '.' }
		Write-Output ("Certificates in " + $storeType + " store " + $storeName + "`n`t(user context " + $userName + "): matching thumbprint '" + $certTumbprint + "'`n")
		
		$certStore.Certificates | where {$_.Thumbprint -imatch $certTumbprint } | % {
			$validated = [string]"n/a"
			$certIsValidated = $true
			$chainIsValidated = $true
			$certVerboseStatusString = $null
			if ($verify -imatch "true") {
				$certValidObj = Validate-X509Certificate2 -X509Certificate2 $_ -X509RevocationFlag $X509RevocationFlag -X509RevocationMode $X509RevocationMode -X509VerificationFlags $X509VerificationFlags
				$validated = $certValidObj[0]
				#build verbose status string for screen output
				$validationStatusMatch = '^(RevocationStatusUnknown:|OfflineRevocation:)'
				if ( $certValidObj[1] -ne $null) {
					#get certificate issue from [2]
					$certVerboseStatusString = [string]($certValidObj[2] | where  {$_ -notmatch $validationStatusMatch} | % {(($_).trim() + "`n")})
					if ($certVerboseStatusString.length -le 0) { $certVerboseStatusString = $CERTVALID + "`n" }
					else {$certIsValidated = $false}
					$certVerboseStatusString = "--- Certificate Status ---`n" + $certVerboseStatusString
					#get chain status from [3]
					if ($certValidObj[3] -ne $null ) {
						$certVerboseStatusString = $certVerboseStatusString + "`n--- Chain Status Overview ---`n"
						$certValidObj[3]| % {
							$certVerboseStatusStringChain = ($_.chainSummary | where  {$_ -notmatch $validationStatusMatch})
							if ($certVerboseStatusStringChain.length -le 0) { $certVerboseStatusStringChain = $CERTVALID + "`n" }
							else {$chainIsValidated = $false}
							$certVerboseStatusString = $certVerboseStatusString + ("Level " + $_.ChainLevel + ": " + $_.ChainSubject + "`n" + $certVerboseStatusStringChain + "`n") 
						}
					}
				}
				if (($certIsValidated -eq $true) -and ($chainIsValidated -eq $true)) {$validated = $true}
			}
			$certValidatedObj = New-Object psobject
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name Subject -Value $_.Subject
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name Issuer -Value $_.Issuer
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name Thumbprint -Value $_.Thumbprint
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name Archived -Value $_.Archived
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name NotAfter -Value $_.NotAfter
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name DaysValid -Value (($_.NotAfter.ToUniversalTime() - (Get-Date).ToUniversalTime()).Days)
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name IsValid -Value $validated
			$certValidatedObj | Add-Member -MemberType NoteProperty -Name ValidationDetail -Value $certVerboseStatusString
			$certValidated += $certValidatedObj
		}
		if ($verify -imatch "true")
			{
			Write-Output ([string]@($certValidated | where {$_.IsValid -eq $true}).Count + " Valid Certificate(s)")
			Write-Output "----------------------"
			if ($wideOutput -eq 'false') {
				#$certValidated | where {$_.IsValid -eq $true} | ft -wrap Subject,Issuer,NotAfter,DaysValid,Thumbprint | Write-Output
				$certValidated | where {$_.IsValid -eq $true} | Format-Table -Wrap `
					@{Name='Subject               '; Expression={$_.Subject}; Width=22},`
					@{Name='Issuer                '; Expression={$_.Issuer}; Width=22},`
					@{Name='NotAfter   '; Expression={$_.NotAfter}; Width=11},`
					@{Name='DaysValid'; Expression={$_.DaysValid}; Width=9},`
					@{Name='Thumbprint '; Expression={$_.Thumbprint}; Width=11} | Out-String 
			}			
			else
				{$certValidated | where {$_.IsValid -eq $true} | ft -AutoSize -wrap Subject,Issuer,NotAfter,DaysValid,Thumbprint | Out-String -width 2048 | Write-Output}
			Write-Output ([string]@($certValidated | where {$_.IsValid -eq $false}).Count + " Invalid Certificate(s)")
			Write-Output "----------------------"
			if ($wideOutput -eq 'false')
				{$certValidated | where {$_.IsValid -eq $false} | % {
					#$_ | ft -wrap Subject,Issuer,NotAfter,DaysValid,Thumbprint | Write-Output
					#$_ | ft -HideTableHeaders -Wrap ValidationDetail | Write-Output
					$_ | Format-Table -Wrap `
						@{Name='Subject               '; Expression={$_.Subject}; Width=22},`
						@{Name='Issuer                '; Expression={$_.Issuer}; Width=22},`
						@{Name='NotAfter   '; Expression={$_.NotAfter}; Width=11},`
						@{Name='DaysValid'; Expression={$_.DaysValid}; Width=9},`
						@{Name='Thumbprint '; Expression={$_.Thumbprint}; Width=11} | Out-String 
					$_ | Format-Table -HideTableHeaders -Wrap `
						@{Name='02'; Expression={'  '}; Width=2},`
						@{Name='ValidationDetail'; Expression={$_.ValidationDetail}; Width=77} | Out-String
					}
				}
			else
				{$certValidated | where {$_.IsValid -eq $false} | % {
					$_ | ft -AutoSize -wrap Subject,Issuer,NotAfter,DaysValid,Thumbprint | Out-String -width 2048 | Write-Output
					$_ | ft -AutoSize -HideTableHeaders -Wrap ValidationDetail | Out-String -width 2048 | Write-Output
					}
				}
			}
		else
			{
			Write-Output ([string]@($certValidated).Count + " Certificate(s)")
			Write-Output "----------------------"
			if ($wideOutput -eq 'false') {
				#$certValidated | ft -wrap Subject,Issuer,NotAfter,DaysValid,Thumbprint | Write-Output
				$certValidated | Format-Table -Wrap `
					@{Name='Subject               '; Expression={$_.Subject}; Width=22},`
					@{Name='Issuer                '; Expression={$_.Issuer}; Width=22},`
					@{Name='NotAfter   '; Expression={$_.NotAfter}; Width=11},`
					@{Name='DaysValid'; Expression={$_.DaysValid}; Width=9},`
					@{Name='Thumbprint '; Expression={$_.Thumbprint}; Width=11} | Out-String 
			}
			else
				{$certValidated | ft -AutoSize -wrap Subject,Issuer,NotAfter,DaysValid,Thumbprint | Out-String -width 2048 | Write-Output}
			}
		
}

function Validate-X509Certificate2
# using pure .NET for certificate validation
	{
	param($X509Certificate2, $X509RevocationFlag, $X509RevocationMode, $X509VerificationFlags)
		
	$X509Chain = New-Object System.Security.Cryptography.X509Certificates.X509Chain

	#	EndCertificateOnly: Only the end certificate is checked for revocation.  
 	#	EntireChain:		The entire chain of certificates is checked for revocation.  
 	#	ExcludeRoot:		The entire chain, except the root certificate, is checked for revocation.  
	$X509Chain.ChainPolicy.RevocationFlag = $X509RevocationFlag
	
	#	NoCheck:	No revocation check is performed on the certificate.  
 	#	Offline:	A revocation check is made using a cached certificate revocation list (CRL).  
 	#	Online: 	A revocation check is made using an online certificate revocation list (CRL).  
	$X509Chain.ChainPolicy.RevocationMode = $X509RevocationMode
	
	#	AllFlags:										All flags pertaining to verification are included.  
 	#	AllowUnknownCertificateAuthority:				Ignore that the chain cannot be verified due to an unknown certificate authority (CA).  
 	#	IgnoreCertificateAuthorityRevocationUnknown:	Ignore that the certificate authority revocation is unknown when determining certificate verification.  
 	#	IgnoreCtlNotTimeValid:							Ignore that the certificate trust list (CTL) is not valid, for reasons such as the CTL has expired, when determining certificate verification.  
 	#	IgnoreCtlSignerRevocationUnknown:				Ignore that the certificate trust list (CTL) signer revocation is unknown when determining certificate verification.  
 	#	IgnoreEndRevocationUnknown:						Ignore that the end certificate (the user certificate) revocation is unknown when determining certificate verification.  
 	#	IgnoreInvalidBasicConstraints:					Ignore that the basic constraints are not valid when determining certificate verification.  
 	#	IgnoreInvalidName:								Ignore that the certificate has an invalid name when determining certificate verification.  
 	#	IgnoreInvalidPolicy:							Ignore that the certificate has invalid policy when determining certificate verification.  
 	#	IgnoreNotTimeNested:							Ignore that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested when verifying the certificate. For example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.  
 	#	IgnoreNotTimeValid:								Ignore certificates in the chain that are not valid either because they have expired or they are not yet in effect when determining certificate validity.  
 	#	IgnoreRootRevocationUnknown:					Ignore that the root revocation is unknown when determining certificate verification.  
 	#	IgnoreWrongUsage:								Ignore that the certificate was not issued for the current use when determining certificate verification.  
 	#	NoFlag:											No flags pertaining to verification are included.  
	$X509Chain.ChainPolicy.VerificationFlags = $X509VerificationFlags
	
	#explicitly forcing verificationtime to NOW
	$X509Chain.ChainPolicy.VerificationTime = (Get-Date).ToUniversalTime()
	
	$statusSummaryChain = @()
	
	#Builds an X.509 chain using the policy specified
	#   true if the X.509 certificate is valid; otherwise, false
	if ($X509Chain.Build($X509Certificate2))
		{
		#Write-Host  -BackgroundColor green $X509Certificate2.Subject is valid
		$valid = $true
		$statusSummary = $null
		$statusSummaryCert = $null
		$statusSummaryChain = $null
		}
	else
		{
		$valid = $false
		#Write-Host  -BackgroundColor Yellow $X509Certificate2.Subject is not valid
		$statusSummary = $X509Chain.ChainStatus | %{
			if ($_.StatusInformation.ToString().Trim() -imatch '^unknown error\.') {($_.Status.ToString().Trim() + ":")}
			else {($_.Status.ToString().Trim() + ": " + $_.StatusInformation.ToString().Trim())}
			}
		if ($X509Chain.ChainElements.Count -gt 1) {
			#build verbose string with the chain level status
			$chainLevel = ($X509Chain.ChainElements.Count - 1)
			$X509Chain.ChainElements | % {
				#certificate's status
				if ($_.Certificate.Thumbprint -eq $X509Certificate2.Thumbprint) {
					if ($_.ChainElementStatus)	{
						$statusSummaryCert = $_.ChainElementStatus | %{
							if ($_.StatusInformation.ToString().Trim() -imatch '^unknown error\.') {($_.Status.ToString().Trim() + ":" + "`n")}
							else {($_.Status.ToString().Trim() + ": " + $_.StatusInformation.ToString().Trim() + "`n")}
							}
						#Write-Host -BackgroundColor yellow CERT: $statusSummaryCert
						}
					else { 
						$statusSummaryCert = $CERTVALID
						#Write-Host -BackgroundColor green CERT: $statusSummaryCert
						}
					}
				#chain element status
				else {
					$statusSummaryChainObj = New-Object psobject
					$statusSummaryChainObj | Add-Member -MemberType NoteProperty -Name chainLevel -Value $chainLevel
					$statusSummaryChainObj | Add-Member -MemberType NoteProperty -Name chainSubject -Value $_.Certificate.Subject
					if ($_.ChainElementStatus)	{
						$statusSummaryChainCert = $_.ChainElementStatus | %{
							if ($_.StatusInformation.ToString().Trim() -imatch '^unknown error\.') {($_.Status.ToString().Trim() + ":" +"`n")}
							else {($_.Status.ToString().Trim() + ": " + $_.StatusInformation.ToString().Trim() + "`n")}
							}
							#Write-Host -BackgroundColor yellow CHAIN: $statusSummaryChain
						}
					else {
						$statusSummaryChainCert = $CERTVALID
						#Write-Host -BackgroundColor green CHAIN: $statusSummaryChain
						}
					$statusSummaryChainObj | Add-Member -MemberType NoteProperty -Name chainSummary -Value $statusSummaryChainCert
				
					$statusSummaryChain += $statusSummaryChainObj
				
					}
				$chainLevel--	
				}
			}
		else {
			$statusSummaryCert = $statusSummary
			$statusSummaryChain = $null
			}
		}
	return $valid, $statusSummary, $statusSummaryCert, $statusSummaryChain
	}

Function Write-EventLogEntry
{
	param ([string]$EventLogName, [string]$EventSourceName, $EventId ,[string]$EventSeverity, [string]$EventDescription, [string]$EventParameter1, [string]$EventParameter2, [string]$EventParameter3) 
	# using .NET objects as they allow event parameters
	$newEvent = new-object System.Diagnostics.Eventinstance($EventId, 0, [system.diagnostics.eventlogentrytype]::[string]$EventSeverity) 
	[system.diagnostics.EventLog]::WriteEvent([string]$EventSourceName, $newEvent, $EventDescription, $EventParameter1, $EventParameter2, $EventParameter3)
}

#call main function
Main]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>computerName</Name>
                    <Value>$Config/ComputerName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeName</Name>
                    <Value>$Config/CertStoreID$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeProvider</Name>
                    <Value>$Config/StoreProvider$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeType</Name>
                    <Value>$Config/StoreType$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>revocationFlag</Name>
                    <Value>$Config/RevocationFlag$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>revocationMode</Name>
                    <Value>$Config/RevocationMode$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>verificationFlags</Name>
                    <Value>$Config/VerificationFlags$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>operation</Name>
                    <Value>$Config/Operation$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>verify</Name>
                    <Value>$Config/Verify$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>searchArchived</Name>
                    <Value>$Config/IncludeArchived$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>wideOutput</Name>
                    <Value>$Config/WideOutput$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>thumbprint</Name>
                    <Value>$Config/Thumbprint$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>scomTask</Name>
                    <Value>$Config/TaskId$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="CertificateHandlingScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="LifeTimeOk" NoDetection="false" />
          <MonitorTypeState ID="ExpiresSoon" NoDetection="false" />
          <MonitorTypeState ID="Expired" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CertThumbprint" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\s+" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SpreadInitializationOverInterval" type="xsd:integer" default="900" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="LifetimeThreshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <!-- potential to break cookdown
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
		      -->
          <OverrideableParameter ID="LifetimeThreshold" Selector="$Config/LifetimeThreshold$" ParameterType="int" />
          <!-- potential to break cookdown
          <OverrideableParameter ID="RevocationFlag" Selector="$Config/RevocationFlag$" ParameterType="string" />
          <OverrideableParameter ID="RevocationMode" Selector="$Config/RevocationMode$" ParameterType="string" />
          <OverrideableParameter ID="VerificationFlags" Selector="$Config/VerificationFlags$" ParameterType="string" />
          -->
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="ScriptDS" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptDataSource">
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <StoreProvider>$Config/StoreProvider$</StoreProvider>
              <StoreType>$Config/StoreType$</StoreType>
              <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
              <RevocationMode>$Config/RevocationMode$</RevocationMode>
              <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
              <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
              <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
              <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
              <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
              <EnhKeyUseIncludeRegEx>$Config/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
              <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
              <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
              <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
              <ExpiryThresholdDays>31</ExpiryThresholdDays>
              <Debug>$Config/Debug$</Debug>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <!--
            <ProbeAction ID="ScriptOnDemandProbe" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptOnDemandProbe">
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <Debug>$Config/Debug$</Debug>
            </ProbeAction>
            -->
            <ConditionDetection ID="NotAboutToExpire" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="Double">Property[@Name='CertDaysStillValid']</XPathQuery>
                          </ValueExpression>
                          <Operator>Greater</Operator>
                          <ValueExpression>
                            <Value Type="Double">$Config/LifetimeThreshold$</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='CertTimeStatus']</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">IsTimeValid</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                    </RegExExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="AboutToExpire" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='CertDaysStillValid']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/LifetimeThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertTimeStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">IsTimeValid</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="HasExpired" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <!-- commented out to deal with NotNested and CTL having invald timestamps
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='CertDaysStillValid']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Double">0</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  -->
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertTimeStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String">IsTimeValid</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CorrectInstance" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertThumbprint']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/CertThumbprint$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CertificateInstance" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='InstanceType']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Certificate</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="LifeTimeOk">
              <Node ID="NotAboutToExpire">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="ExpiresSoon">
              <Node ID="AboutToExpire">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Expired">
              <Node ID="HasExpired">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
          <!-- disabled because it leads to a race condition when HealthService starts - one script run per certificate at a time  
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="LifeTimeOk">
              <Node ID="NotAboutToExpire">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptOnDemandProbe" />
                  </Node>
                </Node>
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="ExpiresSoon">
              <Node ID="AboutToExpire">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptOnDemandProbe" />
                  </Node>
                </Node>
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="Expired">
              <Node ID="HasExpired">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptOnDemandProbe" />
                  </Node>
                </Node>
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
		  -->
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="Good" NoDetection="false" />
          <MonitorTypeState ID="Bad" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CertThumbprint" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\s+" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IgnoreUntrustedRoot" type="xsd:boolean" default="false" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SpreadInitializationOverInterval" type="xsd:integer" default="900" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IgnoreUntrustedRoot" Selector="$Config/IgnoreUntrustedRoot$" ParameterType="bool" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="ScriptDS" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptDataSource">
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <StoreProvider>$Config/StoreProvider$</StoreProvider>
              <StoreType>$Config/StoreType$</StoreType>
              <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
              <RevocationMode>$Config/RevocationMode$</RevocationMode>
              <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
              <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
              <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
              <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
              <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
              <EnhKeyUseIncludeRegEx>$Config/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
              <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
              <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
              <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
              <ExpiryThresholdDays>31</ExpiryThresholdDays>
              <Debug>$Config/Debug$</Debug>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <!--
            <ProbeAction ID="ScriptOnDemandProbe" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptOnDemandProbe">
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <Debug>$Config/Debug$</Debug>
            </ProbeAction>
            -->
            <ConditionDetection ID="CertValid" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="String">IsVerified</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <Value Type="Boolean">$Config/IgnoreUntrustedRoot$</Value>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Boolean">false</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='CertStatusIgnoreUntrustedRoot']</XPathQuery>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="String">IsVerified</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <Value Type="Boolean">$Config/IgnoreUntrustedRoot$</Value>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Boolean">true</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String" />
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CertNotValid" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <Or>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                              </ValueExpression>
                              <Operator>NotEqual</Operator>
                              <ValueExpression>
                                <Value Type="String">IsVerified</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <Value Type="Boolean">$Config/IgnoreUntrustedRoot$</Value>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Boolean">false</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='CertStatusIgnoreUntrustedRoot']</XPathQuery>
                              </ValueExpression>
                              <Operator>NotEqual</Operator>
                              <ValueExpression>
                                <Value Type="String">IsVerified</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <Value Type="Boolean">$Config/IgnoreUntrustedRoot$</Value>
                              </ValueExpression>
                              <Operator>Equal</Operator>
                              <ValueExpression>
                                <Value Type="Boolean">true</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                    </Or>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='CertStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String" />
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CorrectInstance" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertThumbprint']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/CertThumbprint$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CertificateInstance" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='InstanceType']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Certificate</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Good">
              <Node ID="CertValid">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Bad">
              <Node ID="CertNotValid">
                <Node ID="CorrectInstance">
                  <Node ID="CertificateInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="Current" NoDetection="false" />
          <MonitorTypeState ID="UpdateRequired" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CRLThumbprint" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationFlag" type="xsd:string" default="EntireChain" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RevocationMode" type="xsd:string" default="Online" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="VerificationFlags" type="xsd:string" default="IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerIncludeRegEx" type="xsd:string" default="^.*$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SubjectExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="IssuerExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="EnhKeyUseExcludeRegEx" type="xsd:string" default="^$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateIncludeRegEx" type="xsd:string" default="^(|.+)$" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TemplateExcludeRegEx" type="xsd:string" default="\s+" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SpreadInitializationOverInterval" type="xsd:integer" default="900" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NextUpdateThreshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <!-- potential to break cookdown
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
		  
          <OverrideableParameter ID="RevocationFlag" Selector="$Config/RevocationFlag$" ParameterType="string" />
          <OverrideableParameter ID="RevocationMode" Selector="$Config/RevocationMode$" ParameterType="string" />
          <OverrideableParameter ID="VerificationFlags" Selector="$Config/VerificationFlags$" ParameterType="string" />
          -->
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="NextUpdateThreshold" Selector="$Config/NextUpdateThreshold$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="ScriptDS" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptDataSource">
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <StoreProvider>$Config/StoreProvider$</StoreProvider>
              <StoreType>$Config/StoreType$</StoreType>
              <RevocationFlag>$Config/RevocationFlag$</RevocationFlag>
              <RevocationMode>$Config/RevocationMode$</RevocationMode>
              <VerificationFlags>$Config/VerificationFlags$</VerificationFlags>
              <SubjectIncludeRegEx>$Config/SubjectIncludeRegEx$</SubjectIncludeRegEx>
              <IssuerIncludeRegEx>$Config/IssuerIncludeRegEx$</IssuerIncludeRegEx>
              <SubjectExcludeRegEx>$Config/SubjectExcludeRegEx$</SubjectExcludeRegEx>
              <IssuerExcludeRegEx>$Config/IssuerExcludeRegEx$</IssuerExcludeRegEx>
              <EnhKeyUseExcludeRegEx>$Config/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
              <TemplateIncludeRegEx>$Config/TemplateIncludeRegEx$</TemplateIncludeRegEx>
              <TemplateExcludeRegEx>$Config/TemplateExcludeRegEx$</TemplateExcludeRegEx>
              <ExpiryThresholdDays>31</ExpiryThresholdDays>
              <Debug>$Config/Debug$</Debug>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <!--
            <ProbeAction ID="ScriptOnDemandProbe" TypeID="SystemCenterCentral.Utilities.Certificates.ScriptOnDemandProbe">
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <CertStoreID>$Config/CertStoreID$</CertStoreID>
              <Debug>$Config/Debug$</Debug>
            </ProbeAction>
            -->
            <ConditionDetection ID="CRLIsCurrent" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Property[@Name='CRLDaysUntilUpdate']</XPathQuery>
                  </ValueExpression>
                  <Operator>GreaterEqual</Operator>
                  <ValueExpression>
                    <Value Type="Double">$Config/NextUpdateThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CRLNotCurrent" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Property[@Name='CRLDaysUntilUpdate']</XPathQuery>
                  </ValueExpression>
                  <Operator>Less</Operator>
                  <ValueExpression>
                    <Value Type="Double">$Config/NextUpdateThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CorrectInstance" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CRLHash']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/CRLThumbprint$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CRLInstance" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='InstanceType']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">CRL</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Current">
              <Node ID="CRLIsCurrent">
                <Node ID="CorrectInstance">
                  <Node ID="CRLInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="UpdateRequired">
              <Node ID="CRLNotCurrent">
                <Node ID="CorrectInstance">
                  <Node ID="CRLInstance">
                    <Node ID="ScriptDS" />
                  </Node>
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="Healthy" NoDetection="false" />
          <MonitorTypeState ID="Warning" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SpreadInitializationOverInterval" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="RequiredVersion" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="Schedule" TypeID="System!System.Scheduler">
              <Scheduler>
                <SimpleReccuringSchedule>
                  <Interval>$Config/IntervalSeconds$</Interval>
                  <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                </SimpleReccuringSchedule>
                <ExcludeDates />
              </Scheduler>
            </DataSource>
            <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe">
              <ScriptName>SystemCenterCentral.Utililities.Certificates.CheckPowerShellVersion.vbs</ScriptName>
              <Arguments />
              <ScriptBody><![CDATA[' return a PropertyBag with PowerShell compatibility information

SetLocale("en-us")

' create MOM Script API object
Dim oAPI, isInstalled
Set oAPI = CreateObject("MOM.ScriptAPI")
isInstalled = "True"

' create Registry object
Dim oReg, key, value, runtimeVersion, runtimeVersionValue, psCompatibleVersion, psCompatibleVersionValue
' suppress error
On Error Resume Next
Set oReg = CreateObject("WScript.Shell")
key = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Powershell\3\PowerShellEngine\"
runtimeVersionValue = "RunTimeVersion"
psCompatibleVersionValue = "PSCompatibleVersion"
runtimeVersion = oReg.RegRead(key & runtimeVersionValue)
psCompatibleVersion = oReg.RegRead(key & psCompatibleVersionValue)
If Err.Number <> 0 Then
	' registry does not exist. No Powershell V3 seems to be installed - check V1/2
	Err.Clear
	key = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Powershell\1\PowerShellEngine\"
	runtimeVersionValue = "RunTimeVersion"
	psCompatibleVersionValue = "PSCompatibleVersion"
	runtimeVersion = oReg.RegRead(key & runtimeVersionValue)
	psCompatibleVersion = oReg.RegRead(key & psCompatibleVersionValue)
	If Err.Number <> 0 Then
		' registry does not exist. No Powershell V1/2 seems to be installed
		Err.Clear
		isInstalled = "False"
		runtimeVersion = ""
		psCompatibleVersion = ""
		WScript.Echo "No PowerShell is installed."
	End if
End If
' resume error
On Error Goto 0

Dim oPropertyBag
Set oPropertyBag = oAPI.CreatePropertyBag()
Call oPropertyBag.AddValue("PowerShell_Installed", isInstalled)
Call oPropertyBag.AddValue("PowerShell_Runtime", CStr(runtimeVersion))
Call oPropertyBag.AddValue("PowerShell_Compatibility", CStr(psCompatibleVersion))
Call oAPI.Return(oPropertyBag)

		]]></ScriptBody>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <ConditionDetection ID="CDHealthy" TypeID="System!System.ExpressionFilter">
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='PowerShell_Compatibility']</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>$Config/RequiredVersion$</Pattern>
                </RegExExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDWarning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='PowerShell_Compatibility']</XPathQuery>
                  </ValueExpression>
                  <Operator>DoesNotContainSubstring</Operator>
                  <Pattern>$Config/RequiredVersion$</Pattern>
                </RegExExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Healthy">
              <Node ID="CDHealthy">
                <Node ID="Script">
                  <Node ID="Schedule" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Warning">
              <Node ID="CDWarning">
                <Node ID="Script">
                  <Node ID="Schedule" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Categories>
    <Category ID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.Components.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.Components.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.Components.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.Components.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.Certificate.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.Certificate.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.Certificate.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.Certificate.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CertStore.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.CertStore.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CertStore.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.CertStore.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CRL.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.CRL.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CRL.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.CRL.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image16.Category" Target="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image16" Value="System!System.Internal.ManagementPack.Images.u16x16Icon" />
    <Category ID="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image80.Category" Target="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image80" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
  </Categories>
  <Monitoring>
    <Discoveries>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.CAGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CAGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CAGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$</Property>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value />
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertCRLGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertCRLGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CAGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLNeedsUpdate$</Property>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value>False</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <And>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertTimeStatus$</Property>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>^IsTimeValid</Pattern>
                    </RegExExpression>
                  </Expression>
                  <!-- exclude certificates required by Windows -->
                  <Expression>
                    <NotContained maxDepth="1">
                      <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup"]$</MonitoringClass>
                    </NotContained>
                  </Expression>
                </And>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <And>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Property>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>^IsVerified</Pattern>
                    </RegExExpression>
                  </Expression>
                  <!-- do not include superseded CA certificates -->
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Property>
                      </ValueExpression>
                      <Operator>DoesNotMatchRegularExpression</Operator>
                      <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                    </RegExExpression>
                  </Expression>
                  <!-- exclude certificates required by Windows -->
                  <Expression>
                    <NotContained maxDepth="1">
                      <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup"]$</MonitoringClass>
                    </NotContained>
                  </Expression>
                </And>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$</Property>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)_(disabled|DoNotMonitor)$</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLNeedsUpdate$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>True</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <!-- exclude CRLs required by Windows -->
                  <Expression>
                    <NotContained maxDepth="1">
                      <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup"]$</MonitoringClass>
                    </NotContained>
                  </Expression>
                </And>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <Or>
                  <Expression>
                    <And>
                      <Expression>
                        <!-- Must be in the Root CA store -->
                        <SimpleExpression>
                          <ValueExpression>
                            <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStore$</Property>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value>Trusted Root Certification Authorities</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <Or>
                          <!-- Windows 8.1 / 2012 R2 Certificates -->
                          <Expression>
                            <!-- Microsoft Root Certificate Authority 2010 -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Certificate Authority 2010</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Certificate Authority 2010</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>28cc3a25bfba44ac449a9b586b4339aa</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Microsoft Root Certificate Authority 2011 -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Certificate Authority 2011</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Certificate Authority 2011</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>3f8bc8b5fc9fb29643b569d66c42e144</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Thawte Timestamping CA -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Thawte Timestamping CA</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Thawte Timestamping CA</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>00</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <!-- Windows Vista /  and Server 2008 / 2008 R2 Certificates -->
                          <Expression>
                            <!-- Microsoft Root Certificate -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>c1008b3c3c8811d13ef663ecdf40</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Microsoft Root Certificate Authority -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Certificate Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Certificate Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>79ad16a14aa0a5ad4c7358f407132e65</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <!-- Windows 2003 and XP Certificates -->
                          <Expression>
                            <!-- Copyright (c) 1997 Microsoft Corp. -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Copyright \(c\) 1997 Microsoft Corp\.</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Copyright \(c\) 1997 Microsoft Corp\.</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>01</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Microsoft Authenticode(tm) Root Authority -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Authenticode\(tm\) Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Authenticode\(tm\) Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>01</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Microsoft Root Authority -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Microsoft Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>00c1008b3c3c8811d13ef663ecdf40</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- NO LIABILITY ACCEPTED, (c)97 VeriSign, Inc. -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>NO LIABILITY ACCEPTED, \(c\)97 VeriSign, Inc\.</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>NO LIABILITY ACCEPTED, \(c\)97 VeriSign, Inc\.</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>4a19d2388c82591ca55d735f155ddca3</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <!-- Windows 2000 (all are already included above)-->
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <!-- Must be in the Third-Party Root Certification Authorities store -->
                        <SimpleExpression>
                          <ValueExpression>
                            <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStore$</Property>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value>Third-Party Root Certification Authorities</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <Or>
                          <!-- Windows Vista and Server 2008 Certificates -->
                          <Expression>
                            <!-- Thawte Timestamping CA -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Thawte Timestamping CA</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>Thawte Timestamping CA</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>00</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <!-- Windows 2003 and XP Certificates -->
                          <Expression>
                            <!-- VeriSign Commercial Software Publishers CA -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>VeriSign Commercial Software Publishers CA</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>VeriSign Commercial Software Publishers CA</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>03c78f37db9228df3cbb1aad82fa6710</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <!-- Windows 2000 (all are already included above)-->
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <And>
                      <Expression>
                        <!-- must be in the Intermediate Certification Authorities store -->
                        <SimpleExpression>
                          <ValueExpression>
                            <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStore$</Property>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value>Intermediate Certification Authorities</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <Or>
                          <!-- Windows 7 and Server 2008 R2 Certificates -->
                          <Expression>
                            <!-- Root Agency -->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>CN=Root Agency</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value>CN=Root Agency</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Microsoft Windows Hardware Compatibility -->
                            <!-- CN=Microsoft Windows Hardware Compatibility -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>CN=Microsoft Windows Hardware Compatibility</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>CN=Microsoft Root Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- Verisign / CPS Incorp -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>OU=www.verisign.com/CPS Incorp\.by Ref\. LIABILITY LTD\.\(c\)97 VeriSign</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>OU=Class 3 Public Primary Certification Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!-- VeriSign Class 1 CA Individual Subscriber-Persona Not Validated -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>CN=VeriSign Class 1 CA Individual Subscriber-Persona Not Validated</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>OU=Class 1 Public Primary Certification Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <!-- Windows 2003 / XP -->
                          <Expression>
                            <!-- VeriSign Class 2 CA Individual Subscriber -->
                            <And>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>CN=VeriSign Class 2 CA - Individual Subscriber</Pattern>
                                </RegExExpression>
                              </Expression>
                              <Expression>
                                <RegExExpression>
                                  <ValueExpression>
                                    <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Property>
                                  </ValueExpression>
                                  <Operator>MatchesRegularExpression</Operator>
                                  <Pattern>OU=Class 2 Public Primary Certification Authority</Pattern>
                                </RegExExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
            </MembershipRule>
            <!-- CRLs go here -->
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <And>
                  <Expression>
                    <!-- must be in the Intermediate Certification Authorities store -->
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CertStore$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>Intermediate Certification Authorities</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLIssuer$</Property>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>OU=VeriSign Commercial Software Publishers CA, O="VeriSign, Inc\.", L=Internet</Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>CA</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>Trust</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>Root</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertTimeStatus$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>IsTimeValid</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertExpiresWithin31Days$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>True</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <!-- exclude certificates required by Windows -->
                  <Expression>
                    <NotContained maxDepth="1">
                      <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup"]$</MonitoringClass>
                    </NotContained>
                  </Expression>
                </And>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="Microsoft.SystemCenter.GroupPolulator" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="InstanceGroupLibrary!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <And>
                  <Expression>
                    <Or>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Property>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^IsVerified</Pattern>
                        </RegExExpression>
                      </Expression>
                      <!-- also include superseded CA certificates -->
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Property>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>^This CA certificate has been superseded by a more current one</Pattern>
                        </RegExExpression>
                      </Expression>
                    </Or>
                  </Expression>
                  <!-- certificates that will expire soon are in seperate view -->
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertExpiresWithin31Days$</Property>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value>False</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <Property>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertTimeStatus$</Property>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>^IsTimeValid</Pattern>
                    </RegExExpression>
                  </Expression>
                </And>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.NonRootCertificate.Discovery" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.NonRootCertificate">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertIssuedTo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertIssuedBy" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertValidFrom" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertValidTo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertSignatureAlgo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertPublicKey" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertPrivateKey" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertFriendlyName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertSerial" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertStatus" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertTimeStatus" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertStore" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertThumbprint" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertExpiresWithin31Days" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CAVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="TemplateName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="EnhancedKeyUsageList" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="SubjectAlternativeNameList" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.Certificate" />
        </DiscoveryTypes>
        <DataSource ID="DataSource" TypeID="SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource">
          <CertStoreID>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <!--  take values from TARGET to guarantee coockdown -->
          <RevocationFlag>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties) -->
          <SubjectIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <ExpiryThresholdDays>31</ExpiryThresholdDays>
          <DiscoverSupersededCACertificates>false</DiscoverSupersededCACertificates>
          <Debug>false</Debug>
          <IntervalSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildDiscoveryInterval$</IntervalSeconds>
          <SyncTime>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <ClassId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.NonRootCertificate"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Name>
                <Value>$Data/Property[@Name='CertSerial']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Name>
                <Value>$Data/Property[@Name='CertThumbprint']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$</Name>
                <Value>$Data/Property[@Name='CertVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$</Name>
                <Value>$Data/Property[@Name='CertSignatureAlgo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Name>
                <Value>$Data/Property[@Name='CertIssuedBy']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$</Name>
                <Value>$Data/Property[@Name='CertValidFrom']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$</Name>
                <Value>$Data/Property[@Name='CertValidTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Name>
                <Value>$Data/Property[@Name='CertIssuedTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$</Name>
                <Value>$Data/Property[@Name='CertPublicKey']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$</Name>
                <Value>$Data/Property[@Name='CertFriendlyName']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$</Name>
                <Value>$Data/Property[@Name='CertPrivateKey']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Name>
                <Value>$Data/Property[@Name='CertStatus']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertTimeStatus$</Name>
                <Value>$Data/Property[@Name='CertTimeStatus']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertExpiresWithin31Days$</Name>
                <Value>$Data/Property[@Name='CertExpiresSoon']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$</Name>
                <Value>$Data/Property[@Name='CAVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStore$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$</Name>
                <Value>$Data/Property[@Name='TemplateName']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>Cert $Data/Property[@Name='CertIssuedTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/EnhancedKeyUsageList$</Name>
                <Value>$Data/Property[@Name='EnhancedKeyUsageList']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/SubjectAlternativeNameList$</Name>
                <Value>$Data/Property[@Name='CertSAN']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertThumbprint']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String" />
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertIsCertificateAuthority']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">False</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertIsSelfSigned']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">False</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.RootCertificate.Discovery" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.RootCertificate">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertIssuedTo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertIssuedBy" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertValidFrom" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertValidTo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertSignatureAlgo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertPublicKey" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertPrivateKey" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertFriendlyName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertSerial" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertStatus" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertTimeStatus" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertStore" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertThumbprint" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertExpiresWithin31Days" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CAVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="TemplateName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="EnhancedKeyUsageList" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="SubjectAlternativeNameList" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.Certificate" />
        </DiscoveryTypes>
        <DataSource ID="DataSource" TypeID="SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource">
          <CertStoreID>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <!--  take values from TARGET to guarantee coockdown -->
          <RevocationFlag>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties) -->
          <SubjectIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <ExpiryThresholdDays>31</ExpiryThresholdDays>
          <DiscoverSupersededCACertificates>false</DiscoverSupersededCACertificates>
          <Debug>false</Debug>
          <IntervalSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildDiscoveryInterval$</IntervalSeconds>
          <SyncTime>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <ClassId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.RootCertificate"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Name>
                <Value>$Data/Property[@Name='CertSerial']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Name>
                <Value>$Data/Property[@Name='CertThumbprint']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$</Name>
                <Value>$Data/Property[@Name='CertVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$</Name>
                <Value>$Data/Property[@Name='CertSignatureAlgo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Name>
                <Value>$Data/Property[@Name='CertIssuedBy']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$</Name>
                <Value>$Data/Property[@Name='CertValidFrom']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$</Name>
                <Value>$Data/Property[@Name='CertValidTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Name>
                <Value>$Data/Property[@Name='CertIssuedTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$</Name>
                <Value>$Data/Property[@Name='CertPublicKey']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$</Name>
                <Value>$Data/Property[@Name='CertFriendlyName']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$</Name>
                <Value>$Data/Property[@Name='CertPrivateKey']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Name>
                <Value>$Data/Property[@Name='CertStatus']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertTimeStatus$</Name>
                <Value>$Data/Property[@Name='CertTimeStatus']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertExpiresWithin31Days$</Name>
                <Value>$Data/Property[@Name='CertExpiresSoon']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$</Name>
                <Value>$Data/Property[@Name='CAVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStore$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$</Name>
                <Value>$Data/Property[@Name='TemplateName']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/SubjectAlternativeNameList$</Name>
                <Value>$Data/Property[@Name='CertSAN']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>CA Cert $Data/Property[@Name='CertIssuedTo']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertThumbprint']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String" />
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertIsCertificateAuthority']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.SelfSignedCertificate.Discovery" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertIssuedTo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertIssuedBy" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertValidFrom" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertValidTo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertSignatureAlgo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertPublicKey" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertPrivateKey" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertFriendlyName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertSerial" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertStatus" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertTimeStatus" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertStore" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertThumbprint" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CertExpiresWithin31Days" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="CAVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="TemplateName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="EnhancedKeyUsageList" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.Certificate" PropertyID="SubjectAlternativeNameList" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.Certificate" />
        </DiscoveryTypes>
        <DataSource ID="DataSource" TypeID="SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource">
          <CertStoreID>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <!--  take values from TARGET to guarantee coockdown -->
          <RevocationFlag>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties) -->
          <SubjectIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <ExpiryThresholdDays>31</ExpiryThresholdDays>
          <DiscoverSupersededCACertificates>false</DiscoverSupersededCACertificates>
          <!-- self-signed: ignore 'UntrustedRoot' state (e.g. in My store instead of Root) -->
          <Debug>false</Debug>
          <IntervalSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildDiscoveryInterval$</IntervalSeconds>
          <SyncTime>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <ClassId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</Name>
                <Value>$Data/Property[@Name='CertSerial']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Name>
                <Value>$Data/Property[@Name='CertThumbprint']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$</Name>
                <Value>$Data/Property[@Name='CertVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$</Name>
                <Value>$Data/Property[@Name='CertSignatureAlgo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</Name>
                <Value>$Data/Property[@Name='CertIssuedBy']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$</Name>
                <Value>$Data/Property[@Name='CertValidFrom']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$</Name>
                <Value>$Data/Property[@Name='CertValidTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</Name>
                <Value>$Data/Property[@Name='CertIssuedTo']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$</Name>
                <Value>$Data/Property[@Name='CertPublicKey']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$</Name>
                <Value>$Data/Property[@Name='CertFriendlyName']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$</Name>
                <Value>$Data/Property[@Name='CertPrivateKey']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$</Name>
                <!-- use CertStatusIgnoreUntrustedRoot -->
                <Value>$Data/Property[@Name='CertStatusIgnoreUntrustedRoot']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertTimeStatus$</Name>
                <Value>$Data/Property[@Name='CertTimeStatus']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertExpiresWithin31Days$</Name>
                <Value>$Data/Property[@Name='CertExpiresSoon']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$</Name>
                <Value>$Data/Property[@Name='CAVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStore$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$</Name>
                <Value>$Data/Property[@Name='TemplateName']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/EnhancedKeyUsageList$</Name>
                <Value>$Data/Property[@Name='EnhancedKeyUsageList']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/SubjectAlternativeNameList$</Name>
                <Value>$Data/Property[@Name='CertSAN']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>SelfSigned Cert $Data/Property[@Name='CertIssuedTo']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertThumbprint']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String" />
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertIsCertificateAuthority']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">False</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='CertIsSelfSigned']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">True</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.CRL.Discovery" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.CRL">
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLVersion" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLSignatureAlgo" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLIssuer" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLThisUpdate" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLNextUpdate" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLEntries" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLThumbprint" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CertStore" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CRL" PropertyID="CRLNeedsUpdate" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.CRL" />
        </DiscoveryTypes>
        <DataSource ID="DataSource" TypeID="SystemCenterCentral.Utilities.Certificates.CRL.LocalScriptDiscovery.DataSource">
          <CertStoreID>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <!--  take values from TARGET to guarantee coockdown -->
          <RevocationFlag>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties) -->
          <SubjectIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <ExpiryThresholdDays>31</ExpiryThresholdDays>
          <Debug>false</Debug>
          <IntervalSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildDiscoveryInterval$</IntervalSeconds>
          <SyncTime>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <ClassId>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLThumbprint$</Name>
                <Value>$Data/Property[@Name='CRLHash']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLVersion$</Name>
                <Value>$Data/Property[@Name='CRLVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLSignatureAlgo$</Name>
                <Value>$Data/Property[@Name='CRLSigAlg']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLIssuer$</Name>
                <Value>$Data/Property[@Name='CRLIssuedBy']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLThisUpdate$</Name>
                <Value>$Data/Property[@Name='CRLThisUpdate']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLNextUpdate$</Name>
                <Value>$Data/Property[@Name='CRLNextUpdate']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLEntries$</Name>
                <Value>$Data/Property[@Name='CRLEntries']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLNeedsUpdate$</Name>
                <Value>$Data/Property[@Name='CRLNeedsUpdate']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLCAVersion$</Name>
                <Value>$Data/Property[@Name='CRLCAVersion']$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CertStore$</Name>
                <Value>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>CRL $Data/Property[@Name='CRLIssuedBy']$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='CRLHash']</XPathQuery>
              </ValueExpression>
              <Operator>NotEqual</Operator>
              <ValueExpression>
                <Value Type="String" />
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.WebHosting.Discovery" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreID" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreProvider" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreType" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="Sync" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildScriptTimeout" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildMonitorInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildDiscoveryInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationFlag" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationMode" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="VerificationFlags" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateExcludeRegEx" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <Frequency>3600</Frequency>
          <!-- properties of the store -->
          <CertStoreID>WebHosting</CertStoreID>
          <StoreProvider>SystemRegistry</StoreProvider>
          <StoreType>LocalMachine</StoreType>
          <ComputerPrincipalName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerPrincipalName>
          <CertStoreName>Web Hosting</CertStoreName>
          <ChildMonitorSync> - </ChildMonitorSync>
          <!-- defaults to every 4 hours -->
          <ChildMonitorInterval>14110</ChildMonitorInterval>
          <!-- defaults to every 12 hours -->
          <ChildDiscoveryInterval>42330</ChildDiscoveryInterval>
          <!-- defaults to 5 minutes -->
          <ChildScriptTimeout>300</ChildScriptTimeout>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Online</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <SubjectIncludeRegEx>^.*$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>^.*$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>^$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>^$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>^(|.+)$</EnhKeyUseIncludeRegEx>
          <!-- exclude network access protection certificates -->
          <EnhKeyUseExcludeRegEx>^1\.3\.6\.1\.4\.1\.311\.47\.1\.(1|3)$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>^(|.+)$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>\n</TemplateExcludeRegEx>
          <DisplayName>Web Hosting Certificate Store</DisplayName>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.CA.Discovery" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreID" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreProvider" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreType" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="Sync" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildScriptTimeout" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildMonitorInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildDiscoveryInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationFlag" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationMode" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="VerificationFlags" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateExcludeRegEx" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <Frequency>3600</Frequency>
          <!-- properties of the store -->
          <CertStoreID>CA</CertStoreID>
          <StoreProvider>SystemRegistry</StoreProvider>
          <StoreType>LocalMachine</StoreType>
          <ComputerPrincipalName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerPrincipalName>
          <CertStoreName>Intermediate Certification Authorities</CertStoreName>
          <ChildMonitorSync> - </ChildMonitorSync>
          <!-- defaults to every 4 hours -->
          <ChildMonitorInterval>14110</ChildMonitorInterval>
          <!-- defaults to every 12 hours -->
          <ChildDiscoveryInterval>42330</ChildDiscoveryInterval>
          <!-- defaults to 5 minutes -->
          <ChildScriptTimeout>300</ChildScriptTimeout>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Online</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <SubjectIncludeRegEx>^.*$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>^.*$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>^$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>^$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>^(|.+)$</EnhKeyUseIncludeRegEx>
          <!-- exclude network access protection certificates -->
          <EnhKeyUseExcludeRegEx>^1\.3\.6\.1\.4\.1\.311\.47\.1\.(1|3)$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>^(|.+)$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>\n</TemplateExcludeRegEx>
          <DisplayName>Intermediate Certification Authorities Computer Certificate Store</DisplayName>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.My.Discovery" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreID" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreProvider" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreType" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="Sync" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildScriptTimeout" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildMonitorInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildDiscoveryInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationFlag" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationMode" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="VerificationFlags" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateExcludeRegEx" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <Frequency>3600</Frequency>
          <!-- properties of the store -->
          <CertStoreID>My</CertStoreID>
          <StoreProvider>SystemRegistry</StoreProvider>
          <StoreType>LocalMachine</StoreType>
          <ComputerPrincipalName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerPrincipalName>
          <CertStoreName>Personal</CertStoreName>
          <ChildMonitorSync> - </ChildMonitorSync>
          <!-- defaults to every 4 hours -->
          <ChildMonitorInterval>14110</ChildMonitorInterval>
          <!-- defaults to every 12 hours -->
          <ChildDiscoveryInterval>42330</ChildDiscoveryInterval>
          <!-- defaults to 5 minutes -->
          <ChildScriptTimeout>300</ChildScriptTimeout>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Online</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <SubjectIncludeRegEx>^.*$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>^.*$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>^$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>^$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>^(|.+)$</EnhKeyUseIncludeRegEx>
          <!-- exclude network access protection certificates -->
          <EnhKeyUseExcludeRegEx>^1\.3\.6\.1\.4\.1\.311\.47\.1\.(1|3)$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>^(|.+)$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>\n</TemplateExcludeRegEx>
          <DisplayName>Personal Computer Certificate Store</DisplayName>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.Root.Discovery" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreID" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreProvider" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreType" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="Sync" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildScriptTimeout" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildMonitorInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildDiscoveryInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationFlag" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationMode" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="VerificationFlags" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateExcludeRegEx" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <Frequency>3600</Frequency>
          <!-- properties of the store -->
          <CertStoreID>Root</CertStoreID>
          <StoreProvider>SystemRegistry</StoreProvider>
          <StoreType>LocalMachine</StoreType>
          <ComputerPrincipalName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerPrincipalName>
          <CertStoreName>Trusted Root Certification Authorities</CertStoreName>
          <ChildMonitorSync> - </ChildMonitorSync>
          <!-- defaults to every 4 hours -->
          <ChildMonitorInterval>14110</ChildMonitorInterval>
          <!-- defaults to every 12 hours -->
          <ChildDiscoveryInterval>42330</ChildDiscoveryInterval>
          <!-- defaults to 5 minutes -->
          <ChildScriptTimeout>300</ChildScriptTimeout>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Online</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <SubjectIncludeRegEx>^.*$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>^.*$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>^$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>^$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>^(|.+)$</EnhKeyUseIncludeRegEx>
          <!-- exclude network access protection certificates -->
          <EnhKeyUseExcludeRegEx>^1\.3\.6\.1\.4\.1\.311\.47\.1\.(1|3)$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>^(|.+)$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>\n</TemplateExcludeRegEx>
          <DisplayName>Trusted Root Certification Authorities Computer Certificate Store</DisplayName>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.Trust.Discovery" Enabled="false" Target="SC!Microsoft.SystemCenter.HealthService" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreID" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreProvider" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="StoreType" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="Sync" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildScriptTimeout" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildMonitorInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildDiscoveryInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationFlag" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationMode" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="VerificationFlags" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateExcludeRegEx" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider">
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <Frequency>3600</Frequency>
          <!-- properties of the store -->
          <CertStoreID>Trust</CertStoreID>
          <StoreProvider>SystemRegistry</StoreProvider>
          <StoreType>LocalMachine</StoreType>
          <ComputerPrincipalName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerPrincipalName>
          <CertStoreName>Enterprise Trust</CertStoreName>
          <ChildMonitorSync> - </ChildMonitorSync>
          <!-- defaults to every 4 hours -->
          <ChildMonitorInterval>14110</ChildMonitorInterval>
          <!-- defaults to every 12 hours -->
          <ChildDiscoveryInterval>42330</ChildDiscoveryInterval>
          <!-- defaults to 5 minutes -->
          <ChildScriptTimeout>300</ChildScriptTimeout>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Online</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <SubjectIncludeRegEx>^.*$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>^.*$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>^$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>^$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>^(|.+)$</EnhKeyUseIncludeRegEx>
          <!-- exclude network access protection certificates -->
          <EnhKeyUseExcludeRegEx>^1\.3\.6\.1\.4\.1\.311\.47\.1\.(1|3)$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>^(|.+)$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>\n</TemplateExcludeRegEx>
          <DisplayName>Enterprise Trust Computer Certificate Store</DisplayName>
        </DataSource>
      </Discovery>
      <Discovery ID="SystemCenterCentral.Utilities.Certificates.LocalServiceCertificateStore.Script.Discovery" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="false" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="CertStoreID" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="Sync" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildScriptTimeout" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildMonitorInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="ChildDiscoveryInterval" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationFlag" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="RevocationMode" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="VerificationFlags" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="SubjectExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="IssuerExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="EnhKeyUseExcludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateIncludeRegEx" />
            <Property TypeID="SystemCenterCentral.Utilities.Certificates.CertificateStore" PropertyID="TemplateExcludeRegEx" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider">
          <Frequency>86700</Frequency>
          <Debug>false</Debug>
          <ChildMonitorInterval>14110</ChildMonitorInterval>
          <ChildDiscoveryInterval>42330</ChildDiscoveryInterval>
          <ChildScriptTimeout>300</ChildScriptTimeout>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Online</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <SubjectIncludeRegEx>^.*$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>^.*$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>^$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>^$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>^(|.+)$</EnhKeyUseIncludeRegEx>
          <!-- exclude network access protection certificates -->
          <EnhKeyUseExcludeRegEx>^1\.3\.6\.1\.4\.1\.311\.47\.1\.(1|3)$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>^(|.+)$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>\n</TemplateExcludeRegEx>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Tasks>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.NonRootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ARCHIVE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ArchiveRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.RootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ARCHIVE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveRootCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ArchiveSelfSignedCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ARCHIVE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveSelfSignedCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.DisableNonRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.NonRootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>DISABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.DisableRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.RootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>DISABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveRootCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.DisableSelfSignedCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>DISABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveSelfSignedCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.EnableNonRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.NonRootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ENABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.EnableRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.RootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ENABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveRootCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.EnableSelfSignedCertificate.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ENABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveSelfSignedCertificate.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ListStoreCertificateProperties.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Offline</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <Operation>LIST</Operation>
          <Verify>true</Verify>
          <IncludeArchived>false</IncludeArchived>
          <WideOutput>false</WideOutput>
          <Thumbprint>.</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ListStoreCertificateProperties.Task</TaskId>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ListCertificateProperties.Task" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <RevocationFlag>EntireChain</RevocationFlag>
          <RevocationMode>Offline</RevocationMode>
          <VerificationFlags>IgnoreCertificateAuthorityRevocationUnknown,IgnoreEndRevocationUnknown</VerificationFlags>
          <Operation>LIST</Operation>
          <Verify>true</Verify>
          <IncludeArchived>false</IncludeArchived>
          <WideOutput>false</WideOutput>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ListCertificateProperties.Task</TaskId>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Low</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <!-- add default to overcome potential replacement issues -->
            <AlertParameter1>$Data[Default='_no_CertLifeTimeMessage']/Context/Property[@Name='CertLifeTimeMessage']$</AlertParameter1>
            <AlertParameter2>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</AlertParameter2>
            <AlertParameter3>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</AlertParameter3>
            <AlertParameter4>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</AlertParameter4>
            <AlertParameter5>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$</AlertParameter5>
            <AlertParameter6>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/EnhancedKeyUsageList$</AlertParameter6>
            <AlertParameter7>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</AlertParameter7>
            <AlertParameter8>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$\$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</AlertParameter8>
            <AlertParameter9>$Data[Default='']/Context/Property[@Name='UserContext']$</AlertParameter9>
            <AlertParameter10>$Data[Default='']/Context/Property[@Name='CertVerboseTimeStatus']$</AlertParameter10>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="CertLifeTimeOk" MonitorTypeStateID="LifeTimeOk" HealthState="Success" />
          <OperationalState ID="CertExpiresSoon" MonitorTypeStateID="ExpiresSoon" HealthState="Warning" />
          <OperationalState ID="CertExpired" MonitorTypeStateID="Expired" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <CertThumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</CertThumbprint>
          <!--  take values from HOST to guarantee coockdown -->
          <RevocationFlag>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties - assure to keep cookdown) -->
          <SubjectIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <IntervalSeconds>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildMonitorInterval$</IntervalSeconds>
          <SyncTime>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <LifetimeThreshold>21</LifetimeThreshold>
          <Debug>false</Debug>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Low</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <!-- add default to overcome potential replacement issues -->
            <AlertParameter1>$Data[Default='_no_CertStatus']/Context/Property[@Name='CertStatus']$</AlertParameter1>
            <AlertParameter2>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$</AlertParameter2>
            <AlertParameter3>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$</AlertParameter3>
            <AlertParameter4>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSerial$</AlertParameter4>
            <AlertParameter5>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$</AlertParameter5>
            <AlertParameter6>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/EnhancedKeyUsageList$</AlertParameter6>
            <AlertParameter7>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</AlertParameter7>
            <AlertParameter8>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$\$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</AlertParameter8>
            <AlertParameter9>$Data[Default='']/Context/Property[@Name='UserContext']$</AlertParameter9>
            <AlertParameter10>$Data[Default='']/Context/Property[@Name='CertVerboseStatus']$</AlertParameter10>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="CertValid" MonitorTypeStateID="Good" HealthState="Success" />
          <OperationalState ID="CertInvalid" MonitorTypeStateID="Bad" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <CertThumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</CertThumbprint>
          <!--  take values from HOST to guarantee coockdown -->
          <RevocationFlag>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties - assure to keep cookdown) -->
          <SubjectIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseIncludeRegEx$</EnhKeyUseIncludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <IgnoreUntrustedRoot>false</IgnoreUntrustedRoot>
          <IntervalSeconds>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildMonitorInterval$</IntervalSeconds>
          <SyncTime>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <Debug>false</Debug>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CRL" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" TypeID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Low</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <!-- add default to overcome potential replacement issues -->
            <AlertParameter1>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLIssuer$</AlertParameter1>
            <AlertParameter2>$Data[Default='_no_CRLNextUpdate']/Context/Property[@Name='CRLNextUpdate']$</AlertParameter2>
            <AlertParameter3>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$</AlertParameter3>
            <AlertParameter4>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</AlertParameter4>
            <AlertParameter5>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</AlertParameter5>
            <AlertParameter6>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</AlertParameter6>
            <AlertParameter7>$Data[Default='']/Context/Property[@Name='UserContext']$</AlertParameter7>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="CRLIsCurrent" MonitorTypeStateID="Current" HealthState="Success" />
          <OperationalState ID="CRLRequiresUpdate" MonitorTypeStateID="UpdateRequired" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <CRLThumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLThumbprint$</CRLThumbprint>
          <!--  take values from HOST to guarantee coockdown -->
          <RevocationFlag>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationFlag$</RevocationFlag>
          <RevocationMode>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/RevocationMode$</RevocationMode>
          <VerificationFlags>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/VerificationFlags$</VerificationFlags>
          <!-- include / exclude certificates (from store properties - assure to keep cookdown) -->
          <SubjectIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectIncludeRegEx$</SubjectIncludeRegEx>
          <IssuerIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerIncludeRegEx$</IssuerIncludeRegEx>
          <SubjectExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/SubjectExcludeRegEx$</SubjectExcludeRegEx>
          <IssuerExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/IssuerExcludeRegEx$</IssuerExcludeRegEx>
          <EnhKeyUseExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/EnhKeyUseExcludeRegEx$</EnhKeyUseExcludeRegEx>
          <TemplateIncludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateIncludeRegEx$</TemplateIncludeRegEx>
          <TemplateExcludeRegEx>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/TemplateExcludeRegEx$</TemplateExcludeRegEx>
          <IntervalSeconds>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildMonitorInterval$</IntervalSeconds>
          <SyncTime>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/Sync$</SyncTime>
          <SpreadInitializationOverInterval>900</SpreadInitializationOverInterval>
          <TimeoutSeconds>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/ChildScriptTimeout$</TimeoutSeconds>
          <NextUpdateThreshold>0</NextUpdateThreshold>
          <Debug>false</Debug>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.OperatingSystem" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.MonitorType" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>43200</IntervalSeconds>
          <TimeoutSeconds>120</TimeoutSeconds>
          <SpreadInitializationOverInterval>300</SpreadInitializationOverInterval>
          <RequiredVersion>2.0</RequiredVersion>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SystemCenterCentral.Utilities.Certificates.StoreOverridesValid.Monitor" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="SystemCenterCentral.Utilities.Certificates.StoreOverridesValid.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="FirstEventRaised" MonitorTypeStateID="FirstEventRaised" HealthState="Warning" />
          <OperationalState ID="SecondEventRaised" MonitorTypeStateID="SecondEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <FirstComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</FirstComputerName>
          <FirstLogName>Operations Manager</FirstLogName>
          <FirstExpression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>^111$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Health Service Script</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Certificate_Verify_Script_V5.ps1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>Store ID: '$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$'</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </FirstExpression>
          <SecondComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</SecondComputerName>
          <SecondLogName>Operations Manager</SecondLogName>
          <SecondExpression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>^110$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Health Service Script</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Certificate_Verify_Script_V5.ps1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>Store ID: '$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$'</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </SecondExpression>
        </Configuration>
      </UnitMonitor>
      <DependencyMonitor ID="SystemCenterCentral.Utilities.Certificates.Certificate.RollUp.Monitor" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" RelationshipType="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.Certificate" MemberMonitor="Health!System.Health.ConfigurationState">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
        <MemberUnAvailable>Error</MemberUnAvailable>
      </DependencyMonitor>
      <DependencyMonitor ID="SystemCenterCentral.Utilities.Certificates.CRL.RollUp.Monitor" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" RelationshipType="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.CRL" MemberMonitor="Health!System.Health.ConfigurationState">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
        <MemberUnAvailable>Error</MemberUnAvailable>
      </DependencyMonitor>
      <DependencyMonitor ID="SystemCenterCentral.Utilities.Certificates.CertificateStore.RollUp.Monitor" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="false" Priority="Normal" RelationshipType="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore" MemberMonitor="Health!System.Health.ConfigurationState">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
        <MemberUnAvailable>Error</MemberUnAvailable>
      </DependencyMonitor>
    </Monitors>
    <Recoveries>
      <Recovery ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.ArchiveCertificate.Recovery" Accessibility="Internal" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.Certificate" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" ExecuteOnState="Error" ResetMonitor="false" Remotable="false" Timeout="300">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ARCHIVE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Recovery</TaskId>
        </WriteAction>
      </Recovery>
      <Recovery ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.ArchiveCertificate.Recovery" Accessibility="Internal" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.Certificate" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" ExecuteOnState="Warning" ResetMonitor="false" Remotable="false" Timeout="300">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>ARCHIVE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Recovery</TaskId>
        </WriteAction>
      </Recovery>
      <Recovery ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.DisableCertificate.Recovery" Accessibility="Internal" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.Certificate" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" ExecuteOnState="Error" ResetMonitor="false" Remotable="false" Timeout="300">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>DISABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Recovery</TaskId>
        </WriteAction>
      </Recovery>
      <Recovery ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.DisableCertificate.Recovery" Accessibility="Internal" Enabled="false" Target="SystemCenterCentral.Utilities.Certificates.Certificate" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" ExecuteOnState="Warning" ResetMonitor="false" Remotable="false" Timeout="300">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="SystemCenterCentral.Utilities.Certificates.HandlingScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
          <Operation>DISABLE</Operation>
          <Thumbprint>$Target/Property[Type="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$</Thumbprint>
          <TaskId>SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Recovery</TaskId>
        </WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <MonitorConfigurationOverride ID="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate.CertificateValidity.Monitor_IgnoreUntrustedRoot_Override" Context="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" Parameter="IgnoreUntrustedRoot">
        <Value>true</Value>
      </MonitorConfigurationOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor.RequiredWindowsCertificates.Override" Context="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor.RequiredWindowsCertificates.Override" Context="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor.RequiredWindowsCertificates.Override" Context="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor_DisableGroup_Override" Context="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor_DisableGroup_Override" Context="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor_DisableGroup_Override" Context="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor_DisableClusterVirtualServer_Override" Context="ClusterLib!Microsoft.Windows.Cluster.VirtualServer" Enforced="false" Monitor="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <DiscoveryPropertyOverride ID="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup.Discovery.QuickStartOverride" Context="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup" Enforced="false" Discovery="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.RootCertificate.Discovery" Property="Enabled">
        <Value>true</Value>
      </DiscoveryPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="SystemCenterCentral.Utilities.Certificates.AlertView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Custom</Category>
        <Criteria>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Severity</Name>
            <Id>Severity</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="54" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Icon</Name>
            <Id>Icon</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>MonitoringObjectPath</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Source</Name>
            <Id>MonitoringObjectDisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>MonitoringObjectInMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Resolution State</Name>
            <Id>ResolutionState</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="150" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Created</Name>
            <Id>TimeRaised</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Age</Name>
            <Id>Age</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Type</Name>
            <Id>Category</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Owner</Name>
            <Id>Owner</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Priority</Name>
            <Id>Priority</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Latency</Name>
            <Id>Latency</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Description</Name>
            <Id>Description</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connector</Name>
            <Id>ConnectorId</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Forwarding Status</Name>
            <Id>ConnectorStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Class</Name>
            <Id>Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time in State</Name>
            <Id>TimeInState</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 1</Name>
            <Id>CustomField1</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 2</Name>
            <Id>CustomField2</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 3</Name>
            <Id>CustomField3</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 4</Name>
            <Id>CustomField4</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 5</Name>
            <Id>CustomField5</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 6</Name>
            <Id>CustomField6</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 7</Name>
            <Id>CustomField7</Id>
          </ColumnInfo>
          <ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 8</Name>
            <Id>CustomField8</Id>
          </ColumnInfo>
          <ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 9</Name>
            <Id>CustomField9</Id>
          </ColumnInfo>
          <ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 10</Name>
            <Id>CustomField10</Id>
          </ColumnInfo>
          <ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Resolved By</Name>
            <Id>ResolvedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time Resolved</Name>
            <Id>TimeResolved</Id>
          </ColumnInfo>
          <ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last State Change</Name>
            <Id>TimeResolutionStateLastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Last Modified</Name>
            <Id>LastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Last Modified By</Name>
            <Id>LastModifiedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Management Group</Name>
            <Id>ManagementGroup</Id>
          </ColumnInfo>
          <ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Site</Name>
            <Id>SiteName</Id>
          </ColumnInfo>
          <ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Repeat Count</Name>
            <Id>RepeatCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Ticket ID</Name>
            <Id>TicketId</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLs.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CRL" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
          <!-- boolean criteria does not allow checking for false -->
          <!--
          <PropertyCriteria>
            <PropertyName>CRLNeedsUpdate</PropertyName>
            <Value>0</Value>
          </PropertyCriteria>
          -->
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.CRL</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CRLVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CRLSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issuer</Name>
            <Id>CRLIssuer</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>This Update</Name>
            <Id>CRLThisUpdate</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Next Update</Name>
            <Id>CRLNextUpdate</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Entries in CRL</Name>
            <Id>CRLEntries</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CRLThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Needs Update</Name>
            <Id>CRLNeedsUpdate</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup"]$</Target>
        -->
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Red</Severity>
            <Severity>Yellow</Severity>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
          <PropertyCriteria>
            <PropertyName>CertTimeStatus</PropertyName>
            <Value>%:%</Value>
          </PropertyCriteria>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.Certificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issued to</Name>
            <Id>CertIssuedTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Issued by</Name>
            <Id>CertIssuedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid from</Name>
            <Id>CertValidFrom</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid to</Name>
            <Id>CertValidTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CertVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CertSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Public Key Type</Name>
            <Id>CertPublicKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Private Key present</Name>
            <Id>CertPrivateKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Friendly Name</Name>
            <Id>CertFriendlyName</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CertThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Serial N°</Name>
            <Id>CertSerial</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Status</Name>
            <Id>CertStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Expires within a month</Name>
            <Id>CertExpiresWithin31Days</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>CA Certificate Version</Name>
            <Id>CAVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Template</Name>
            <Id>TemplateName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup"]$</Target>
        -->
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Red</Severity>
            <Severity>Yellow</Severity>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
          <PropertyCriteria>
            <PropertyName>CertStatus</PropertyName>
            <Value>%:%</Value>
          </PropertyCriteria>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.Certificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issued to</Name>
            <Id>CertIssuedTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Issued by</Name>
            <Id>CertIssuedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid from</Name>
            <Id>CertValidFrom</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid to</Name>
            <Id>CertValidTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CertVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CertSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Public Key Type</Name>
            <Id>CertPublicKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Private Key present</Name>
            <Id>CertPrivateKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Friendly Name</Name>
            <Id>CertFriendlyName</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CertThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Serial N°</Name>
            <Id>CertSerial</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Status</Name>
            <Id>CertStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Expires within a month</Name>
            <Id>CertExpiresWithin31Days</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>CA Certificate Version</Name>
            <Id>CAVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Template</Name>
            <Id>TemplateName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup"]$</Target>
        -->
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.MPAlertView" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.OperatingSystem" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SourceList>
            <Source>
              <Type>Monitor</Type>
              <Id>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor"]$</Id>
            </Source>
            <!--
            <Source>
              <Type>Monitor</Type>
              -->
            <!-- <Id>_MPElement[Name="SystemCenterCentral.Utilities.Certificates.QuestSnapin.Installed.Monitor"]_</Id> -->
            <!-- using GUID here to avoid having to have a reference -->
            <!--
              <Id>f87d674f-2344-cd33-50b0-069a5e9bca63</Id>
            </Source>
             -->
          </SourceList>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Severity</Name>
            <Id>Severity</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="54" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Icon</Name>
            <Id>Icon</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>MonitoringObjectPath</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Source</Name>
            <Id>MonitoringObjectDisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>MonitoringObjectInMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Resolution State</Name>
            <Id>ResolutionState</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="150" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Created</Name>
            <Id>TimeRaised</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Age</Name>
            <Id>Age</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Type</Name>
            <Id>Category</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Owner</Name>
            <Id>Owner</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Priority</Name>
            <Id>Priority</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Latency</Name>
            <Id>Latency</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Description</Name>
            <Id>Description</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connector</Name>
            <Id>ConnectorId</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Forwarding Status</Name>
            <Id>ConnectorStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Class</Name>
            <Id>Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time in State</Name>
            <Id>TimeInState</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 1</Name>
            <Id>CustomField1</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 2</Name>
            <Id>CustomField2</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 3</Name>
            <Id>CustomField3</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 4</Name>
            <Id>CustomField4</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 5</Name>
            <Id>CustomField5</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 6</Name>
            <Id>CustomField6</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 7</Name>
            <Id>CustomField7</Id>
          </ColumnInfo>
          <ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 8</Name>
            <Id>CustomField8</Id>
          </ColumnInfo>
          <ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 9</Name>
            <Id>CustomField9</Id>
          </ColumnInfo>
          <ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 10</Name>
            <Id>CustomField10</Id>
          </ColumnInfo>
          <ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Resolved By</Name>
            <Id>ResolvedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time Resolved</Name>
            <Id>TimeResolved</Id>
          </ColumnInfo>
          <ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last State Change</Name>
            <Id>TimeResolutionStateLastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Last Modified</Name>
            <Id>LastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Last Modified By</Name>
            <Id>LastModifiedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Management Group</Name>
            <Id>ManagementGroup</Id>
          </ColumnInfo>
          <ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Site</Name>
            <Id>SiteName</Id>
          </ColumnInfo>
          <ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Repeat Count</Name>
            <Id>RepeatCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Ticket ID</Name>
            <Id>TicketId</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CRL" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Red</Severity>
            <Severity>Yellow</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
          <!--
          <PropertyCriteria>
            <PropertyName>CRLNeedsUpdate</PropertyName>
            <Value>1</Value>
          </PropertyCriteria>
          -->
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.CRL</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CRLVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CRLSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issuer</Name>
            <Id>CRLIssuer</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>This Update</Name>
            <Id>CRLThisUpdate</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Next Update</Name>
            <Id>CRLNextUpdate</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Entries in CRL</Name>
            <Id>CRLEntries</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CRLThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Needs Update</Name>
            <Id>CRLNeedsUpdate</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup"]$</Target>
        -->
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Red</Severity>
            <Severity>Yellow</Severity>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
          <PropertyCriteria>
            <PropertyName>CertTimeStatus</PropertyName>
            <Value>IsTimeValid</Value>
          </PropertyCriteria>
          <PropertyCriteria>
            <PropertyName>CertExpiresWithin31Days</PropertyName>
            <Value>1</Value>
          </PropertyCriteria>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.Certificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issued to</Name>
            <Id>CertIssuedTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Issued by</Name>
            <Id>CertIssuedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid from</Name>
            <Id>CertValidFrom</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid to</Name>
            <Id>CertValidTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CertVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CertSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Public Key Type</Name>
            <Id>CertPublicKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Private Key present</Name>
            <Id>CertPrivateKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Friendly Name</Name>
            <Id>CertFriendlyName</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CertThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Serial N°</Name>
            <Id>CertSerial</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Status</Name>
            <Id>CertStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Expires within a month</Name>
            <Id>CertExpiresWithin31Days</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>CA Certificate Version</Name>
            <Id>CAVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Template</Name>
            <Id>TemplateName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup"]$</Target>
        -->
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.StoreStateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Custom</Category>
        <Criteria>
          <SeverityList>
            <Severity>Red</Severity>
            <Severity>Yellow</Severity>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.CertificateStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Store Name</Name>
            <Id>CertStoreName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Store ID (internal)</Name>
            <Id>CertStoreID</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.Certificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Non-Root Certificate</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.NonRootCertificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Root Certificate</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.RootCertificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Revocation List</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.CRL</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.ValidCertificates.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
          <PropertyCriteria>
            <PropertyName>CertStatus</PropertyName>
            <Value>IsVerified</Value>
          </PropertyCriteria>
          <PropertyCriteria>
            <PropertyName>CertTimeStatus</PropertyName>
            <Value>IsTimeValid</Value>
          </PropertyCriteria>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.Certificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issued to</Name>
            <Id>CertIssuedTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Issued by</Name>
            <Id>CertIssuedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid from</Name>
            <Id>CertValidFrom</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid to</Name>
            <Id>CertValidTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CertVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CertSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Public Key Type</Name>
            <Id>CertPublicKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Private Key present</Name>
            <Id>CertPrivateKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Friendly Name</Name>
            <Id>CertFriendlyName</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CertThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Serial N°</Name>
            <Id>CertSerial</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Status</Name>
            <Id>CertStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Expires within a month</Name>
            <Id>CertExpiresWithin31Days</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>CA Certificate Version</Name>
            <Id>CAVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Template</Name>
            <Id>TemplateName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup"]$</Target>
        -->
        <Target />
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.CACertificates.StateView" Accessibility="Public" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.RootCertificate" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <SeverityList>
            <Severity>Red</Severity>
            <Severity>Yellow</Severity>
            <Severity>Green</Severity>
          </SeverityList>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.RootCertificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issued to</Name>
            <Id>CertIssuedTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Issued by</Name>
            <Id>CertIssuedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid from</Name>
            <Id>CertValidFrom</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid to</Name>
            <Id>CertValidTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CertVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CertSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Public Key Type</Name>
            <Id>CertPublicKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Private Key present</Name>
            <Id>CertPrivateKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Friendly Name</Name>
            <Id>CertFriendlyName</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CertThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Serial N°</Name>
            <Id>CertSerial</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Status</Name>
            <Id>CertStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Expires within a month</Name>
            <Id>CertExpiresWithin31Days</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>CA Certificate Version</Name>
            <Id>CAVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Template</Name>
            <Id>TemplateName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CAGroup"]$</Target>
        -->
      </View>
      <View ID="SystemCenterCentral.Utilities.Certificates.DisabledCertificates.StateView" Accessibility="Internal" Enabled="true" Target="SystemCenterCentral.Utilities.Certificates.Certificate" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
          <PropertyCriteria>
            <PropertyName>CertFriendlyName</PropertyName>
            <Value>%_DoNotMonitor</Value>
          </PropertyCriteria>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>SystemCenterCentral.Utilities.Certificates.Certificate</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>Issued to</Name>
            <Id>CertIssuedTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Issued by</Name>
            <Id>CertIssuedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid from</Name>
            <Id>CertValidFrom</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Valid to</Name>
            <Id>CertValidTo</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Version</Name>
            <Id>CertVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Signature Algorithm</Name>
            <Id>CertSignatureAlgo</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Public Key Type</Name>
            <Id>CertPublicKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Private Key present</Name>
            <Id>CertPrivateKey</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="240" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Friendly Name</Name>
            <Id>CertFriendlyName</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Thumbprint</Name>
            <Id>CertThumbprint</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Serial N°</Name>
            <Id>CertSerial</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Status</Name>
            <Id>CertStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Certificate Store</Name>
            <Id>CertStore</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Expires within a month</Name>
            <Id>CertExpiresWithin31Days</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>CA Certificate Version</Name>
            <Id>CAVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Template</Name>
            <Id>TemplateName</Id>
          </ColumnInfo>
        </Presentation>
        <!--
        <Target>$MPElement[Name="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup"]$</Target>
        -->
        <Target />
      </View>
    </Views>
    <Folders>
      <Folder ID="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" Accessibility="Public" ParentFolder="SystemCenterCentral.Utilities.Certificates.ViewFolder" />
      <Folder ID="SystemCenterCentral.Utilities.Certificates.ViewFolder" Accessibility="Public" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.AlertView" ID="SystemCenterCentral.Utilities.Certificates.AlertViewID" Folder="SystemCenterCentral.Utilities.Certificates.ViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.CurrentCRLs.StateView" ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLs.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.StateView" ID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.StateView" ID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.MPAlertView" ID="SystemCenterCentral.Utilities.Certificates.MPAlertViewID" Folder="SystemCenterCentral.Utilities.Certificates.ViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.StateView" ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.StateView" ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.StoreStateView" ID="SystemCenterCentral.Utilities.Certificates.StoreStateViewID" Folder="SystemCenterCentral.Utilities.Certificates.ViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.ValidCertificates.StateView" ID="SystemCenterCentral.Utilities.Certificates.ValidCertificates.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.CACertificates.StateView" ID="SystemCenterCentral.Utilities.Certificates.CACertificates.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
      <FolderItem ElementID="SystemCenterCentral.Utilities.Certificates.DisabledCertificates.StateView" ID="SystemCenterCentral.Utilities.Certificates.DisabledCertificates.StateViewID" Folder="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder" />
    </FolderItems>
    <ImageReferences>
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.ApplicationComponent" ImageID="SystemCenterCentral.Utilities.Certificates.Components.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.ApplicationComponent" ImageID="SystemCenterCentral.Utilities.Certificates.Components.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup" ImageID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup" ImageID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" ImageID="SystemCenterCentral.Utilities.Certificates.Certificate.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" ImageID="SystemCenterCentral.Utilities.Certificates.Certificate.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" ImageID="SystemCenterCentral.Utilities.Certificates.CertStore.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" ImageID="SystemCenterCentral.Utilities.Certificates.CertStore.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CRL" ImageID="SystemCenterCentral.Utilities.Certificates.CRL.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CRL" ImageID="SystemCenterCentral.Utilities.Certificates.CRL.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup" ImageID="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup" ImageID="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.NonRootCertificate" ImageID="SystemCenterCentral.Utilities.Certificates.Certificate.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.NonRootCertificate" ImageID="SystemCenterCentral.Utilities.Certificates.Certificate.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup" ImageID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup" ImageID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.RootCertificate" ImageID="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.RootCertificate" ImageID="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image80" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image16" />
      <ImageReference ElementID="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup" ImageID="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image80" />
    </ImageReferences>
    <StringResources>
      <StringResource ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor_AlertMessageResourceID" />
      <StringResource ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor_AlertMessageResourceID" />
      <StringResource ID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor_AlertMessageResourceID" />
      <StringResource ID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor_AlertMessageResourceID" />
      <StringResource ID="SystemCenterCentral.Utilities.Certificates.StoreOverridesValid.Monitor_AlertMessageResourceID" />
    </StringResources>
    <ComponentTypes>
      <ComponentType ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" Accessibility="Internal" Base="Visualization!Microsoft.SystemCenter.Visualization.GridLayout" Lifetime="ReferenceCount" />
      <ComponentType ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireState" Accessibility="Internal" Base="Visualization!Microsoft.SystemCenter.Visualization.StateWidget" Lifetime="ReferenceCount" />
      <ComponentType ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredState" Accessibility="Internal" Base="Visualization!Microsoft.SystemCenter.Visualization.StateWidget" Lifetime="ReferenceCount" />
      <ComponentType ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidState" Accessibility="Internal" Base="Visualization!Microsoft.SystemCenter.Visualization.StateWidget" Lifetime="ReferenceCount" />
      <ComponentType ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedState" Accessibility="Internal" Base="Visualization!Microsoft.SystemCenter.Visualization.StateWidget" Lifetime="ReferenceCount" />
    </ComponentTypes>
    <ComponentReferences>
      <ComponentReference ID="SystemCenterCentral.Utilities.Certificates.Issue_DashboardReference" Accessibility="Internal" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" Parent="SystemCenterCentral.Utilities.Certificates.ViewFolder" />
      <ComponentReference ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireStateReference" Accessibility="Internal" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireState" Parent="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" />
      <ComponentReference ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredStateReference" Accessibility="Internal" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredState" Parent="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" />
      <ComponentReference ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidStateReference" Accessibility="Internal" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidState" Parent="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" />
      <ComponentReference ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedStateReference" Accessibility="Internal" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedState" Parent="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" />
    </ComponentReferences>
    <ComponentOverrides>
      <ComponentOverride ID="SystemCenterCentral.Utilities.Certificates.Issue_DashboardOverride" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard">
        <Bindings>
          <Binding PropertyId="ConfigType">
            <SimpleValue Type="xsd://string" Value="Microsoft.SystemCenter.Visualization.Library!GridLayout04CellTiledConfig" />
          </Binding>
          <Binding PropertyId="CellRegionMappings">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.LayoutConfig/CellRegionMapping[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.LayoutConfig/CellRegionMapping">
                <Binding PropertyId="RegionContent">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireStateReference" />
                </Binding>
                <Binding PropertyId="RegionId">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region0" />
                </Binding>
                <Binding PropertyId="RegionParameters" />
                <Binding PropertyId="CellIndex">
                  <SimpleValue Type="xsd://int" Value="0" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.LayoutConfig/CellRegionMapping">
                <Binding PropertyId="RegionContent">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredStateReference" />
                </Binding>
                <Binding PropertyId="RegionId">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region1" />
                </Binding>
                <Binding PropertyId="RegionParameters" />
                <Binding PropertyId="CellIndex">
                  <SimpleValue Type="xsd://int" Value="1" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.LayoutConfig/CellRegionMapping">
                <Binding PropertyId="RegionContent">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidStateReference" />
                </Binding>
                <Binding PropertyId="RegionId">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region2" />
                </Binding>
                <Binding PropertyId="RegionParameters" />
                <Binding PropertyId="CellIndex">
                  <SimpleValue Type="xsd://int" Value="2" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.LayoutConfig/CellRegionMapping">
                <Binding PropertyId="RegionContent">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedStateReference" />
                </Binding>
                <Binding PropertyId="RegionId">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region3" />
                </Binding>
                <Binding PropertyId="RegionParameters" />
                <Binding PropertyId="CellIndex">
                  <SimpleValue Type="xsd://int" Value="3" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
        </Bindings>
      </ComponentOverride>
      <ComponentOverride ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireStateOverride" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireState" Context="/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region0/Microsoft.SystemCenter.Visualization.Library!ComposedRegion/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireState/">
        <Bindings>
          <Binding PropertyId="TargetIds">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel">
                <Binding PropertyId="MPInstance">
                  <ComplexValue Type="mpinstance://System.Library!System.Entity">
                    <Binding PropertyId="Id">
                      <!-- _MPElement[Name='SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup']_ -->
                      <SimpleValue Type="xsd://string" Value="6590696b-0908-5b54-c3c7-9dc5c394f01c" />
                    </Binding>
                  </ComplexValue>
                </Binding>
                <Binding PropertyId="RecursionLevel">
                  <!-- 
                  <SimpleValue Type="xsd://int" Value="-1" />
                  -->
                  <SimpleValue Type="xsd://int" Value="1" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="BaseManagementPackTypes">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType">
                <Binding PropertyId="FullyQualifiedName">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Certificate" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="ShowSearchBar">
            <SimpleValue Type="xsd://boolean" Value="True" />
          </Binding>
          <Binding PropertyId="Columns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]">
              <!--
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.TypeWithIcon/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="False" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="False" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="TypeWithIcon" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='TypeWithIcon']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue> -->
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.HealthState/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="HealthState" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='HealthState']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued to" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedBy" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued by" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedBy']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertValidFrom" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Valid from" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertValidFrom']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertValidTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Valid to" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertValidTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="SortedColumns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued to" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
        </Bindings>
      </ComponentOverride>
      <ComponentOverride ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredStateOverride" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredState" Context="/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region1/Microsoft.SystemCenter.Visualization.Library!ComposedRegion/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredState/">
        <Bindings>
          <Binding PropertyId="TargetIds">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel">
                <Binding PropertyId="MPInstance">
                  <ComplexValue Type="mpinstance://System.Library!System.Entity">
                    <Binding PropertyId="Id">
                      <SimpleValue Type="xsd://string" Value="d10c886a-7de7-d57f-0a28-a2d77b2027a4" />
                    </Binding>
                  </ComplexValue>
                </Binding>
                <Binding PropertyId="RecursionLevel">
                  <SimpleValue Type="xsd://int" Value="1" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="BaseManagementPackTypes">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType">
                <Binding PropertyId="FullyQualifiedName">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Certificate" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="ShowSearchBar">
            <SimpleValue Type="xsd://boolean" Value="True" />
          </Binding>
          <Binding PropertyId="Columns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.HealthState/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="HealthState" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='HealthState']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued to" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedBy" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued by" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedBy']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertValidFrom" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Valid from" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertValidFrom']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertValidTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Valid to" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertValidTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="SortedColumns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued to" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
        </Bindings>
      </ComponentOverride>
      <ComponentOverride ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidStateOverride" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidState" Context="/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region2/Microsoft.SystemCenter.Visualization.Library!ComposedRegion/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidState/">
        <Bindings>
          <Binding PropertyId="TargetIds">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel">
                <Binding PropertyId="MPInstance">
                  <ComplexValue Type="mpinstance://System.Library!System.Entity">
                    <Binding PropertyId="Id">
                      <SimpleValue Type="xsd://string" Value="e42d40ba-a935-6b6b-e2fb-f3bd7753879e" />
                    </Binding>
                  </ComplexValue>
                </Binding>
                <Binding PropertyId="RecursionLevel">
                  <SimpleValue Type="xsd://int" Value="1" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="BaseManagementPackTypes">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType">
                <Binding PropertyId="FullyQualifiedName">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Certificate" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="ShowSearchBar">
            <SimpleValue Type="xsd://boolean" Value="True" />
          </Binding>
          <Binding PropertyId="Columns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.HealthState/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="HealthState" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='HealthState']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued to" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedBy" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued by" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedBy']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertValidFrom" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Valid from" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertValidFrom']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertValidTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Valid to" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertValidTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="SortedColumns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CertIssuedTo" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issued to" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CertIssuedTo']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
        </Bindings>
      </ComponentOverride>
      <ComponentOverride ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedStateOverride" TypeID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedState" Context="/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.GridLayout/SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.Region3/Microsoft.SystemCenter.Visualization.Library!ComposedRegion/SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedState/">
        <Bindings>
          <Binding PropertyId="TargetIds">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataProvider/MPInstanceWithRecursionLevel">
                <Binding PropertyId="MPInstance">
                  <ComplexValue Type="mpinstance://System.Library!System.Entity">
                    <Binding PropertyId="Id">
                      <SimpleValue Type="xsd://string" Value="dad56948-0746-5aed-3a11-606e01e7bf49" />
                    </Binding>
                  </ComplexValue>
                </Binding>
                <Binding PropertyId="RecursionLevel">
                  <SimpleValue Type="xsd://int" Value="1" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="BaseManagementPackTypes">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.OperationalDataTypes/BaseManagementPackType">
                <Binding PropertyId="FullyQualifiedName">
                  <SimpleValue Type="xsd://string" Value="SystemCenterCentral.Utilities.Certificates!SystemCenterCentral.Utilities.Certificates.CRL" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="ShowSearchBar">
            <SimpleValue Type="xsd://boolean" Value="True" />
          </Binding>
          <Binding PropertyId="Columns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.HealthState/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="HealthState" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='HealthState']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CRLIssuer" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issuer" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CRLIssuer']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CRLThisUpdate" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="This Update" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CRLThisUpdate']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CRLNextUpdate" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Next Update" />
                </Binding>
                <Binding PropertyId="CellComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CRLNextUpdate']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
                <Binding PropertyId="HeaderComponentType">
                  <SimpleValue Type="xsd://string" Value="" />
                </Binding>
                <Binding PropertyId="SortableGroupable">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="CanResize">
                  <SimpleValue Type="xsd://boolean" Value="True" />
                </Binding>
                <Binding PropertyId="Width">
                  <SimpleValue Type="xsd://string" Value="Auto" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
          <Binding PropertyId="SortedColumns">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Path" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="$MPReference/Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.Library.Entity.Path/DisplayName$" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/Property[Name='Path']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="CRLIssuer" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Issuer" />
                </Binding>
                <Binding PropertyId="SortDirection">
                  <SimpleValue Type="xsd://string" Value="Ascending" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='CRLIssuer']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Binding>
        </Bindings>
      </ComponentOverride>
    </ComponentOverrides>
    <ComponentImplementations>
      <ComponentImplementation ID="SystemCenterCentral.Utilities.Certificates.Issue_DashboardImplementation" Accessibility="Internal" TypeId="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard" Platform="Wpf, Silverlight">
        <Composite>
          <Base />
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireStateImplementation" Accessibility="Internal" TypeId="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireState" Platform="Wpf, Silverlight">
        <Composite>
          <Base />
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredStateImplementation" Accessibility="Internal" TypeId="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredState" Platform="Wpf, Silverlight">
        <Composite>
          <Base />
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidStateImplementation" Accessibility="Internal" TypeId="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidState" Platform="Wpf, Silverlight">
        <Composite>
          <Base />
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedStateImplementation" Accessibility="Internal" TypeId="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedState" Platform="Wpf, Silverlight">
        <Composite>
          <Base />
        </Composite>
      </ComponentImplementation>
    </ComponentImplementations>
  </Presentation>
  <Reporting>
    <DataWarehouseScripts>
      <DataWarehouseScript ID="SystemCenterCentral.Utilities.Certificates.Report.Script.TwoGroupCustomConfiguration" Accessibility="Internal">
        <InstallScript>Res.TwoGroupCustomConfigurationReportDataGet_Install</InstallScript>
        <UninstallScript>Res.TwoGroupCustomConfigurationReportDataGet_Uninstall</UninstallScript>
        <UpgradeScript>Res.TwoGroupCustomConfigurationReportDataGet_Upgrade</UpgradeScript>
      </DataWarehouseScript>
    </DataWarehouseScripts>
    <Reports>
      <Report ID="SystemCenterCentral.Utilities.Certificates.CustomConfigurationReport" Accessibility="Public" Visible="false">
        <Dependencies>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.CustomConfiguration</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.CustomConfigurationColumn</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.ObjectList</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.ObjectListParse</DataWarehouseScript>
          <ReportResource>SCC_banner_landscape.jpg</ReportResource>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker</ReportParameterControl>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker</ReportParameterControl>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.TextBox</ReportParameterControl>
        </Dependencies>
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ObjectList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
            </Control>
            <Control columnSpan="2" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.ReportColumnPicker">
              <ReportParameters>
                <ReportParameter name="Properties" />
                <ReportParameter name="ColumnList" binding="ColumnList" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <ReportDefinition>Res.CustomConfigurationReport</ReportDefinition>
        <ReportStrings>
          <ReportString ID="R.Title" />
          <ReportString ID="R.Description" />
          <ReportString ID="R.DescriptionTitle" />
          <ReportString ID="R.PageFormat" />
          <ReportString ID="R.TimeZoneFormat" />
          <ReportString ID="R.GeneratedTimeLabel" />
          <ReportString ID="R.StartEndTimeLabel" />
          <ReportString ID="R.StartEndTimeFormat" />
          <ReportString ID="R.BusinessTimeFormat" />
          <ReportString ID="R.ObjectsLabel" />
          <ReportString ID="R.ObjectsFormat" />
          <ReportString ID="R.ObjectFormatLine1" />
          <ReportString ID="R.ObjectFormatLine2" />
          <ReportString ID="R.ObjectFormatLine2Path" />
          <ReportString ID="R.ObjectUseContainment" />
          <ReportString ID="R.ObjectFilterLabel" />
          <ReportString ID="R.GroupByLabel" />
          <ReportString ID="R.ActionsLabel" />
          <ReportString ID="R.AllLabel" />
          <ReportString ID="RT.Column.ObjectLabel" />
          <ReportString ID="RT.Detail.ViewTitle" />
          <ReportString ID="RT.Detail.AttributesViewLabel" />
          <ReportString ID="RT.Detail.ReportTitle" />
          <ReportString ID="RT.Detail.ConfigurationChangeReportLabel" />
        </ReportStrings>
      </Report>
      <Report ID="SystemCenterCentral.Utilities.Certificates.CustomGroupConfigurationReport" Accessibility="Public" Visible="false">
        <Dependencies>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.CustomConfiguration</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.CustomConfigurationColumn</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.ObjectList</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.ObjectListParse</DataWarehouseScript>
          <ReportResource>SCC_banner_landscape.jpg</ReportResource>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker</ReportParameterControl>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker</ReportParameterControl>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.TextBox</ReportParameterControl>
        </Dependencies>
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <ReportDefinition>Res.CustomGroupConfigurationReport</ReportDefinition>
        <ReportStrings>
          <ReportString ID="R.ActionsLabel" />
          <ReportString ID="R.AllLabel" />
          <ReportString ID="R.BusinessTimeFormat" />
          <ReportString ID="R.Description" />
          <ReportString ID="R.DescriptionTitle" />
          <ReportString ID="R.GeneratedTimeLabel" />
          <ReportString ID="R.GroupByLabel" />
          <ReportString ID="R.ObjectFilterLabel" />
          <ReportString ID="R.ObjectFormatLine1" />
          <ReportString ID="R.ObjectFormatLine2" />
          <ReportString ID="R.ObjectFormatLine2Path" />
          <ReportString ID="R.ObjectsFormat" />
          <ReportString ID="R.ObjectsLabel" />
          <ReportString ID="R.ObjectUseContainment" />
          <ReportString ID="R.PageFormat" />
          <ReportString ID="R.StartEndTimeFormat" />
          <ReportString ID="R.StartEndTimeLabel" />
          <ReportString ID="R.TimeZoneFormat" />
          <ReportString ID="R.Title" />
          <ReportString ID="RT.Column.ObjectLabel" />
          <ReportString ID="RT.Detail.AttributesViewLabel" />
          <ReportString ID="RT.Detail.ConfigurationChangeReportLabel" />
          <ReportString ID="RT.Detail.ReportTitle" />
          <ReportString ID="RT.Detail.ViewTitle" />
        </ReportStrings>
      </Report>
      <Report ID="SystemCenterCentral.Utilities.Certificates.CustomTwoGroupConfigurationReport" Accessibility="Public" Visible="false">
        <Dependencies>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.CustomConfiguration</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.CustomConfigurationColumn</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.ObjectList</DataWarehouseScript>
          <DataWarehouseScript>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.Script.ObjectListParse</DataWarehouseScript>
          <DataWarehouseScript>SystemCenterCentral.Utilities.Certificates.Report.Script.TwoGroupCustomConfiguration</DataWarehouseScript>
          <ReportResource>SCC_banner_landscape.jpg</ReportResource>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker</ReportParameterControl>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker</ReportParameterControl>
          <ReportParameterControl>ReportLibrary!Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.TextBox</ReportParameterControl>
        </Dependencies>
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ComputerList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <ReportDefinition>Res.CustomTwoGroupConfigurationReport</ReportDefinition>
        <ReportStrings>
          <ReportString ID="R.ActionsLabel" />
          <ReportString ID="R.AllLabel" />
          <ReportString ID="R.BusinessTimeFormat" />
          <ReportString ID="R.Description" />
          <ReportString ID="R.DescriptionTitle" />
          <ReportString ID="R.GeneratedTimeLabel" />
          <ReportString ID="R.GroupByLabel" />
          <ReportString ID="R.ObjectFilterLabel" />
          <ReportString ID="R.ObjectFormatLine1" />
          <ReportString ID="R.ObjectFormatLine2" />
          <ReportString ID="R.ObjectFormatLine2Path" />
          <ReportString ID="R.ObjectsFormat" />
          <ReportString ID="R.ObjectsLabel" />
          <ReportString ID="R.ObjectUseContainment" />
          <ReportString ID="R.PageFormat" />
          <ReportString ID="R.StartEndTimeFormat" />
          <ReportString ID="R.StartEndTimeLabel" />
          <ReportString ID="R.TimeZoneFormat" />
          <ReportString ID="R.Title" />
          <ReportString ID="RT.Column.ObjectLabel" />
          <ReportString ID="RT.Detail.AttributesViewLabel" />
          <ReportString ID="RT.Detail.ConfigurationChangeReportLabel" />
          <ReportString ID="RT.Detail.ReportTitle" />
          <ReportString ID="RT.Detail.ViewTitle" />
        </ReportStrings>
      </Report>
    </Reports>
    <LinkedReports>
      <LinkedReport ID="SystemCenterCentral.Utilities.Certificates.CertificateStore.InventoryReport" Accessibility="Public" Base="SystemCenterCentral.Utilities.Certificates.CustomConfigurationReport" Visible="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore">
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ObjectList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
              <Properties>
                <Property name="ContextObjectBinding">
                  <Value>Containment</Value>
                </Property>
              </Properties>
            </Control>
          </Controls>
        </ParameterBlock>
        <Parameters>
          <Parameter Name="StartDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetType">
            <Value>Day</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetValue">
            <Value>-7</Value>
          </Parameter>
          <Parameter Name="EndDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetType">
            <Value>None</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetValue">
            <Value>0</Value>
          </Parameter>
          <Parameter Name="Properties">
            <Value>
              
					&lt;Data&gt;
						&lt;Columns&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="System!System.Entity"]/DisplayName$&lt;/ID&gt;
								&lt;Filter Type="Contains"&gt;Cert&lt;/Filter&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$&lt;/ID&gt;
							&lt;/Column&gt;	
              &lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$&lt;/ID&gt;
							&lt;/Column&gt; 
						&lt;/Columns&gt;
					&lt;/Data&gt;
					
            </Value>
          </Parameter>
          <Parameter Name="Interactive">
            <Value>True</Value>
          </Parameter>
          <Parameter Name="ReportTitle">
            <Value>Certificate Inventory Report</Value>
          </Parameter>
        </Parameters>
      </LinkedReport>
      <LinkedReport ID="SystemCenterCentral.Utilities.Certificates.CertificateStore.CRLInventoryReport" Accessibility="Public" Base="SystemCenterCentral.Utilities.Certificates.CustomConfigurationReport" Visible="true" Target="SystemCenterCentral.Utilities.Certificates.CertificateStore">
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ObjectList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
              <Properties>
                <Property name="ContextObjectBinding">
                  <Value>Containment</Value>
                </Property>
              </Properties>
            </Control>
          </Controls>
        </ParameterBlock>
        <Parameters>
          <Parameter Name="StartDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetType">
            <Value>Day</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetValue">
            <Value>-7</Value>
          </Parameter>
          <Parameter Name="EndDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetType">
            <Value>None</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetValue">
            <Value>0</Value>
          </Parameter>
          <Parameter Name="Properties">
            <Value>
              
					&lt;Data&gt;
						&lt;Columns&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="System!System.Entity"]/DisplayName$&lt;/ID&gt;
								&lt;Filter Type="Contains"&gt;CRL&lt;/Filter&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLIssuer$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLThisUpdate$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLNextUpdate$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLEntries$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLSignatureAlgo$&lt;/ID&gt;
							&lt;/Column&gt;
						&lt;/Columns&gt;
					&lt;/Data&gt;
					
            </Value>
          </Parameter>
          <Parameter Name="Interactive">
            <Value>True</Value>
          </Parameter>
          <Parameter Name="ReportTitle">
            <Value>CRL Inventory Report</Value>
          </Parameter>
        </Parameters>
      </LinkedReport>
      <LinkedReport ID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.InventoryReport" Accessibility="Public" Base="SystemCenterCentral.Utilities.Certificates.CustomTwoGroupConfigurationReport" Visible="true" Target="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup">
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ComputerList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <Parameters>
          <Parameter Name="StartDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetType">
            <Value>Day</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetValue">
            <Value>-7</Value>
          </Parameter>
          <Parameter Name="EndDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetType">
            <Value>None</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetValue">
            <Value>0</Value>
          </Parameter>
          <Parameter Name="ObjectGroupName">
            <Value>SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup</Value>
          </Parameter>
          <Parameter Name="Properties">
            <Value>
              
					&lt;Data&gt;
						&lt;Columns&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="System!System.Entity"]/DisplayName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$&lt;/ID&gt;
							&lt;/Column&gt;
              &lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$&lt;/ID&gt;
							&lt;/Column&gt; 
						&lt;/Columns&gt;
					&lt;/Data&gt;
					
            </Value>
          </Parameter>
          <Parameter Name="Interactive">
            <Value>True</Value>
          </Parameter>
          <Parameter Name="ReportTitle">
            <Value>Expired Certificate Report</Value>
          </Parameter>
        </Parameters>
      </LinkedReport>
      <LinkedReport ID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.InventoryReport" Accessibility="Public" Base="SystemCenterCentral.Utilities.Certificates.CustomTwoGroupConfigurationReport" Visible="true" Target="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup">
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ComputerList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <Parameters>
          <Parameter Name="StartDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetType">
            <Value>Day</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetValue">
            <Value>-7</Value>
          </Parameter>
          <Parameter Name="EndDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetType">
            <Value>None</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetValue">
            <Value>0</Value>
          </Parameter>
          <Parameter Name="ObjectGroupName">
            <Value>SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup</Value>
          </Parameter>
          <Parameter Name="Properties">
            <Value>
									
					&lt;Data&gt;
						&lt;Columns&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="System!System.Entity"]/DisplayName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$&lt;/ID&gt;
							&lt;/Column&gt;
              &lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$&lt;/ID&gt;
							&lt;/Column&gt; 
						&lt;/Columns&gt;
					&lt;/Data&gt;
					</Value>
          </Parameter>
          <Parameter Name="Interactive">
            <Value>True</Value>
          </Parameter>
          <Parameter Name="ReportTitle">
            <Value>Invalid Certificate Report</Value>
          </Parameter>
        </Parameters>
      </LinkedReport>
      <LinkedReport ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.InventoryReport" Accessibility="Public" Base="SystemCenterCentral.Utilities.Certificates.CustomTwoGroupConfigurationReport" Visible="true" Target="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup">
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ComputerList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <Parameters>
          <Parameter Name="StartDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetType">
            <Value>Day</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetValue">
            <Value>-7</Value>
          </Parameter>
          <Parameter Name="EndDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetType">
            <Value>None</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetValue">
            <Value>0</Value>
          </Parameter>
          <Parameter Name="ObjectGroupName">
            <Value>SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup</Value>
          </Parameter>
          <Parameter Name="Properties">
            <Value>
              
					&lt;Data&gt;
						&lt;Columns&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="System!System.Entity"]/DisplayName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLIssuer$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLThisUpdate$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLNextUpdate$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLEntries$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CRL"]/CRLSignatureAlgo$&lt;/ID&gt;
							&lt;/Column&gt;
						&lt;/Columns&gt;
					&lt;/Data&gt;
					
            </Value>
          </Parameter>
          <Parameter Name="Interactive">
            <Value>True</Value>
          </Parameter>
          <Parameter Name="ReportTitle">
            <Value>Not Updated CRL Report</Value>
          </Parameter>
        </Parameters>
      </LinkedReport>
      <LinkedReport ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.InventoryReport" Accessibility="Public" Base="SystemCenterCentral.Utilities.Certificates.CustomTwoGroupConfigurationReport" Visible="true" Target="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup">
        <ParameterBlock columns="6" xmlns="http://schemas.microsoft.com/mom/reporting/2007/ReportParameterSettings">
          <Controls>
            <Control columnSpan="1" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.RelativeDateTimePicker">
              <ReportParameters>
                <ReportParameter name="TimeZone" binding="TimeZone">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.TimeZone</Prompt>
                </ReportParameter>
                <ReportParameter name="TimeZoneName" binding="TimeZoneName" />
                <ReportParameter name="StartDate_BaseType" binding="StartDate_BaseType" />
                <ReportParameter name="StartDate_BaseValue" binding="StartDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.StartDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="StartDate_OffsetType" binding="StartDate_OffsetType" />
                <ReportParameter name="StartDate_OffsetValue" binding="StartDate_OffsetValue" />
                <ReportParameter name="EndDate_BaseType" binding="EndDate_BaseType" />
                <ReportParameter name="EndDate_BaseValue" binding="EndDate_BaseValue">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.EndDateTime</Prompt>
                </ReportParameter>
                <ReportParameter name="EndDate_OffsetType" binding="EndDate_OffsetType" />
                <ReportParameter name="EndDate_OffsetValue" binding="EndDate_OffsetValue" />
              </ReportParameters>
            </Control>
            <Control columnSpan="3" type="Microsoft.SystemCenter.DataWarehouse.Report.ParameterControl.MonitoringObjectXmlPicker">
              <ReportParameters>
                <ReportParameter name="ComputerList">
                  <Prompt>Microsoft.SystemCenter.DataWarehouse.Report.Library!Microsoft.SystemCenter.DataWarehouse.Report.ParameterPrompt.ObjectList</Prompt>
                </ReportParameter>
                <ReportParameter name="ManagementGroupId" binding="GroupList" />
              </ReportParameters>
            </Control>
          </Controls>
        </ParameterBlock>
        <Parameters>
          <Parameter Name="StartDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetType">
            <Value>Day</Value>
          </Parameter>
          <Parameter Name="StartDate_OffsetValue">
            <Value>-7</Value>
          </Parameter>
          <Parameter Name="EndDate_BaseType">
            <Value>Today</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetType">
            <Value>None</Value>
          </Parameter>
          <Parameter Name="EndDate_OffsetValue">
            <Value>0</Value>
          </Parameter>
          <Parameter Name="ObjectGroupName">
            <Value>SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup</Value>
          </Parameter>
          <Parameter Name="Properties">
            <Value>
              
					&lt;Data&gt;
						&lt;Columns&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="System!System.Entity"]/DisplayName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertFriendlyName$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertIssuedBy$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidFrom$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertValidTo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertStatus$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CAVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertVersion$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertSignatureAlgo$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPublicKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertPrivateKey$&lt;/ID&gt;
							&lt;/Column&gt;
							&lt;Column Visible ="False"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/CertThumbprint$&lt;/ID&gt;
							&lt;/Column&gt;
              &lt;Column Visible ="True"&gt;
								&lt;ID&gt;$MPElement[Name="SystemCenterCentral.Utilities.Certificates.Certificate"]/TemplateName$&lt;/ID&gt;
							&lt;/Column&gt;        
						&lt;/Columns&gt;
					&lt;/Data&gt;
					
            </Value>
          </Parameter>
          <Parameter Name="Interactive">
            <Value>True</Value>
          </Parameter>
          <Parameter Name="ReportTitle">
            <Value>Expiring Certificate Report</Value>
          </Parameter>
        </Parameters>
      </LinkedReport>
    </LinkedReports>
  </Reporting>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ApplicationComponent">
          <Name>Certificate Services Component</Name>
          <Description>Abstract base class for all certificate components</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate">
          <Name>Certificate</Name>
          <Description>Certificate class</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CAVersion">
          <Name>CA Certificate Version</Name>
          <Description>CA Certificate Index &amp; CA Certificate Key Index</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertExpiresWithin31Days">
          <Name>Expires Soon Flag</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertFriendlyName">
          <Name>Friendly Name</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertIssuedBy">
          <Name>Issuer</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertIssuedTo">
          <Name>Subject</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertPrivateKey">
          <Name>Private Key present</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertPublicKey">
          <Name>Public Key Type</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertSerial">
          <Name>Serial N°</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertSignatureAlgo">
          <Name>Signature Algorithm</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertStatus">
          <Name>Status (Validity)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertTimeStatus">
          <Name>Status (Time)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertStore">
          <Name>Certificate Store</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertThumbprint">
          <Name>Thumbprint</Name>
          <Description>Key property</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertValidFrom">
          <Name>Valid from (UTC)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertValidTo">
          <Name>Valid to (UTC)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="CertVersion">
          <Name>Version</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="TemplateName">
          <Name>Template Name</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="EnhancedKeyUsageList">
          <Name>EKU List</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate" SubElementID="SubjectAlternativeNameList">
          <Name>SAN List</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.NonRootCertificate">
          <Name>Certificate (CA signed)</Name>
          <Description>Specialized class (non-root certificate)</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.RootCertificate">
          <Name>Certificate (CA cert)</Name>
          <Description>Specialized class (CertificateAuthority extension set)</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate">
          <Name>Certificate (self signed)</Name>
          <Description>Specialized class (Subject and Issuer are identical, yet it is no CA certificate)</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.Certificate">
          <Name>Certificate store hosts Certificate</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore">
          <Name>Certificate Store</Name>
          <Description>Certificate store class</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="CertStoreID">
          <Name>Access Key</Name>
          <Description>Key property</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="StoreProvider">
          <Name>Provider</Name>
          <Description>System / File / LDAP</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="StoreType">
          <Name>Type</Name>
          <Description>LocalMachine / CurrentUser / Services / Users</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="CertStoreName">
          <Name>Store Name</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="Sync">
          <Name> - (legacy property) - </Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="ChildMonitorInterval">
          <Name>Certificate Monitor Interval</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="ChildDiscoveryInterval">
          <Name>Certificate Discovery Interval</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="ChildScriptTimeout">
          <Name>Certificate Script Timeout</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="RevocationFlag">
          <Name>Certificate Monitor RevocationFlag</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="RevocationMode">
          <Name>Certificate Monitor RevocationMode</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="VerificationFlags">
          <Name>Certificate Monitor VerificationFlags</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="SubjectIncludeRegEx">
          <Name>Subject Filter (Include)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="IssuerIncludeRegEx">
          <Name>Issuer Filter (Include)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="SubjectExcludeRegEx">
          <Name>Subject Filter (Exclude)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="IssuerExcludeRegEx">
          <Name>Issuer Filter (Exclude)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="EnhKeyUseIncludeRegEx">
          <Name>Enhanced Key Usage OID Filter (Include)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="EnhKeyUseExcludeRegEx">
          <Name>Enhanced Key Usage OID Filter (Exclude)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="TemplateIncludeRegEx">
          <Name>Certificate Template Filter (Include)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore" SubElementID="TemplateExcludeRegEx">
          <Name>Certificate Template Filter (Exclude)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore">
          <Name>Certificate Store (Local)</Name>
          <Description>Specialized certificate store class (locally on the server)</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry">
          <Name>Certificate Store (Registry)</Name>
          <Description>Specialized certificate store class (in local registry)</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.SmartCard">
          <Name>Certificate Store (SmartCard)</Name>
          <Description>Specialized certificate store class (on locally connected SmartCard)</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Computer.Hosts.SystemCenterCentral.Utilities.Certificates.CertificateStore">
          <Name>Windows Computer hosts Certificate Store</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup">
          <Name>PKI Certificates and CRLs Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup">
          <Name>Current CRLs Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup">
          <Name>Certificates and CRLs required by Windows Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup">
          <Name>Expired Certificates Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup">
          <Name>Invalid Certificates Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup">
          <Name>Not Updated CRLs Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CAGroup">
          <Name>CA Certificates Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup">
          <Name>Expiring Certificates Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup">
          <Name>Valid Certificates Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup">
          <Name>CA Certificate Stores Group</Name>
          <Description>Certificate stores which contain CA certificate types (Trusted Root &amp; Third Party)</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup">
          <Name>Monitoring Disabled Certificate Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL">
          <Name>Certificate Revocation List</Name>
          <Description>Certificate Revocation List class</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CertStore">
          <Name>Certificate Store</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLEntries">
          <Name>Entries in CRL</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLIssuer">
          <Name>Issuer</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLNeedsUpdate">
          <Name>Needs Update</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLNextUpdate">
          <Name>Next Update (UTC)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLSignatureAlgo">
          <Name>Signature Algorithm</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLThisUpdate">
          <Name>This Update (UTC)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLThumbprint">
          <Name>Hash (Key)</Name>
          <Description>Key property</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLVersion">
          <Name>Version</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL" SubElementID="CRLCAVersion">
          <Name>CA Version</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.Hosts.SystemCenterCentral.Utilities.Certificates.CRL">
          <Name>Certificate store hosts CRL</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CAGroup.Discovery">
          <Name>Containment discovery of the CA Certificate group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Discovery">
          <Name>Containment discovery of Certificates and CRLs group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CurrentCRLsGroup.Discovery">
          <Name>Containment discovery of the CRL (current) group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificatesGroup.Discovery">
          <Name>Containment discovery of the Certificates (expired) group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificatesGroup.Discovery">
          <Name>Containment discovery of the Certificates (invalid) group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.MonitoringDisabledGroup.Discovery">
          <Name>Containment discovery of the Monitoring disabled certificate group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLsGroup.Discovery">
          <Name>Containment discovery of the CRL (not updated) group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.RequiredWindowsCertificatesGroup.Discovery">
          <Name>Containment discovery of Certificates and CRLs required by Windows Group</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.RootCertificateStoreGroup.Discovery">
          <Name>Containment discovery of the Root Certificate Stores Group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificatesGroup.Discovery">
          <Name>Containment discovery of the Certificates (expire soon) group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ValidCertificatesGroup.Discovery">
          <Name>Containment discovery of the Certificates (valid) group</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.NonRootCertificate.Discovery">
          <Name>Discover Non-CA Certificates (locally)</Name>
          <Description>Discovers CA signed certificates. This discovery is enabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.RootCertificate.Discovery">
          <Name>Discover CertificateAuthority Certificates (locally)</Name>
          <Description>Discovers certificates that have the CertificateAuthority extension set. This discovery is enabled by default for CA, Trust and Root stores.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.SelfSignedCertificate.Discovery">
          <Name>Discover Self-Signed Certificates (locally)</Name>
          <Description>Discovers self signed certificates. This discovery is disabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.CRL.Discovery">
          <Name>Discover Certificate Revocation Lists (locally)</Name>
          <Description>Discovers Certificate Revocation Lists (CRLs). This discovery is enabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.WebHosting.Discovery">
          <Name>Discovery of local computer's certificate store "Web Hosting" (registry)</Name>
          <Description>Discovers the certificate store 'Web Hosting' respectively 'WebHosting' (of the computer). This discovery is enabled by default for Windows Server 2012 and 2012 R2.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.CA.Discovery">
          <Name>Discovery of local computer's Intermediate CA certificate store (registry)</Name>
          <Description>Discovers the certificate store 'Intermediate CA'. This discovery is disabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.My.Discovery">
          <Name>Discovery of local computer's certificate store "My / Personal" (registry)</Name>
          <Description>Discovers the certificate store 'Personal' respectively 'My' (of the computer). This discovery is enabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.Root.Discovery">
          <Name>Discovery of local computer's Trusted Root CA certificate store (registry)</Name>
          <Description>Discovers the certificate store 'Trusted Root CAs'. This discovery is disabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.Trust.Discovery">
          <Name>Discovery of local computer's Enterprise Trust certificate store (registry)</Name>
          <Description>Discovers the certificate store 'Enterprise Trust'. This discovery is disabled by default.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.LocalServiceCertificateStore.Script.Discovery">
          <Name>Discovery of local computer's WinNT service certificate stores</Name>
          <Description>Queries the local registry to discover WinNT service certificate stores. Only stores containing at least one certificate or CRL are going to be discovered. This discovery is disabled by default. It only works on Windows Server 2008 computers.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates">
          <Name>PKI Certificate Validation V3</Name>
          <Description>Monitors PKI Certificate validity in local Windows certificate stores. Handles certificates and CRLs for validity and expiry.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource">
          <Name>SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource</Name>
          <Description>Script Discovery DS</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate.LocalScriptDiscovery.DataSource" SubElementID="ExpiryThresholdDays">
          <Name>Expires Soon Threshold Days (Views/Reports)</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL.LocalScriptDiscovery.DataSource">
          <Name>SystemCenterCentral.Utilities.Certificates.CRL.LocalScriptDiscovery.DataSource</Name>
          <Description>Script Discovery DS</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="RevocationFlag">
          <Name>X509RevocationFlag: Default: EntireChain</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="RevocationMode">
          <Name>X509RevocationMode: Default: Online</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="VerificationFlags">
          <Name>X509VerificationFlags: Default: NoFlag</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="SubjectIncludeRegEx">
          <Name>Subject Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="IssuerIncludeRegEx">
          <Name>Issuer Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="SubjectExcludeRegEx">
          <Name>Subject Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="IssuerExcludeRegEx">
          <Name>Issuer Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="EnhKeyUseIncludeRegEx">
          <Name>Enhanced Key Usage OID Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="EnhKeyUseExcludeRegEx">
          <Name>Enhanced Key Usage OID Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="TemplateIncludeRegEx">
          <Name>Certificate Template Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStoreDiscoveryProvider" SubElementID="TemplateExcludeRegEx">
          <Name>Certificate Template Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="RevocationFlag">
          <Name>X509RevocationFlag: Default: EntireChain</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="RevocationMode">
          <Name>X509RevocationMode: Default: Online</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="VerificationFlags">
          <Name>X509VerificationFlags: Default: NoFlag</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="SubjectIncludeRegEx">
          <Name>Subject Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="IssuerIncludeRegEx">
          <Name>Issuer Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="SubjectExcludeRegEx">
          <Name>Subject Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="IssuerExcludeRegEx">
          <Name>Issuer Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="EnhKeyUseIncludeRegEx">
          <Name>Enhanced Key Usage OID Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="EnhKeyUseExcludeRegEx">
          <Name>Enhanced Key Usage OID Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="TemplateIncludeRegEx">
          <Name>Certificate Template Filter - Include (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ServiceCertificateStoreDiscoveryProvider" SubElementID="TemplateExcludeRegEx">
          <Name>Certificate Template Filter - Exclude (RegEx)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor">
          <Name>Certificate lifespan</Name>
          <Description>Checks if a certificate is about to expire soon, has expired or is not valid yet</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" SubElementID="CertExpired">
          <Name>has expired or not valid yet</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" SubElementID="CertExpiresSoon">
          <Name>expires soon</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" SubElementID="CertLifeTimeOk">
          <Name>not about to expire soon</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor_AlertMessageResourceID">
          <Name>Certificate lifespan alert</Name>
          <Description>The certificate {0}.

Certificate Subject: {1}
Certificate Issuer: {2}
Serial number: {3}

Enterpise Template: {4}
Enhanced Key Usage List: {5}

Store: {6}\{7}
Monitoring User: {8}

Chain Time Details:
{9}</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor">
          <Name>Certificate validity</Name>
          <Description>Checks if a certificate is invalid for other reason than having expired</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" SubElementID="CertInvalid">
          <Name>Invalid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" SubElementID="CertValid">
          <Name>Valid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor_AlertMessageResourceID">
          <Name>Certificate is invalid</Name>
          <Description>The certificate is not valid. Reason:
{0}

Certificate Subject: {1}
Certificate Issuer: {2}
Serial number: {3}

Enterpise Template: {4}
Enhanced Key Usage List: {5}

Store: {6}\{7}
Monitoring User: {8}

Chain Details:
{9}</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor">
          <Name>CRL Update</Name>
          <Description>Checks if a Certificate Revocation List was updated in a timely manner</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor" SubElementID="CRLIsCurrent">
          <Name>Is current</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor" SubElementID="CRLRequiresUpdate">
          <Name>Requires update</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor_AlertMessageResourceID">
          <Name>CRL update required</Name>
          <Description>The certificate revocation list {0} has not been updated.

Update is/was required by: {1}
Store Name: {2}

Store Key: {3}
Store Provider: {4}
Store Type: {5}
Monitoring User: {6}</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Certificate.RollUp.Monitor">
          <Name>Certificates Roll Up</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRL.RollUp.Monitor">
          <Name>CRL Roll Up</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.RollUp.Monitor">
          <Name>Certificate Store Roll Up</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor">
          <Name>Certificate Monitoring compatibility</Name>
          <Description>The "PKI Certificate Validation" management pack uses PowerShell to discover and monitor PKI Certificates
If this Powershell not installed, the management pack will fail to discover the certificates.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor" SubElementID="Healthy">
          <Name>Success Event</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor" SubElementID="Warning">
          <Name>Failure Event</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor_AlertMessageResourceID">
          <Name>PKI Certificate Monitoring is not possible</Name>
          <Description>PowerShell is not installed on this computer or the installed version is not compatible with PowerShell 2.0.

In order to monitor PKI Certificates, install the appropriate PowerShell environment (&gt;= Version 2.0).</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.StoreOverridesValid.Monitor">
          <Name>Certificate Verification Overrides</Name>
          <Description>This monitor checks if overrides set for certificate validation are valid.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.StoreOverridesValid.Monitor_AlertMessageResourceID">
          <Name>Invalid PKI certificate monitoring override(s) configured</Name>
          <Description>PKI certificate monitoring and discovery overridable parameters RevocationFlag, RevocationMode or VerificationFlags in the context of this certificate store are not valid.
 
Default values are being used instead.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType">
          <Name>Certificate expiry monitor type</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="AboutToExpire">
          <Name>About to expire</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="CertificateInstance">
          <Name>Certificate filter</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="CorrectInstance">
          <Name>Instance filter</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="Expired">
          <Name>Expired or not yet valid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="ExpiresSoon">
          <Name>Expires soon</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="HasExpired">
          <Name>Has expired</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="LifeTimeOk">
          <Name>Lifetime Ok</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="LifetimeThreshold">
          <Name>Lifetime threshold (days)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="NotAboutToExpire">
          <Name>Not about to expire</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateExpiry.MonitorType" SubElementID="ScriptDS">
          <Name>CertUtil output data source</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType">
          <Name>Certificate validity monitor type</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="Bad">
          <Name>Invalid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="CertificateInstance">
          <Name>Certificate filter</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="CertNotValid">
          <Name>Certificate is invalid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="CertValid">
          <Name>Certificate is valid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="CorrectInstance">
          <Name>Instance filter</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="Good">
          <Name>Valid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.MonitorType" SubElementID="ScriptDS">
          <Name>CertUtil output datasource</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType">
          <Name>CRL Update monitor type</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="CorrectInstance">
          <Name>Instance filter</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="CRLInstance">
          <Name>CRL filter</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="CRLIsCurrent">
          <Name>CRL is current</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="CRLNotCurrent">
          <Name>CRL requires update</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="Current">
          <Name>Is current</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="ScriptDS">
          <Name>CertUtil output datasource</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="UpdateRequired">
          <Name>Requires update</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.MonitorType" SubElementID="NextUpdateThreshold">
          <Name>Next Update Threshold (days)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard">
          <Name>Certificate and CRL Issues</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_DashboardOverride">
          <Name>Certificate and CRL Issues</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireState">
          <Name>Certificates - About to expire</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.AboutToExpireStateOverride">
          <Name>Certificates - About to expire</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredState">
          <Name>Certificates - Expired</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.ExpiredStateOverride">
          <Name>Certificates - Expired</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidState">
          <Name>Certificates - Invalid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.InvalidStateOverride">
          <Name>Certificates - Invalid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedState">
          <Name>CRLs - Not updated</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.Issue_Dashboard.CRLNotUpdatedStateOverride">
          <Name>CRLs - Not updated</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.AlertView">
          <Name>Certificate and CRL Alerts</Name>
          <Description>All alerts about certificates or CRLs originating from the Certificate Management Pack</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CurrentCRLs.StateView">
          <Name>CRLs - Current</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.StateView">
          <Name>Certificates - Expired</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.StateView">
          <Name>Certificates - Invalid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.MPAlertView">
          <Name>Management Pack Alerts</Name>
          <Description>Alerts about the internal operations of the management pack. They are not related to the certificates themselfes.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.StateView">
          <Name>CRLs - Not Updated</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.StateView">
          <Name>Certificates - About to Expire</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.StoreStateView">
          <Name>Certificate Stores Availability</Name>
          <Description>State view of the certificate stores discovered.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ValidCertificates.StateView">
          <Name>Certificates - Valid</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CACertificates.StateView">
          <Name>CA Certificates</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.DisabledCertificates.StateView">
          <Name>Monitoring Disabled (by Friendly Name)</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ViewFolder">
          <Name>PKI Certificate Validation</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertAndCRLViewFolder">
          <Name>Certificates and CRLs</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.ArchiveCertificate.Recovery">
          <Name>ARCHIVE Certificate</Name>
          <Description>Set the "Archived" flag on the expired certificate and run discovery. Archived certificates will no longer be monitored by the management pack.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.ArchiveCertificate.Recovery">
          <Name>ARCHIVE Certificate</Name>
          <Description>Set the "Archived" flag on the expired certificate and run discovery. Archived certificates will no longer be monitored by the management pack.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.DisableCertificate.Recovery">
          <Name>DISABLE Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine. Appends the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.DisableCertificate.Recovery">
          <Name>DISABLE Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine. Appends the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.InventoryReport">
          <Name>Certificate Inventory Report</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.CRLInventoryReport">
          <Name>CRL Inventory Report</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.InventoryReport">
          <Name>Expired Certificates Report</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.InventoryReport">
          <Name>Invalid Certificates Report</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.InventoryReport">
          <Name>Not Updated CRLs Report</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.InventoryReport">
          <Name>Expiring Certificates Report</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CustomConfigurationReport">
          <Name>SCC Custom Configuration</Name>
          <Description>System Center Central Custom Configuration Report</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CustomGroupConfigurationReport">
          <Name>SCC Custom Group Configuration</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CustomTwoGroupConfigurationReport">
          <Name>SCC Custom Group-in-Group Configuration</Name>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.HighPrivilege.SecureReference">
          <Name>PKI Certificate Verification Privileged Account</Name>
          <Description>Allows the Certificate Verification MP to discover and monitor certificate stores in Low-Privilege Environments</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ArchiveNonRootCertificate.Task">
          <Name>ARCHIVE Certificate</Name>
          <Description>Set the "Archived" flag on a given certificate in the store on the agent machine and runs discovery. Archived certificates will no longer be monitored by the management pack.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ArchiveRootCertificate.Task">
          <Name>ARCHIVE CA Certificate</Name>
          <Description>Set the "Archived" flag on a given certificate in the store on the agent machine and runs discovery. Archived certificates will no longer be monitored by the management pack.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ArchiveSelfSignedCertificate.Task">
          <Name>ARCHIVE Self-Signed Certificate</Name>
          <Description>Set the "Archived" flag on a given certificate in the store on the agent machine and runs discovery. Archived certificates will no longer be monitored by the management pack.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.DisableNonRootCertificate.Task">
          <Name>DISABLE Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine. Appends the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.DisableRootCertificate.Task">
          <Name>DISABLE CA Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine. Appends the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.DisableSelfSignedCertificate.Task">
          <Name>DISABLE Self-Signed Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine. Appends the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.EnableNonRootCertificate.Task">
          <Name>ENABLE Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine and runs discovery. Removes the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.EnableRootCertificate.Task">
          <Name>ENABLE CA Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine and runs discovery. Removes the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.EnableSelfSignedCertificate.Task">
          <Name>ENABLE Self-Signed Certificate for Monitoring</Name>
          <Description>Set the "Friendly Name" given certificate in the store on the agent machine and runs discovery. Removes the disabled flag.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ListStoreCertificateProperties.Task">
          <Name>LIST Certificate Properties</Name>
          <Description>Lists the properties of certificates in the store.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ListCertificateProperties.Task">
          <Name>LIST Certificate Properties</Name>
          <Description>Lists the properties of a certificate (or all certificates in the store if thumbprint is overridden to a "." character).</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.NonRootCertificate.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers CA signed certificates. This discovery is enabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to disable the discovery if you do not need monitoring of non-CA certificates.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.RootCertificate.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers Certificate Authority certificates. This discovery is enabled by default for CA, Trust and Root stores.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable the discovery if you need monitoring of Certificate Authority certificates in other certificate stores.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.SelfSignedCertificate.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers self-signed certificates. This discovery is disabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable the discovery if you need monitoring of self-signed certificates.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.CRL.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers Certificate Revocation Lists (CRLs). This discovery is enabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to disable the monitor if you do not need monitoring of CRLs.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.WebHosting.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers the certificate store 'WebHosting' (of the computer). This discovery is disabled by default and may be used on:</maml:para>
              <maml:para>Windows Server 2012</maml:para>
              <maml:para>Windows Server 2012 R2</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable or configure filters to the discovery if you do not wish monitoring any or only a subset of the certificates present in this store.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.CA.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers the certificate store 'Intermediate CA'. This discovery is disabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable or configure filters to the discovery if you do not wish monitoring any or only a subset of the certificates present in this store.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.My.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers the certificate store 'Personal' (of the computer). This discovery is enabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable or configure filters to the discovery if you do not wish monitoring any or only a subset of the certificates present in this store.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.Root.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers the certificate store 'Trusted Root CAs'. This discovery is disabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable or configure filters to the discovery if you do not wish monitoring any or only a subset of the certificates present in this store.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry.Trust.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Discovers the certificate store 'Enterprise Trust'. This discovery is disabled by default.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Use overrides to enable or configure filters to the discovery if you do not wish monitoring any or only a subset of the certificates present in this store.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.LocalServiceCertificateStore.Script.Discovery" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Queries the local registry to discover WinNT service certificate stores. Only stores containing at least one certificate or CRL are going to be discovered. This discovery is enabled by default. It only works on Windows Server 2008 omputers.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Enable the discovery using overrides if you do require monitoring of windows services’ certificates.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks if certificates are about to expire. It generates a warning when the lifespan of a valid certificate is about to end. Certificates that have expired or are not valid yet, generate an error. Refer to the associated alert or the context property 'CertLifeTimeMessage' for more details.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>Certificates have a defined lifespan. It is defined by the ‘Valid From’ and ‘Valid To’ attributes. When a certificate expires is may not be used any longer and has to be replaced or renewed. </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Renew or replace the certificate, preferably before the Valid To date. </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>The default threshold of 21 days can be changed by overriding the parameter ‘LifetimeThreshold’</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor warns when a certificate is invalid due to one of the following reasons:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Incomplete certificate chain</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Invalid signature</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>The issuing CA (Root CA) is not trusted</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Certificate was revoked</maml:para>
                </maml:listItem>
              </maml:list>
              <maml:para />
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Correct the condition that lead to the certificate becoming invalid.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>Note that this monitor is not alerting when a certificate becomes invalid due to its lifetime having expired. The monitor ‘Certificate Lifespan’ is taking care of that. </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.CRLUpdate.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>A Certificate Revocation List (CRL) has an effective date. It is referred to as the "next update". Often a CRL is being automatically renewed when the effective date is reached. Should this not happen, the monitor alerts that the CRL should be renewed.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>CRLs are updated using ldap, http or file access. If these automatic methods are unsucessful, the update might fail and the CRL expire. </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the CRL’s distribution points. The machine hosting the certificate store where the CRL is held, needs to have access to at least one of the distribution points in oder to be automatically updated.</maml:para>
              <maml:para>Alternatively, request an updated CRL from the issuer. Often it can be downloaded from a web site. </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>The default threshold of 0 days can be changed by overriding the parameter ‘NextUpdateThreshold’</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.PowerShellV2.Installed.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>PowerShell Version &gt;= 2.0 is required for PKI certificate monitoring.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Download and install PowerShell on this agent computer from <maml:navigationLink><maml:linkText>www.microsoft.com</maml:linkText><maml:uri href="http://www.microsoft.com" /></maml:navigationLink></maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.StoreOverridesValid.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>At least on of the overridable parameters RevocationFlag, RevocationMode or VerificationFlags as been set to an onvalid string.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Check the alert's context for possible values of the parameters. Then correct the override.</maml:para>
              <maml:para>Value enumeration and explanation is found on msdn:</maml:para>
              <maml:para>System.Security.Cryptography.X509Certificates.X509RevocationFlag</maml:para>
              <maml:para>System.Security.Cryptography.X509Certificates.X509RevocationMode</maml:para>
              <maml:para>System.Security.Cryptography.X509Certificates.X509VerificationFlags</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.InventoryReport" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Lists all certificates in a certificate store</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>To use select certificate store objects as A GROUP. Search for object names containing 'Store'</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.CertificateStore.CRLInventoryReport" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Lists certificate revocation lists (CRL) in a Certificate Store.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>To use this report, choose 'Certificate Store' objects as GROUP. Search for 'Store'.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.ExpiredCertificates.InventoryReport" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Lists all expired certificates in the management group.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This report is preconfigured to only show certificates that have expired. Optionally the report scope can be controlled by specifying a group containing computer or certificate store objects.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.InvalidCertificates.InventoryReport" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Lists all invalid certificates in the management group.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This report is preconfigured to only show certificates that are invalid. Optionally the report scope can be controlled by specifying a group containing computer or certificate store objects.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLs.InventoryReport" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Lists all certificate revocation lists (CRL) in the management group that have not been updated when their 'Next Update' date was reached.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This report is preconfigured to only show CRLs that have not been updated. Optionally the report scope can be controlled by specifying a group containing computer or certificate store objects.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertificates.InventoryReport" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Lists all certificates in the management group that are going to expire within a month (by default).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This report is preconfigured to only show certificates that will expire within a month (by default). Optionally the report scope can be controlled by specifying a group containing computer or certificate store objects.</maml:para>
              <maml:para>If a different timespan is required, an override at the corresponding certificate discovery rule may be set. Note that such a change would not be reflected until passing one discpvery cycle.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
  <Resources>
    <Resource ID="Res.TwoGroupCustomConfigurationReportDataGet_Install" Accessibility="Internal" FileName="TwoGroupCustomConfigurationReportDataGet-Install.sql" HasNullStream="false" />
    <Resource ID="Res.TwoGroupCustomConfigurationReportDataGet_Uninstall" Accessibility="Internal" FileName="TwoGroupCustomConfigurationReportDataGet-Uninstall.sql" HasNullStream="false" />
    <Resource ID="Res.TwoGroupCustomConfigurationReportDataGet_Upgrade" Accessibility="Internal" FileName="TwoGroupCustomConfigurationReportDataGet-Upgrade.sql" HasNullStream="false" />
    <ReportResource ID="Res.CustomConfigurationReport" Accessibility="Internal" FileName="CustomConfigurationReport.rdl" HasNullStream="false" MIMEType="text/rdl" />
    <ReportResource ID="Res.CustomGroupConfigurationReport" Accessibility="Internal" FileName="CustomGroupConfigurationReport.rdl" HasNullStream="false" MIMEType="text/rdl" />
    <ReportResource ID="Res.CustomTwoGroupConfigurationReport" Accessibility="Internal" FileName="CustomTwoGroupConfigurationReport.rdl" HasNullStream="false" MIMEType="text/rdl" />
    <ReportResource ID="SCC_banner_landscape.jpg" Accessibility="Internal" FileName="SCC_banner_landscape_2012.jpg" HasNullStream="false" MIMEType="image/jpeg" />
    <ReportResource ID="SCC_banner_portrait.jpg" Accessibility="Internal" FileName="SCC_banner_portrait_2012.jpg" HasNullStream="false" MIMEType="image/jpeg" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image16" Accessibility="Internal" FileName="Cert_and_CRL_Group_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CertCRLGroup.Image80" Accessibility="Internal" FileName="Cert_and_CRL_Group_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.Components.Image16" Accessibility="Internal" FileName="Cert_Component_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.Components.Image80" Accessibility="Internal" FileName="Cert_Component_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image16" Accessibility="Internal" FileName="Cert_Expire_Group_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.SoonToExpireCertGroup.Image80" Accessibility="Internal" FileName="Cert_Expire_Group_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image16" Accessibility="Internal" FileName="Cert_Invalid_Group_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.InvalidCertGroup.Image80" Accessibility="Internal" FileName="Cert_Invalid_Group_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image16" Accessibility="Internal" FileName="Cert_Valid_Group_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.ValidCertGroup.Image80" Accessibility="Internal" FileName="Cert_Valid_Group_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.Certificate.Image16" Accessibility="Internal" FileName="Certificate_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.Certificate.Image80" Accessibility="Internal" FileName="Certificate_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CRL.Image16" Accessibility="Internal" FileName="CRL_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CRL.Image80" Accessibility="Internal" FileName="CRL_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CertStore.Image16" Accessibility="Internal" FileName="Certificate_Store_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CertStore.Image80" Accessibility="Internal" FileName="Certificate_Store_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image16" Accessibility="Internal" FileName="CRL_Current_Group_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.CurrentCRLGroup.Image80" Accessibility="Internal" FileName="CRL_Current_Group_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image16" Accessibility="Internal" FileName="CRL_NotCurrent_Group_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.NotUpdatedCRLGroup.Image80" Accessibility="Internal" FileName="CRL_NotCurrent_Group_80.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image16" Accessibility="Internal" FileName="Root_Certificate_16.png" HasNullStream="false" />
    <Image ID="SystemCenterCentral.Utilities.Certificates.RootCertificate.Image80" Accessibility="Internal" FileName="Root_Certificate_80.png" HasNullStream="false" />
  </Resources>
</ManagementPack>