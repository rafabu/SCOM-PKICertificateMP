<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks</ID>
      <Version>1.4.1.0</Version>
    </Identity>
    <Name>PKI Certificate Validation V3 (Rediscovery Tasks)</Name>
    <References>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Certificate">
        <ID>SystemCenterCentral.Utilities.Certificates</ID>
        <Version>1.4.1.0</Version>
        <PublicKeyToken>e5c80663d573f08c</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RepeatedEvent.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LogName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Expression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Consolidator" type="ConsolidatorType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource TypeID="Windows!Microsoft.Windows.BaseEventProvider" ID="EventRepeatDS">
                <ComputerName>$Config/ComputerName$</ComputerName>
                <LogName>$Config/LogName$</LogName>
              </DataSource>
              <ConditionDetection TypeID="System!System.ExpressionFilter" ID="RepeatedFilterCondition">
                <Expression>$Config/Expression$</Expression>
              </ConditionDetection>
              <ConditionDetection TypeID="System!System.ConsolidatorCondition" ID="RepeatedDataCondition">
                <Consolidator>$Config/Consolidator$</Consolidator>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="RepeatedDataCondition">
                <Node ID="RepeatedFilterCondition">
                  <Node ID="EventRepeatDS" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.ConsolidatorData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA" Accessibility="Internal" RunAs="Certificate!SystemCenterCentral.Utilities.Certificates.HighPrivilege.SecureReference" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="CertStoreID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreProvider" type="xsd:string" default="System" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="StoreType" type="xsd:string" default="LocalMachine" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="DemandDiscoveryScript" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>SystemCenterCentral.Utilities.Certificates.Certificate_DiscoveryDemand_Script_V1.ps1</ScriptName>
                <ScriptBody><![CDATA[#
#	Writes an event to OperationsManager event log to ask for
#       immediate rediscovery
#
#		System requirements: Powershell >= 2.0 / .NET >= 2.0
#
#		Parameters
#			$computerName		
#			$storename			e.g. My
#			$storeProvider		SystemRegistry | System | File | LDAP
#			$storeType			LocalMachine | CurrentUser | Services | Users
#
# Version 1.0 - 22. May 2015 - initial            - Raphael Burri - raburri@bluewin.ch

#region parameters
param([string]$computerName = "localhost",
[string]$storeName = "My",
[string]$storeProvider = "SystemRegistry",
[string]$storeType = "LocalMachine"

)
#endregion


#region variables and constants
# get script name
# SCOM agent calls them dynamically, assigning random names
#$scriptName = $MyInvocation.MyCommand.Name
$scriptName = "Certificate_DiscoveryDemand_Script_V1.ps1"
$userName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

#see on input parameters - default to LocalSystem store My (personal computer store), SystemRegistry provider (registry) and LocalSystem storetype
if ($storeName -eq "") { $storeName = "My"}

#PoSh 2.0 was shipped with 2008R2/Win7. In order to have as little dependency on later updates
#     as possible this script only uses 2.0 cmdlets
$minimalPSVersion = "2.0"
#endregion

# Get access to the scripting API
$scomAPI = new-object -comObject "MOM.ScriptAPI"

# check if Powershell >= 2.0 is running
if( ($PSVersionTable.PSCompatibleVersions) -contains $minimalPSVersion)
	{
	#Write-Host Powershell installed: ( $PSVersionTable.PSVersion.ToString() )
	#Write-Host      It is compatible with version $minimalPSVersion required by this script
	}
else
	{
	#Write-Host Powershell installed: $PSVersionTable.PSVersion.ToString() `t`t`t`t`t`t`t`t -BackgroundColor red 
	#Write-Host `tIt is not compatible with version $minimalPSVersion required by this script `t -BackgroundColor red
	exit
	}


function main
	{
	Write-EventLogEntry -EventLogName 'Operations Manager' -EventSourceName 'Health Service Script' -EventId 121 -EventSeverity 'Information' -EventDescription ("
Task to ask for re-discovery was run.

Computer: %3
Store Name: %4
Store Provider: " + $storeProvider + "
Store Type: " + $storeType) -EventParameter1 $ScriptName -EventParameter2 $computerName -EventParameter3 $storeName
		
	Write-Output ("Asked for re-discovery of the certificate store by writing local event.")	
	}

Function Write-EventLogEntry
{
	param ([string]$EventLogName, [string]$EventSourceName, $EventId ,[string]$EventSeverity, [string]$EventDescription, [string]$EventParameter1, [string]$EventParameter2, [string]$EventParameter3) 
	# using .NET objects as they allow event parameters
	$newEvent = new-object System.Diagnostics.Eventinstance($EventId, 0, [system.diagnostics.eventlogentrytype]::[string]$EventSeverity) 
	[system.diagnostics.EventLog]::WriteEvent([string]$EventSourceName, $newEvent, $EventDescription, $EventParameter1, $EventParameter2, $EventParameter3)
}

#call main function
Main]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>computerName</Name>
                    <Value>$Config/ComputerName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeName</Name>
                    <Value>$Config/CertStoreID$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeProvider</Name>
                    <Value>$Config/StoreProvider$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>storeType</Name>
                    <Value>$Config/StoreType$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="DemandDiscoveryScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DiscoveryTriggerScriptWA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="OriginatorComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="OriginatorStoreName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Debug" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="Debug" Selector="$Config/Debug$" ParameterType="bool" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="DisocveryTriggerScript" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>SystemCenterCentral.Utilities.Certificates.Certificate_Discovery_Trigger_V1.ps1</ScriptName>
                <ScriptBody><![CDATA[#Trigger OnDemand Discovery for Certificate MP
#
#       Will run on management server (SCOM Command Shell) side as a WriteAction
#       following certificate or store handling tasks
#
#		Parameters
#			$wfOriginatorComputerName			Name of the HealthService
#			$wfOriginatorStoreName              Name of the Certificate Store (key)
#
# Version 1.0 - 18. May 2015 - initial            - Raphael Burri - raburri@bluewin.ch
#
Param ($wfOriginatorComputerName = 'devscom12-1.mgmtdom.momdev',
	$wfOriginatorStoreName = 'My',
	$debug = "False")

#variables
$computerName ='localhost'
	
#SCOM safe reformatting of boolean override (that are actually strings); default to True unless parameter is string "False"
if (!$debug -eq "False") {$debug = "True"}
#SCOM API & discovery data
$scomAPI = new-object -comObject 'MOM.ScriptAPI'
if ($debug -eq 'true') { $scomAPI.LogScriptEvent("Certificate_Discovery_Trigger_V1.ps1", 130 , 4, "
Starting script with the folowing parameters:

wfOriginatorComputerName: " + $wfOriginatorComputerName + "
wfOriginatorStoreName: " + $wfOriginatorStoreName) }

#load SCOM module
if (!(Get-Module -Name OperationsManager)) {import-module OperationsManager}
#import-module operationsmanager
#load SDK & connect to allow more selectiv selecting of monitoring objects
$error.Clear()
$ErrorActionPreference = "SilentlyContinue"
#SCOM 2012
[void][System.Reflection.Assembly]::Load("Microsoft.EnterpriseManagement.Core, Version=7.0.5000.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")
[void][System.Reflection.Assembly]::Load('Microsoft.EnterpriseManagement.OperationsManager, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
$scomLevel = 7
if ($error) {
    $error.Clear()
    #SCOM 2007
    [void][System.Reflection.Assembly]::Load("Microsoft.EnterpriseManagement.Core, Version=6.0.4900.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")
    [void][System.Reflection.Assembly]::Load("Microsoft.EnterpriseManagement.OperationsManager, Version=6.0.4900.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")
    $scomLevel = 6 
}
$ErrorActionPreference = "Continue"

try{ $scomMG = [Microsoft.EnterpriseManagement.ManagementGroup]::Connect($computerName) }
catch {}
if (($scomMG) -and ($scomMG.IsConnected -eq $true)) {
	Write-Host ("Connected to SCOM Management Group: " + $scomMG.Name + "`n     on Computer: " + $ComputerName + ". SCOM Level " + $scomLevel)
	if ($debug -eq 'true') { $scomAPI.LogScriptEvent("Certificate_Discovery_Trigger.ps1", 131, 4, "Connected to SCOM Management Group: " + $scomMG.Name + "`n     on Computer: " + $ComputerName + ". SCOM Level " + $scomLevel) }
}
else {
	Write-Host -BackgroundColor Yellow ("Failed to connect to SCOM Management Group on Computer: " + $ComputerName + ". SCOM Level " + $scomLevel)
	$scomAPI.LogScriptEvent("Certificate_Discovery_Trigger.ps1", 132, 2, ("Failed to connect to SCOM Management Group on Computer: " + $ComputerName + ". SCOM Level " + $scomLevel + "
	
Ending script without taking any action."))
	exit
}


$hsClass = $scomMG.GetMonitoringClasses('Microsoft.SystemCenter.HealthService')[0]
$storeClass = $scomMG.GetMonitoringClasses('SystemCenterCentral.Utilities.Certificates.CertificateStore')[0]

$hsObjectCriteriaString = "DisplayName='" + $wfOriginatorComputerName + "'"
$hsObjectCriteria = new-object Microsoft.EnterpriseManagement.Monitoring.MonitoringObjectCriteria($hsObjectCriteriaString, $hsClass)
$hsObject = ($scomMG.GetMonitoringObjects($hsObjectCriteria))[0]

$storeObjectCriteriaString = "Name='" + $wfOriginatorStoreName + "' AND Path='" + $wfOriginatorComputerName + "'"
$storeObjectCriteria = new-object Microsoft.EnterpriseManagement.Monitoring.MonitoringObjectCriteria($storeObjectCriteriaString, $storeClass)
$storeObject = ($scomMG.GetMonitoringObjects($storeObjectCriteria))[0]

$discoveryCriteria = [Microsoft.EnterpriseManagement.Configuration.ManagementPackDiscoveryCriteria]"Name='SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.NonRootCertificate.Discovery' OR 
Name='SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.RootCertificate.Discovery' OR 
Name='SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.SelfSignedCertificate.Discovery' OR 
Name='SystemCenterCentral.Utilities.Certificates.LocalScriptProbe.CRL.Discovery'"
$discoveries = $scomMG.GetMonitoringDiscoveries($discoveryCriteria)

$taskCriteria = [Microsoft.EnterpriseManagement.Configuration.ManagementPackTaskCriteria]"Name='Microsoft.SystemCenter.TriggerOnDemandDiscovery'"
$task = ($scomMG.GetMonitoringTasks($taskCriteria))[0]

if (($hsObject -ne $null) -and ($storeObject -ne $null)) {
	#evaluate overrides; only run discovery if it is enabled in the context of target
	foreach ($discovery in $discoveries) {
		$discoveryEnabled = $discovery.Enabled
		
		$discoveryOverrideResults =  Get-SCOMOverrideResult -Discovery $discovery -Instance $storeObject |  where {$_.Override.Key -eq 'Enabled'}
	
		foreach ($discoveryOverrideResult in $discoveryOverrideResults) {
			$discoveryEnabled = $discoveryOverrideResult.Override.Value.EffectiveValue
		}
		
		if ($discoveryEnabled -eq 'True') {
			Write-Host Discovery is enabled on target $storeObject.Path \ $storeObject.Name: $discovery.DisplayName
			#trigger discovery via task
			$taskOverride = @{"DiscoveryId"=$discovery.Id.ToString(); "TargetInstanceId"=$storeObject.Id.ToString()}
			Write-Host -BackgroundColor Yellow Discovery: $discovery.Id.ToString()
			Write-Host -BackgroundColor Yellow Target: $storeObject.Id.ToString()
			
			$taskInstance = Start-SCOMTask -Task $task -Instance $hsObject -Override $taskOverride
			
			Write-Host `tTriggered `' $task.DisplayName `' task for this discovery and target
			if ($debug -eq 'true') { $scomAPI.LogScriptEvent("Certificate_Discovery_Trigger.ps1", 133, 4, "Triggered task '" + $task.DisplayName + "' for
			
Discovery: " + $discovery.Name + "
Target: " + $storeObject.Path + "\" + $storeObject.Name) }
		}
		else {
			Write-Host Discovery is disabled on target $storeObject.Path \ $storeObject.Name: $discovery.DisplayName
			if ($debug -eq 'true') { $scomAPI.LogScriptEvent("Certificate_Discovery_Trigger.ps1", 134, 4, "Discovery is disabled on target either completely or via an override.
Not triggering task.
			
Discovery: " + $discovery.Name + "
Target: " + $storeObject.Path + "\" + $storeObject.Name) }
		}
	}
}]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>wfOriginatorComputerName</Name>
                    <Value>$Config/OriginatorComputerName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>wfOriginatorStoreName</Name>
                    <Value>$Config/OriginatorStoreName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>debug</Name>
                    <Value>$Config/Debug$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="DisocveryTriggerScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.TriggerCertificateDiscovery.Rule" Target="Certificate!SystemCenterCentral.Utilities.Certificates.LocalCertificateStore.Registry" ConfirmDelivery="false" Enabled="true" Remotable="false">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="RepeatedEventCollection" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RepeatedEvent.DataSource">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(121|122|123|124|127)$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Certificate_Handling_Script_V3.ps1</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Certificate_DiscoveryDemand_Script_V1.ps1</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </Or>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^$Target/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
            <Consolidator>
              <ConsolidationProperties />
              <TimeControl>
                <!-- wait for delayed events -->
                <Latency>10</Latency>
                <!-- don't wait for backlogged items -->
                <DrainWait>0</DrainWait>
                <WithinTimeSchedule>
                  <!-- don't call script more than once every 1 minute -->
                  <Interval>60</Interval>
                </WithinTimeSchedule>
              </TimeControl>
              <!-- output only after the latency has passed -->
              <!--     will output any input item (if any) that has happened -->
              <CountingCondition>
                <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
              </CountingCondition>
            </Consolidator>
          </DataSource>
        </DataSources>
        <WriteActions>
          <!-- note: this WA will work for all connected agents and gateways. The writeaction will be executed on the "Collection MS" (MS with database access), associated with the agent. -->
          <!--    this will cause a security warning when importing the MP                             -->
          <WriteAction ID="TriggerDiscovery" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DiscoveryTriggerScriptWA" Target="SC!Microsoft.SystemCenter.CollectionManagementServer">
            <OriginatorComputerName>$Data/Context/DataItem/Params/Param[3]$</OriginatorComputerName>
            <OriginatorStoreName>$Data/Context/DataItem/Params/Param[4]$</OriginatorStoreName>
            <TimeoutSeconds>300</TimeoutSeconds>
            <Debug>false</Debug>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverStoreCertificates.Task" Accessibility="Internal" Enabled="true" Target="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverNonRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="Certificate!SystemCenterCentral.Utilities.Certificates.NonRootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverRootCertificate.Task" Accessibility="Internal" Enabled="true" Target="Certificate!SystemCenterCentral.Utilities.Certificates.RootCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
        </WriteAction>
      </Task>
      <Task ID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverSelfSignedCertificate.Task" Accessibility="Internal" Enabled="true" Target="Certificate!SystemCenterCentral.Utilities.Certificates.SelfSignedCertificate" Timeout="300" Remotable="false">
        <Category>Maintenance</Category>
        <WriteAction ID="Probe" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
        </WriteAction>
      </Task>
    </Tasks>
    <Recoveries>
      <Recovery ID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.ReDiscoveryTasks.Rediscover.Recovery" Accessibility="Internal" Enabled="false" Target="Certificate!SystemCenterCentral.Utilities.Certificates.Certificate" Monitor="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.Monitor" ExecuteOnState="Error" ResetMonitor="false" Remotable="false" Timeout="300">
        <Category>Maintenance</Category>
        <WriteAction ID="TriggerEvent" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
        </WriteAction>
      </Recovery>
      <Recovery ID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.ReDiscoveryTasks.Rediscover.Recovery" Accessibility="Internal" Enabled="false" Target="Certificate!SystemCenterCentral.Utilities.Certificates.Certificate" Monitor="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateValidity.Monitor" ExecuteOnState="Warning" ResetMonitor="false" Remotable="false" Timeout="300">
        <Category>Maintenance</Category>
        <WriteAction ID="TrigerEvent" TypeID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.DemandDiscoveryScriptWA">
          <TimeoutSeconds>300</TimeoutSeconds>
          <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <CertStoreID>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/CertStoreID$</CertStoreID>
          <StoreProvider>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreProvider$</StoreProvider>
          <StoreType>$Target/Host/Property[Type="Certificate!SystemCenterCentral.Utilities.Certificates.CertificateStore"]/StoreType$</StoreType>
        </WriteAction>
      </Recovery>
    </Recoveries>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks">
          <Name>PKI Certificate Validation V3 (Rediscovery Tasks)</Name>
          <Description>Tasks that allow near-immediate triggering of certificate discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateAboutToExpire.ReDiscoveryTasks.Rediscover.Recovery">
          <Name>REDISCOVER Certificates</Name>
          <Description>Triggers a re-discovery of the certificates in the store. The discovery will run within aproximately 1 minute after the task.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.CertificateValidity.ReDiscoveryTasks.Rediscover.Recovery">
          <Name>REDISCOVER Certificates</Name>
          <Description>Triggers a re-discovery of the certificates in the store. The discovery will run within aproximately 1 minute after the task.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.TriggerCertificateDiscovery.Rule">
          <Name>Trigger certificate discovery after certificate task was performed</Name>
          <Description>Rule will trigger an out-of-schedule certificate discovery following certificate handling tasks.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverStoreCertificates.Task">
          <Name>REDISCOVER Certificates</Name>
          <Description>Triggers a re-discovery of the certificates in the store. The discovery will run within aproximately 1 minute after the task.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverNonRootCertificate.Task">
          <Name>REDISCOVER Certificates</Name>
          <Description>Triggers a re-discovery of the certificates in the store. The discovery will run within aproximately 1 minute after the task.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverRootCertificate.Task">
          <Name>REDISCOVER Certificates</Name>
          <Description>Triggers a re-discovery of the certificates in the store. The discovery will run within aproximately 1 minute after the task.</Description>
        </DisplayString>
        <DisplayString ElementID="SystemCenterCentral.Utilities.Certificates.ReDiscoveryTasks.RediscoverSelfSignedCertificate.Task">
          <Name>REDISCOVER Certificates</Name>
          <Description>Triggers a re-discovery of the certificates in the store. The discovery will run within aproximately 1 minute after the task.</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>